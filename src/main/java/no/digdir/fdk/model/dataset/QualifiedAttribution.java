/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model.dataset;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Qualified attribution for a dataset */
@org.apache.avro.specific.AvroGenerated
public class QualifiedAttribution extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5705252899077787513L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"QualifiedAttribution\",\"namespace\":\"no.digdir.fdk.model.dataset\",\"doc\":\"Qualified attribution for a dataset\",\"fields\":[{\"name\":\"role\",\"type\":[\"null\",\"string\"],\"doc\":\"Associated role\"},{\"name\":\"agent\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Publisher\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Publisher information\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique identifier for the publisher\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LocalizedStrings\",\"doc\":\"Multilingual texts\",\"fields\":[{\"name\":\"no\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian'\"},{\"name\":\"nb\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian bokm√•l'\"},{\"name\":\"nn\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian nynorsk'\"},{\"name\":\"en\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in english'\"}]}],\"doc\":\"Multilingual name of the publisher\"},{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI of the publisher\"}]}],\"doc\":\"Associated agent\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<QualifiedAttribution> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<QualifiedAttribution> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<QualifiedAttribution> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<QualifiedAttribution> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<QualifiedAttribution> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this QualifiedAttribution to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a QualifiedAttribution from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a QualifiedAttribution instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static QualifiedAttribution fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Associated role */
  private java.lang.CharSequence role;
  /** Associated agent */
  private no.digdir.fdk.model.Publisher agent;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public QualifiedAttribution() {}

  /**
   * All-args constructor.
   * @param role Associated role
   * @param agent Associated agent
   */
  public QualifiedAttribution(java.lang.CharSequence role, no.digdir.fdk.model.Publisher agent) {
    this.role = role;
    this.agent = agent;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return role;
    case 1: return agent;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: role = (java.lang.CharSequence)value$; break;
    case 1: agent = (no.digdir.fdk.model.Publisher)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'role' field.
   * @return Associated role
   */
  public java.lang.CharSequence getRole() {
    return role;
  }


  /**
   * Sets the value of the 'role' field.
   * Associated role
   * @param value the value to set.
   */
  public void setRole(java.lang.CharSequence value) {
    this.role = value;
  }

  /**
   * Gets the value of the 'agent' field.
   * @return Associated agent
   */
  public no.digdir.fdk.model.Publisher getAgent() {
    return agent;
  }


  /**
   * Sets the value of the 'agent' field.
   * Associated agent
   * @param value the value to set.
   */
  public void setAgent(no.digdir.fdk.model.Publisher value) {
    this.agent = value;
  }

  /**
   * Creates a new QualifiedAttribution RecordBuilder.
   * @return A new QualifiedAttribution RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.QualifiedAttribution.Builder newBuilder() {
    return new no.digdir.fdk.model.dataset.QualifiedAttribution.Builder();
  }

  /**
   * Creates a new QualifiedAttribution RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new QualifiedAttribution RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.QualifiedAttribution.Builder newBuilder(no.digdir.fdk.model.dataset.QualifiedAttribution.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.QualifiedAttribution.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.QualifiedAttribution.Builder(other);
    }
  }

  /**
   * Creates a new QualifiedAttribution RecordBuilder by copying an existing QualifiedAttribution instance.
   * @param other The existing instance to copy.
   * @return A new QualifiedAttribution RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.QualifiedAttribution.Builder newBuilder(no.digdir.fdk.model.dataset.QualifiedAttribution other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.QualifiedAttribution.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.QualifiedAttribution.Builder(other);
    }
  }

  /**
   * RecordBuilder for QualifiedAttribution instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<QualifiedAttribution>
    implements org.apache.avro.data.RecordBuilder<QualifiedAttribution> {

    /** Associated role */
    private java.lang.CharSequence role;
    /** Associated agent */
    private no.digdir.fdk.model.Publisher agent;
    private no.digdir.fdk.model.Publisher.Builder agentBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.QualifiedAttribution.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.role)) {
        this.role = data().deepCopy(fields()[0].schema(), other.role);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.agent)) {
        this.agent = data().deepCopy(fields()[1].schema(), other.agent);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasAgentBuilder()) {
        this.agentBuilder = no.digdir.fdk.model.Publisher.newBuilder(other.getAgentBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing QualifiedAttribution instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.QualifiedAttribution other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.role)) {
        this.role = data().deepCopy(fields()[0].schema(), other.role);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.agent)) {
        this.agent = data().deepCopy(fields()[1].schema(), other.agent);
        fieldSetFlags()[1] = true;
      }
      this.agentBuilder = null;
    }

    /**
      * Gets the value of the 'role' field.
      * Associated role
      * @return The value.
      */
    public java.lang.CharSequence getRole() {
      return role;
    }


    /**
      * Sets the value of the 'role' field.
      * Associated role
      * @param value The value of 'role'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.QualifiedAttribution.Builder setRole(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.role = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'role' field has been set.
      * Associated role
      * @return True if the 'role' field has been set, false otherwise.
      */
    public boolean hasRole() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'role' field.
      * Associated role
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.QualifiedAttribution.Builder clearRole() {
      role = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'agent' field.
      * Associated agent
      * @return The value.
      */
    public no.digdir.fdk.model.Publisher getAgent() {
      return agent;
    }


    /**
      * Sets the value of the 'agent' field.
      * Associated agent
      * @param value The value of 'agent'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.QualifiedAttribution.Builder setAgent(no.digdir.fdk.model.Publisher value) {
      validate(fields()[1], value);
      this.agentBuilder = null;
      this.agent = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'agent' field has been set.
      * Associated agent
      * @return True if the 'agent' field has been set, false otherwise.
      */
    public boolean hasAgent() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'agent' field and creates one if it doesn't exist yet.
     * Associated agent
     * @return This builder.
     */
    public no.digdir.fdk.model.Publisher.Builder getAgentBuilder() {
      if (agentBuilder == null) {
        if (hasAgent()) {
          setAgentBuilder(no.digdir.fdk.model.Publisher.newBuilder(agent));
        } else {
          setAgentBuilder(no.digdir.fdk.model.Publisher.newBuilder());
        }
      }
      return agentBuilder;
    }

    /**
     * Sets the Builder instance for the 'agent' field
     * Associated agent
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.QualifiedAttribution.Builder setAgentBuilder(no.digdir.fdk.model.Publisher.Builder value) {
      clearAgent();
      agentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'agent' field has an active Builder instance
     * Associated agent
     * @return True if the 'agent' field has an active Builder instance
     */
    public boolean hasAgentBuilder() {
      return agentBuilder != null;
    }

    /**
      * Clears the value of the 'agent' field.
      * Associated agent
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.QualifiedAttribution.Builder clearAgent() {
      agent = null;
      agentBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public QualifiedAttribution build() {
      try {
        QualifiedAttribution record = new QualifiedAttribution();
        record.role = fieldSetFlags()[0] ? this.role : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (agentBuilder != null) {
          try {
            record.agent = this.agentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("agent"));
            throw e;
          }
        } else {
          record.agent = fieldSetFlags()[1] ? this.agent : (no.digdir.fdk.model.Publisher) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<QualifiedAttribution>
    WRITER$ = (org.apache.avro.io.DatumWriter<QualifiedAttribution>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<QualifiedAttribution>
    READER$ = (org.apache.avro.io.DatumReader<QualifiedAttribution>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.role == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.role);
    }

    if (this.agent == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.agent.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.role = null;
      } else {
        this.role = in.readString(this.role instanceof Utf8 ? (Utf8)this.role : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.agent = null;
      } else {
        if (this.agent == null) {
          this.agent = new no.digdir.fdk.model.Publisher();
        }
        this.agent.customDecode(in);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.role = null;
          } else {
            this.role = in.readString(this.role instanceof Utf8 ? (Utf8)this.role : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.agent = null;
          } else {
            if (this.agent == null) {
              this.agent = new no.digdir.fdk.model.Publisher();
            }
            this.agent.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










