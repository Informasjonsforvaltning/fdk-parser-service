/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model.dataset;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Reference information */
@org.apache.avro.specific.AvroGenerated
public class Reference extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3993804592896729279L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Reference\",\"namespace\":\"no.digdir.fdk.model.dataset\",\"doc\":\"Reference information\",\"fields\":[{\"name\":\"referenceType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ReferenceDataCode\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Information supplied by fdk-reference-data\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the code\"},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"doc\":\"Code value\"},{\"name\":\"prefLabel\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LocalizedStrings\",\"doc\":\"Multilingual texts\",\"fields\":[{\"name\":\"no\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian'\"},{\"name\":\"nb\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian bokm√•l'\"},{\"name\":\"nn\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian nynorsk'\"},{\"name\":\"en\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in english'\"}]}],\"doc\":\"Multilingual label of the code\"}]}],\"doc\":\"Type of reference\"},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"UriWithLabel\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"URI and associated preferred label\",\"fields\":[{\"name\":\"uri\",\"type\":[\"string\",\"null\"]},{\"name\":\"prefLabel\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual label\"}]}],\"doc\":\"Referenced resource\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Reference> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Reference> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Reference> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Reference> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Reference> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Reference to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Reference from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Reference instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Reference fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of reference */
  private no.digdir.fdk.model.ReferenceDataCode referenceType;
  /** Referenced resource */
  private no.digdir.fdk.model.UriWithLabel source;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Reference() {}

  /**
   * All-args constructor.
   * @param referenceType Type of reference
   * @param source Referenced resource
   */
  public Reference(no.digdir.fdk.model.ReferenceDataCode referenceType, no.digdir.fdk.model.UriWithLabel source) {
    this.referenceType = referenceType;
    this.source = source;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return referenceType;
    case 1: return source;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: referenceType = (no.digdir.fdk.model.ReferenceDataCode)value$; break;
    case 1: source = (no.digdir.fdk.model.UriWithLabel)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'referenceType' field.
   * @return Type of reference
   */
  public no.digdir.fdk.model.ReferenceDataCode getReferenceType() {
    return referenceType;
  }


  /**
   * Sets the value of the 'referenceType' field.
   * Type of reference
   * @param value the value to set.
   */
  public void setReferenceType(no.digdir.fdk.model.ReferenceDataCode value) {
    this.referenceType = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return Referenced resource
   */
  public no.digdir.fdk.model.UriWithLabel getSource() {
    return source;
  }


  /**
   * Sets the value of the 'source' field.
   * Referenced resource
   * @param value the value to set.
   */
  public void setSource(no.digdir.fdk.model.UriWithLabel value) {
    this.source = value;
  }

  /**
   * Creates a new Reference RecordBuilder.
   * @return A new Reference RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Reference.Builder newBuilder() {
    return new no.digdir.fdk.model.dataset.Reference.Builder();
  }

  /**
   * Creates a new Reference RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Reference RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Reference.Builder newBuilder(no.digdir.fdk.model.dataset.Reference.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.Reference.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.Reference.Builder(other);
    }
  }

  /**
   * Creates a new Reference RecordBuilder by copying an existing Reference instance.
   * @param other The existing instance to copy.
   * @return A new Reference RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Reference.Builder newBuilder(no.digdir.fdk.model.dataset.Reference other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.Reference.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.Reference.Builder(other);
    }
  }

  /**
   * RecordBuilder for Reference instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Reference>
    implements org.apache.avro.data.RecordBuilder<Reference> {

    /** Type of reference */
    private no.digdir.fdk.model.ReferenceDataCode referenceType;
    private no.digdir.fdk.model.ReferenceDataCode.Builder referenceTypeBuilder;
    /** Referenced resource */
    private no.digdir.fdk.model.UriWithLabel source;
    private no.digdir.fdk.model.UriWithLabel.Builder sourceBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.Reference.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.referenceType)) {
        this.referenceType = data().deepCopy(fields()[0].schema(), other.referenceType);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasReferenceTypeBuilder()) {
        this.referenceTypeBuilder = no.digdir.fdk.model.ReferenceDataCode.newBuilder(other.getReferenceTypeBuilder());
      }
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasSourceBuilder()) {
        this.sourceBuilder = no.digdir.fdk.model.UriWithLabel.newBuilder(other.getSourceBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Reference instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.Reference other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.referenceType)) {
        this.referenceType = data().deepCopy(fields()[0].schema(), other.referenceType);
        fieldSetFlags()[0] = true;
      }
      this.referenceTypeBuilder = null;
      if (isValidValue(fields()[1], other.source)) {
        this.source = data().deepCopy(fields()[1].schema(), other.source);
        fieldSetFlags()[1] = true;
      }
      this.sourceBuilder = null;
    }

    /**
      * Gets the value of the 'referenceType' field.
      * Type of reference
      * @return The value.
      */
    public no.digdir.fdk.model.ReferenceDataCode getReferenceType() {
      return referenceType;
    }


    /**
      * Sets the value of the 'referenceType' field.
      * Type of reference
      * @param value The value of 'referenceType'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Reference.Builder setReferenceType(no.digdir.fdk.model.ReferenceDataCode value) {
      validate(fields()[0], value);
      this.referenceTypeBuilder = null;
      this.referenceType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'referenceType' field has been set.
      * Type of reference
      * @return True if the 'referenceType' field has been set, false otherwise.
      */
    public boolean hasReferenceType() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'referenceType' field and creates one if it doesn't exist yet.
     * Type of reference
     * @return This builder.
     */
    public no.digdir.fdk.model.ReferenceDataCode.Builder getReferenceTypeBuilder() {
      if (referenceTypeBuilder == null) {
        if (hasReferenceType()) {
          setReferenceTypeBuilder(no.digdir.fdk.model.ReferenceDataCode.newBuilder(referenceType));
        } else {
          setReferenceTypeBuilder(no.digdir.fdk.model.ReferenceDataCode.newBuilder());
        }
      }
      return referenceTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'referenceType' field
     * Type of reference
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Reference.Builder setReferenceTypeBuilder(no.digdir.fdk.model.ReferenceDataCode.Builder value) {
      clearReferenceType();
      referenceTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'referenceType' field has an active Builder instance
     * Type of reference
     * @return True if the 'referenceType' field has an active Builder instance
     */
    public boolean hasReferenceTypeBuilder() {
      return referenceTypeBuilder != null;
    }

    /**
      * Clears the value of the 'referenceType' field.
      * Type of reference
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Reference.Builder clearReferenceType() {
      referenceType = null;
      referenceTypeBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * Referenced resource
      * @return The value.
      */
    public no.digdir.fdk.model.UriWithLabel getSource() {
      return source;
    }


    /**
      * Sets the value of the 'source' field.
      * Referenced resource
      * @param value The value of 'source'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Reference.Builder setSource(no.digdir.fdk.model.UriWithLabel value) {
      validate(fields()[1], value);
      this.sourceBuilder = null;
      this.source = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * Referenced resource
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'source' field and creates one if it doesn't exist yet.
     * Referenced resource
     * @return This builder.
     */
    public no.digdir.fdk.model.UriWithLabel.Builder getSourceBuilder() {
      if (sourceBuilder == null) {
        if (hasSource()) {
          setSourceBuilder(no.digdir.fdk.model.UriWithLabel.newBuilder(source));
        } else {
          setSourceBuilder(no.digdir.fdk.model.UriWithLabel.newBuilder());
        }
      }
      return sourceBuilder;
    }

    /**
     * Sets the Builder instance for the 'source' field
     * Referenced resource
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Reference.Builder setSourceBuilder(no.digdir.fdk.model.UriWithLabel.Builder value) {
      clearSource();
      sourceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'source' field has an active Builder instance
     * Referenced resource
     * @return True if the 'source' field has an active Builder instance
     */
    public boolean hasSourceBuilder() {
      return sourceBuilder != null;
    }

    /**
      * Clears the value of the 'source' field.
      * Referenced resource
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Reference.Builder clearSource() {
      source = null;
      sourceBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Reference build() {
      try {
        Reference record = new Reference();
        if (referenceTypeBuilder != null) {
          try {
            record.referenceType = this.referenceTypeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("referenceType"));
            throw e;
          }
        } else {
          record.referenceType = fieldSetFlags()[0] ? this.referenceType : (no.digdir.fdk.model.ReferenceDataCode) defaultValue(fields()[0]);
        }
        if (sourceBuilder != null) {
          try {
            record.source = this.sourceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("source"));
            throw e;
          }
        } else {
          record.source = fieldSetFlags()[1] ? this.source : (no.digdir.fdk.model.UriWithLabel) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Reference>
    WRITER$ = (org.apache.avro.io.DatumWriter<Reference>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Reference>
    READER$ = (org.apache.avro.io.DatumReader<Reference>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.referenceType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.referenceType.customEncode(out);
    }

    if (this.source == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.source.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.referenceType = null;
      } else {
        if (this.referenceType == null) {
          this.referenceType = new no.digdir.fdk.model.ReferenceDataCode();
        }
        this.referenceType.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.source = null;
      } else {
        if (this.source == null) {
          this.source = new no.digdir.fdk.model.UriWithLabel();
        }
        this.source.customDecode(in);
      }

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.referenceType = null;
          } else {
            if (this.referenceType == null) {
              this.referenceType = new no.digdir.fdk.model.ReferenceDataCode();
            }
            this.referenceType.customDecode(in);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.source = null;
          } else {
            if (this.source == null) {
              this.source = new no.digdir.fdk.model.UriWithLabel();
            }
            this.source.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










