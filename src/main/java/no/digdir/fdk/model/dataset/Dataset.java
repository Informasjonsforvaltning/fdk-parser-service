/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model.dataset;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Internal Data.norge.no model for datasets */
@org.apache.avro.specific.AvroGenerated
public class Dataset extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8783758552341545165L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Dataset\",\"namespace\":\"no.digdir.fdk.model.dataset\",\"doc\":\"Internal Data.norge.no model for datasets\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"doc\":\"Unique FDK identifier for the dataset\"},{\"name\":\"uri\",\"type\":\"string\",\"doc\":\"Subject URI for the dataset in the harvested source\"},{\"name\":\"identifier\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"List of dataset identifiers from dct:identifier\"},{\"name\":\"admsIdentifier\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"List of dataset identifiers from adms:identifier\"},{\"name\":\"harvest\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"HarvestMetaData\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Meta data from the harvest of the resource to FDK\",\"fields\":[{\"name\":\"firstHarvested\",\"type\":[\"null\",\"string\"],\"doc\":\"Date when the resource was first harvested to FDK, format: 'YYYY-MM-DDTHH:mm:ssZ'\"},{\"name\":\"modified\",\"type\":[\"null\",\"string\"],\"doc\":\"Date when the harvest process last found changes to the resource, format: 'YYYY-MM-DDTHH:mm:ssZ'\"}]}],\"doc\":\"Meta data about the harvest of the dataset to FDK\"},{\"name\":\"catalog\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Catalog\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Information about the catalog a resource is a member of\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique FDK identifier for the catalog\"},{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the catalog\"},{\"name\":\"publisher\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Publisher\",\"doc\":\"Publisher information\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"doc\":\"Unique identifier for the publisher\"},{\"name\":\"name\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LocalizedStrings\",\"doc\":\"Multilingual texts\",\"fields\":[{\"name\":\"no\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian'\"},{\"name\":\"nb\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian bokm√•l'\"},{\"name\":\"nn\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian nynorsk'\"},{\"name\":\"en\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in english'\"}]}],\"doc\":\"Multilingual name of the publisher\"},{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI of the publisher\"}]}],\"doc\":\"Publisher of the catalog\"},{\"name\":\"title\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual title of the catalog\"},{\"name\":\"description\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual description of the catalog\"}]}],\"doc\":\"Information about the catalog the dataset is contained in\"},{\"name\":\"title\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual title of the dataset\"},{\"name\":\"description\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual description of the dataset, where harvested formatting has been removed\"},{\"name\":\"descriptionFormatted\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual description of the dataset, where harvested formatting is intact\"},{\"name\":\"publisher\",\"type\":[\"null\",\"no.digdir.fdk.model.Publisher\"],\"doc\":\"Publisher information\"},{\"name\":\"distribution\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Distribution\",\"doc\":\"Distribution information\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the distribution\"},{\"name\":\"title\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual title of the distribution\"},{\"name\":\"description\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual description of the distribution\"},{\"name\":\"accessURL\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"URL for accessing the distribution\"},{\"name\":\"downloadURL\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"URL for downloading the distribution\"},{\"name\":\"license\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UriWithLabelAndType\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"URI with associated label and type\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"]},{\"name\":\"extraType\",\"type\":[\"null\",\"string\"],\"doc\":\"Associated type\"},{\"name\":\"prefLabel\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual label\"}]}}],\"doc\":\"Licences under which the distribution is made available\"},{\"name\":\"conformsTo\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UriWithLabel\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"URI and associated preferred label\",\"fields\":[{\"name\":\"uri\",\"type\":[\"string\",\"null\"]},{\"name\":\"prefLabel\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual label\"}]}}],\"doc\":\"Established schemas to which the described distribution conforms\"},{\"name\":\"page\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.UriWithLabelAndType\"}],\"doc\":\"Page or documents about this distribution\"},{\"name\":\"fdkFormat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Format\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Information about format or media type\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the format\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the format\"},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"doc\":\"Code for the format\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FormatType\",\"symbols\":[\"UNKNOWN\",\"MEDIA_TYPE\",\"FILE_TYPE\"],\"default\":\"UNKNOWN\"},\"doc\":\"Type of the format\"}]}}],\"doc\":\"Formats or media types of the distribution\"},{\"name\":\"compressFormat\",\"type\":[\"null\",\"no.digdir.fdk.model.Format\"],\"doc\":\"Compress format of the distribution\"},{\"name\":\"packageFormat\",\"type\":[\"null\",\"no.digdir.fdk.model.Format\"],\"doc\":\"Package format of the distribution\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type of the distribution\"},{\"name\":\"accessService\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AccessService\",\"doc\":\"Information about a distribution access service\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the access service\"},{\"name\":\"title\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual title of the access service\"},{\"name\":\"description\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual description of the access service\"},{\"name\":\"endpointDescription\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.UriWithLabelAndType\"}],\"doc\":\"Description of the services available via the end-points\"}]}}],\"doc\":\"Access services of the distribution\"}]}}],\"doc\":\"List of distributions for the dataset\"},{\"name\":\"sample\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Distribution\"}],\"doc\":\"List of sample distributions for the dataset\"},{\"name\":\"themeUris\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"List of theme URIs for the dataset\"},{\"name\":\"theme\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EuDataTheme\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"EU data theme information\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the theme\"},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"doc\":\"Code value for the theme\"},{\"name\":\"title\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual title of the theme\"}]}}],\"doc\":\"List of EU data themes for the dataset\"},{\"name\":\"losTheme\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LosNode\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"LOS theme information\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI of the theme\"},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"doc\":\"Code value for the theme\"},{\"name\":\"isTema\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Is LOS theme or LOS word\"},{\"name\":\"losPaths\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"LOS hierarchy paths for the theme\"},{\"name\":\"name\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual name of the theme\"}]}}],\"doc\":\"List of LOS themes for the dataset\"},{\"name\":\"eurovocThemes\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Eurovoc\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"EUROVOC theme information\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI of the EUROVOC theme\"},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"doc\":\"Code value for the theme\"},{\"name\":\"eurovocPaths\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"EUROVOC hierarchy paths for the theme\"},{\"name\":\"label\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual label ","of the theme\"}]}}],\"doc\":\"List of EUROVOC themes for the dataset\"},{\"name\":\"keyword\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.LocalizedStrings\"}],\"doc\":\"List of keywords for the dataset\"},{\"name\":\"issued\",\"type\":[\"null\",\"string\"],\"doc\":\"Date when the dataset was issued, format: 'YYYY-MM-DD'\"},{\"name\":\"modified\",\"type\":[\"null\",\"string\"],\"doc\":\"Date when the dataset was last modified, format: 'YYYY-MM-DD'\"},{\"name\":\"dctType\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"ReferenceDataCode\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Information supplied by fdk-reference-data\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the code\"},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"doc\":\"Code value\"},{\"name\":\"prefLabel\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual label of the code\"}]}],\"doc\":\"Type of dataset\"},{\"name\":\"accessRights\",\"type\":[\"null\",\"no.digdir.fdk.model.ReferenceDataCode\"],\"doc\":\"Access rights for the dataset\"},{\"name\":\"language\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.ReferenceDataCode\"}],\"doc\":\"Languages the dataset is available in\"},{\"name\":\"page\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"Pages or documents that describes the dataset\"},{\"name\":\"landingPage\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"List of landing pages for the dataset\"},{\"name\":\"temporal\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Temporal\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Information about a temporal period\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"Associated URI\"},{\"name\":\"startDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Start date of the period, format: 'YYYY-MM-DD'\"},{\"name\":\"endDate\",\"type\":[\"null\",\"string\"],\"doc\":\"End date of the period, format: 'YYYY-MM-DD'\"}]}}],\"doc\":\"Publisher information\"},{\"name\":\"subject\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Subject\",\"doc\":\"Dataset subject information\",\"fields\":[{\"name\":\"identifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier for the subject\"},{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the subject\"},{\"name\":\"prefLabel\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual label of the subject\"},{\"name\":\"definition\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual definition of the subject\"}]}}],\"doc\":\"Dataset subject information\"},{\"name\":\"spatial\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.ReferenceDataCode\"}],\"doc\":\"Dataset spatial information\"},{\"name\":\"provenance\",\"type\":[\"null\",\"no.digdir.fdk.model.ReferenceDataCode\"],\"doc\":\"Provenance for the dataset\"},{\"name\":\"accrualPeriodicity\",\"type\":[\"null\",\"no.digdir.fdk.model.ReferenceDataCode\"],\"doc\":\"Frequency of updates for the dataset\"},{\"name\":\"legalBasisForRestriction\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.UriWithLabelAndType\"}],\"doc\":\"Restriction rules for the dataset\"},{\"name\":\"legalBasisForProcessing\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.UriWithLabelAndType\"}],\"doc\":\"Processing rules for the dataset\"},{\"name\":\"legalBasisForAccess\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.UriWithLabelAndType\"}],\"doc\":\"Access rules for the dataset\"},{\"name\":\"conformsTo\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.UriWithLabel\"}],\"doc\":\"Established schemas to which the dataset conforms\"},{\"name\":\"informationModel\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.UriWithLabelAndType\"}],\"doc\":\"Information models to which the dataset conforms\"},{\"name\":\"hasAccuracyAnnotation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"QualityAnnotation\",\"doc\":\"Quality annotation for a dataset\",\"fields\":[{\"name\":\"inDimension\",\"type\":[\"null\",\"string\"],\"doc\":\"Dimension the annotation is in\"},{\"name\":\"hasBody\",\"type\":[\"null\",\"no.digdir.fdk.model.Publisher\"],\"doc\":\"Multilingual text body of the annotation\"}]}],\"doc\":\"Quality annotation about dataset accuracy\"},{\"name\":\"hasCompletenessAnnotation\",\"type\":[\"null\",\"QualityAnnotation\"],\"doc\":\"Quality annotation about dataset completeness\"},{\"name\":\"hasCurrentnessAnnotation\",\"type\":[\"null\",\"QualityAnnotation\"],\"doc\":\"Quality annotation about dataset currentness\"},{\"name\":\"hasAvailabilityAnnotation\",\"type\":[\"null\",\"QualityAnnotation\"],\"doc\":\"Quality annotation about dataset availability\"},{\"name\":\"hasRelevanceAnnotation\",\"type\":[\"null\",\"QualityAnnotation\"],\"doc\":\"Quality annotation about dataset relevance\"},{\"name\":\"qualifiedAttributions\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"QualifiedAttribution\",\"doc\":\"Qualified attribution for a dataset\",\"fields\":[{\"name\":\"role\",\"type\":[\"null\",\"string\"],\"doc\":\"Associated role\"},{\"name\":\"agent\",\"type\":[\"null\",\"no.digdir.fdk.model.Publisher\"],\"doc\":\"Associated agent\"}]}}],\"doc\":\"Qualified attributions of the dataset\"},{\"name\":\"isOpenData\",\"type\":\"boolean\",\"doc\":\"Dataset is open data\"},{\"name\":\"isAuthoritative\",\"type\":\"boolean\",\"doc\":\"Dataset is authoritative\"},{\"name\":\"isRelatedToTransportportal\",\"type\":\"boolean\",\"doc\":\"Dataset is related to Transportportal\"},{\"name\":\"inSeries\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"InSeries\",\"doc\":\"Information about dataset series\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"doc\":\"Id for the series\"},{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the series\"},{\"name\":\"title\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual title of the series\"}]}],\"doc\":\"Information about series, only relevant if dataset is in a series\"},{\"name\":\"prev\",\"type\":[\"null\",\"string\"],\"doc\":\"Previous dataset, only relevant if dataset is in a series\"},{\"name\":\"last\",\"type\":[\"null\",\"string\"],\"doc\":\"Last dataset in series, only relevant when specializedType is datasetSeries\"},{\"name\":\"datasetsInSeries\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"All datasets in the series, only relevant when specializedType is datasetSeries\"},{\"name\":\"type\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"ResourceType\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Types for resources in FDK\",\"symbols\":[\"datasets\"]}],\"doc\":\"Resource type\"},{\"name\":\"specializedType\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"DatasetType\",\"symbols\":[\"datasetSeries\"]}],\"doc\":\"Specialized dataset type\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Dataset> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Dataset> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Dataset> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Dataset> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Dataset> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Dataset to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Dataset from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Dataset instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Dataset fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique FDK identifier for the dataset */
  private java.lang.CharSequence id;
  /** Subject URI for the dataset in the harvested source */
  private java.lang.CharSequence uri;
  /** List of dataset identifiers from dct:identifier */
  private java.util.List<java.lang.CharSequence> identifier;
  /** List of dataset identifiers from adms:identifier */
  private java.util.List<java.lang.CharSequence> admsIdentifier;
  /** Meta data about the harvest of the dataset to FDK */
  private no.digdir.fdk.model.HarvestMetaData harvest;
  /** Information about the catalog the dataset is contained in */
  private no.digdir.fdk.model.Catalog catalog;
  /** Multilingual title of the dataset */
  private no.digdir.fdk.model.LocalizedStrings title;
  /** Multilingual description of the dataset, where harvested formatting has been removed */
  private no.digdir.fdk.model.LocalizedStrings description;
  /** Multilingual description of the dataset, where harvested formatting is intact */
  private no.digdir.fdk.model.LocalizedStrings descriptionFormatted;
  /** Publisher information */
  private no.digdir.fdk.model.Publisher publisher;
  /** List of distributions for the dataset */
  private java.util.List<no.digdir.fdk.model.dataset.Distribution> distribution;
  /** List of sample distributions for the dataset */
  private java.util.List<no.digdir.fdk.model.dataset.Distribution> sample;
  /** List of theme URIs for the dataset */
  private java.util.List<java.lang.CharSequence> themeUris;
  /** List of EU data themes for the dataset */
  private java.util.List<no.digdir.fdk.model.EuDataTheme> theme;
  /** List of LOS themes for the dataset */
  private java.util.List<no.digdir.fdk.model.LosNode> losTheme;
  /** List of EUROVOC themes for the dataset */
  private java.util.List<no.digdir.fdk.model.Eurovoc> eurovocThemes;
  /** List of keywords for the dataset */
  private java.util.List<no.digdir.fdk.model.LocalizedStrings> keyword;
  /** Date when the dataset was issued, format: 'YYYY-MM-DD' */
  private java.lang.CharSequence issued;
  /** Date when the dataset was last modified, format: 'YYYY-MM-DD' */
  private java.lang.CharSequence modified;
  /** Type of dataset */
  private no.digdir.fdk.model.ReferenceDataCode dctType;
  /** Access rights for the dataset */
  private no.digdir.fdk.model.ReferenceDataCode accessRights;
  /** Languages the dataset is available in */
  private java.util.List<no.digdir.fdk.model.ReferenceDataCode> language;
  /** Pages or documents that describes the dataset */
  private java.util.List<java.lang.CharSequence> page;
  /** List of landing pages for the dataset */
  private java.util.List<java.lang.CharSequence> landingPage;
  /** Publisher information */
  private java.util.List<no.digdir.fdk.model.Temporal> temporal;
  /** Dataset subject information */
  private java.util.List<no.digdir.fdk.model.dataset.Subject> subject;
  /** Dataset spatial information */
  private java.util.List<no.digdir.fdk.model.ReferenceDataCode> spatial;
  /** Provenance for the dataset */
  private no.digdir.fdk.model.ReferenceDataCode provenance;
  /** Frequency of updates for the dataset */
  private no.digdir.fdk.model.ReferenceDataCode accrualPeriodicity;
  /** Restriction rules for the dataset */
  private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> legalBasisForRestriction;
  /** Processing rules for the dataset */
  private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> legalBasisForProcessing;
  /** Access rules for the dataset */
  private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> legalBasisForAccess;
  /** Established schemas to which the dataset conforms */
  private java.util.List<no.digdir.fdk.model.UriWithLabel> conformsTo;
  /** Information models to which the dataset conforms */
  private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> informationModel;
  /** Quality annotation about dataset accuracy */
  private no.digdir.fdk.model.dataset.QualityAnnotation hasAccuracyAnnotation;
  /** Quality annotation about dataset completeness */
  private no.digdir.fdk.model.dataset.QualityAnnotation hasCompletenessAnnotation;
  /** Quality annotation about dataset currentness */
  private no.digdir.fdk.model.dataset.QualityAnnotation hasCurrentnessAnnotation;
  /** Quality annotation about dataset availability */
  private no.digdir.fdk.model.dataset.QualityAnnotation hasAvailabilityAnnotation;
  /** Quality annotation about dataset relevance */
  private no.digdir.fdk.model.dataset.QualityAnnotation hasRelevanceAnnotation;
  /** Qualified attributions of the dataset */
  private java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution> qualifiedAttributions;
  /** Dataset is open data */
  private boolean isOpenData;
  /** Dataset is authoritative */
  private boolean isAuthoritative;
  /** Dataset is related to Transportportal */
  private boolean isRelatedToTransportportal;
  /** Information about series, only relevant if dataset is in a series */
  private no.digdir.fdk.model.dataset.InSeries inSeries;
  /** Previous dataset, only relevant if dataset is in a series */
  private java.lang.CharSequence prev;
  /** Last dataset in series, only relevant when specializedType is datasetSeries */
  private java.lang.CharSequence last;
  /** All datasets in the series, only relevant when specializedType is datasetSeries */
  private java.util.List<java.lang.CharSequence> datasetsInSeries;
  /** Resource type */
  private no.digdir.fdk.model.ResourceType type;
  /** Specialized dataset type */
  private no.digdir.fdk.model.dataset.DatasetType specializedType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Dataset() {}

  /**
   * All-args constructor.
   * @param id Unique FDK identifier for the dataset
   * @param uri Subject URI for the dataset in the harvested source
   * @param identifier List of dataset identifiers from dct:identifier
   * @param admsIdentifier List of dataset identifiers from adms:identifier
   * @param harvest Meta data about the harvest of the dataset to FDK
   * @param catalog Information about the catalog the dataset is contained in
   * @param title Multilingual title of the dataset
   * @param description Multilingual description of the dataset, where harvested formatting has been removed
   * @param descriptionFormatted Multilingual description of the dataset, where harvested formatting is intact
   * @param publisher Publisher information
   * @param distribution List of distributions for the dataset
   * @param sample List of sample distributions for the dataset
   * @param themeUris List of theme URIs for the dataset
   * @param theme List of EU data themes for the dataset
   * @param losTheme List of LOS themes for the dataset
   * @param eurovocThemes List of EUROVOC themes for the dataset
   * @param keyword List of keywords for the dataset
   * @param issued Date when the dataset was issued, format: 'YYYY-MM-DD'
   * @param modified Date when the dataset was last modified, format: 'YYYY-MM-DD'
   * @param dctType Type of dataset
   * @param accessRights Access rights for the dataset
   * @param language Languages the dataset is available in
   * @param page Pages or documents that describes the dataset
   * @param landingPage List of landing pages for the dataset
   * @param temporal Publisher information
   * @param subject Dataset subject information
   * @param spatial Dataset spatial information
   * @param provenance Provenance for the dataset
   * @param accrualPeriodicity Frequency of updates for the dataset
   * @param legalBasisForRestriction Restriction rules for the dataset
   * @param legalBasisForProcessing Processing rules for the dataset
   * @param legalBasisForAccess Access rules for the dataset
   * @param conformsTo Established schemas to which the dataset conforms
   * @param informationModel Information models to which the dataset conforms
   * @param hasAccuracyAnnotation Quality annotation about dataset accuracy
   * @param hasCompletenessAnnotation Quality annotation about dataset completeness
   * @param hasCurrentnessAnnotation Quality annotation about dataset currentness
   * @param hasAvailabilityAnnotation Quality annotation about dataset availability
   * @param hasRelevanceAnnotation Quality annotation about dataset relevance
   * @param qualifiedAttributions Qualified attributions of the dataset
   * @param isOpenData Dataset is open data
   * @param isAuthoritative Dataset is authoritative
   * @param isRelatedToTransportportal Dataset is related to Transportportal
   * @param inSeries Information about series, only relevant if dataset is in a series
   * @param prev Previous dataset, only relevant if dataset is in a series
   * @param last Last dataset in series, only relevant when specializedType is datasetSeries
   * @param datasetsInSeries All datasets in the series, only relevant when specializedType is datasetSeries
   * @param type Resource type
   * @param specializedType Specialized dataset type
   */
  public Dataset(java.lang.CharSequence id, java.lang.CharSequence uri, java.util.List<java.lang.CharSequence> identifier, java.util.List<java.lang.CharSequence> admsIdentifier, no.digdir.fdk.model.HarvestMetaData harvest, no.digdir.fdk.model.Catalog catalog, no.digdir.fdk.model.LocalizedStrings title, no.digdir.fdk.model.LocalizedStrings description, no.digdir.fdk.model.LocalizedStrings descriptionFormatted, no.digdir.fdk.model.Publisher publisher, java.util.List<no.digdir.fdk.model.dataset.Distribution> distribution, java.util.List<no.digdir.fdk.model.dataset.Distribution> sample, java.util.List<java.lang.CharSequence> themeUris, java.util.List<no.digdir.fdk.model.EuDataTheme> theme, java.util.List<no.digdir.fdk.model.LosNode> losTheme, java.util.List<no.digdir.fdk.model.Eurovoc> eurovocThemes, java.util.List<no.digdir.fdk.model.LocalizedStrings> keyword, java.lang.CharSequence issued, java.lang.CharSequence modified, no.digdir.fdk.model.ReferenceDataCode dctType, no.digdir.fdk.model.ReferenceDataCode accessRights, java.util.List<no.digdir.fdk.model.ReferenceDataCode> language, java.util.List<java.lang.CharSequence> page, java.util.List<java.lang.CharSequence> landingPage, java.util.List<no.digdir.fdk.model.Temporal> temporal, java.util.List<no.digdir.fdk.model.dataset.Subject> subject, java.util.List<no.digdir.fdk.model.ReferenceDataCode> spatial, no.digdir.fdk.model.ReferenceDataCode provenance, no.digdir.fdk.model.ReferenceDataCode accrualPeriodicity, java.util.List<no.digdir.fdk.model.UriWithLabelAndType> legalBasisForRestriction, java.util.List<no.digdir.fdk.model.UriWithLabelAndType> legalBasisForProcessing, java.util.List<no.digdir.fdk.model.UriWithLabelAndType> legalBasisForAccess, java.util.List<no.digdir.fdk.model.UriWithLabel> conformsTo, java.util.List<no.digdir.fdk.model.UriWithLabelAndType> informationModel, no.digdir.fdk.model.dataset.QualityAnnotation hasAccuracyAnnotation, no.digdir.fdk.model.dataset.QualityAnnotation hasCompletenessAnnotation, no.digdir.fdk.model.dataset.QualityAnnotation hasCurrentnessAnnotation, no.digdir.fdk.model.dataset.QualityAnnotation hasAvailabilityAnnotation, no.digdir.fdk.model.dataset.QualityAnnotation hasRelevanceAnnotation, java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution> qualifiedAttributions, java.lang.Boolean isOpenData, java.lang.Boolean isAuthoritative, java.lang.Boolean isRelatedToTransportportal, no.digdir.fdk.model.dataset.InSeries inSeries, java.lang.CharSequence prev, java.lang.CharSequence last, java.util.List<java.lang.CharSequence> datasetsInSeries, no.digdir.fdk.model.ResourceType type, no.digdir.fdk.model.dataset.DatasetType specializedType) {
    this.id = id;
    this.uri = uri;
    this.identifier = identifier;
    this.admsIdentifier = admsIdentifier;
    this.harvest = harvest;
    this.catalog = catalog;
    this.title = title;
    this.description = description;
    this.descriptionFormatted = descriptionFormatted;
    this.publisher = publisher;
    this.distribution = distribution;
    this.sample = sample;
    this.themeUris = themeUris;
    this.theme = theme;
    this.losTheme = losTheme;
    this.eurovocThemes = eurovocThemes;
    this.keyword = keyword;
    this.issued = issued;
    this.modified = modified;
    this.dctType = dctType;
    this.accessRights = accessRights;
    this.language = language;
    this.page = page;
    this.landingPage = landingPage;
    this.temporal = temporal;
    this.subject = subject;
    this.spatial = spatial;
    this.provenance = provenance;
    this.accrualPeriodicity = accrualPeriodicity;
    this.legalBasisForRestriction = legalBasisForRestriction;
    this.legalBasisForProcessing = legalBasisForProcessing;
    this.legalBasisForAccess = legalBasisForAccess;
    this.conformsTo = conformsTo;
    this.informationModel = informationModel;
    this.hasAccuracyAnnotation = hasAccuracyAnnotation;
    this.hasCompletenessAnnotation = hasCompletenessAnnotation;
    this.hasCurrentnessAnnotation = hasCurrentnessAnnotation;
    this.hasAvailabilityAnnotation = hasAvailabilityAnnotation;
    this.hasRelevanceAnnotation = hasRelevanceAnnotation;
    this.qualifiedAttributions = qualifiedAttributions;
    this.isOpenData = isOpenData;
    this.isAuthoritative = isAuthoritative;
    this.isRelatedToTransportportal = isRelatedToTransportportal;
    this.inSeries = inSeries;
    this.prev = prev;
    this.last = last;
    this.datasetsInSeries = datasetsInSeries;
    this.type = type;
    this.specializedType = specializedType;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return uri;
    case 2: return identifier;
    case 3: return admsIdentifier;
    case 4: return harvest;
    case 5: return catalog;
    case 6: return title;
    case 7: return description;
    case 8: return descriptionFormatted;
    case 9: return publisher;
    case 10: return distribution;
    case 11: return sample;
    case 12: return themeUris;
    case 13: return theme;
    case 14: return losTheme;
    case 15: return eurovocThemes;
    case 16: return keyword;
    case 17: return issued;
    case 18: return modified;
    case 19: return dctType;
    case 20: return accessRights;
    case 21: return language;
    case 22: return page;
    case 23: return landingPage;
    case 24: return temporal;
    case 25: return subject;
    case 26: return spatial;
    case 27: return provenance;
    case 28: return accrualPeriodicity;
    case 29: return legalBasisForRestriction;
    case 30: return legalBasisForProcessing;
    case 31: return legalBasisForAccess;
    case 32: return conformsTo;
    case 33: return informationModel;
    case 34: return hasAccuracyAnnotation;
    case 35: return hasCompletenessAnnotation;
    case 36: return hasCurrentnessAnnotation;
    case 37: return hasAvailabilityAnnotation;
    case 38: return hasRelevanceAnnotation;
    case 39: return qualifiedAttributions;
    case 40: return isOpenData;
    case 41: return isAuthoritative;
    case 42: return isRelatedToTransportportal;
    case 43: return inSeries;
    case 44: return prev;
    case 45: return last;
    case 46: return datasetsInSeries;
    case 47: return type;
    case 48: return specializedType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: uri = (java.lang.CharSequence)value$; break;
    case 2: identifier = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: admsIdentifier = (java.util.List<java.lang.CharSequence>)value$; break;
    case 4: harvest = (no.digdir.fdk.model.HarvestMetaData)value$; break;
    case 5: catalog = (no.digdir.fdk.model.Catalog)value$; break;
    case 6: title = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    case 7: description = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    case 8: descriptionFormatted = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    case 9: publisher = (no.digdir.fdk.model.Publisher)value$; break;
    case 10: distribution = (java.util.List<no.digdir.fdk.model.dataset.Distribution>)value$; break;
    case 11: sample = (java.util.List<no.digdir.fdk.model.dataset.Distribution>)value$; break;
    case 12: themeUris = (java.util.List<java.lang.CharSequence>)value$; break;
    case 13: theme = (java.util.List<no.digdir.fdk.model.EuDataTheme>)value$; break;
    case 14: losTheme = (java.util.List<no.digdir.fdk.model.LosNode>)value$; break;
    case 15: eurovocThemes = (java.util.List<no.digdir.fdk.model.Eurovoc>)value$; break;
    case 16: keyword = (java.util.List<no.digdir.fdk.model.LocalizedStrings>)value$; break;
    case 17: issued = (java.lang.CharSequence)value$; break;
    case 18: modified = (java.lang.CharSequence)value$; break;
    case 19: dctType = (no.digdir.fdk.model.ReferenceDataCode)value$; break;
    case 20: accessRights = (no.digdir.fdk.model.ReferenceDataCode)value$; break;
    case 21: language = (java.util.List<no.digdir.fdk.model.ReferenceDataCode>)value$; break;
    case 22: page = (java.util.List<java.lang.CharSequence>)value$; break;
    case 23: landingPage = (java.util.List<java.lang.CharSequence>)value$; break;
    case 24: temporal = (java.util.List<no.digdir.fdk.model.Temporal>)value$; break;
    case 25: subject = (java.util.List<no.digdir.fdk.model.dataset.Subject>)value$; break;
    case 26: spatial = (java.util.List<no.digdir.fdk.model.ReferenceDataCode>)value$; break;
    case 27: provenance = (no.digdir.fdk.model.ReferenceDataCode)value$; break;
    case 28: accrualPeriodicity = (no.digdir.fdk.model.ReferenceDataCode)value$; break;
    case 29: legalBasisForRestriction = (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>)value$; break;
    case 30: legalBasisForProcessing = (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>)value$; break;
    case 31: legalBasisForAccess = (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>)value$; break;
    case 32: conformsTo = (java.util.List<no.digdir.fdk.model.UriWithLabel>)value$; break;
    case 33: informationModel = (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>)value$; break;
    case 34: hasAccuracyAnnotation = (no.digdir.fdk.model.dataset.QualityAnnotation)value$; break;
    case 35: hasCompletenessAnnotation = (no.digdir.fdk.model.dataset.QualityAnnotation)value$; break;
    case 36: hasCurrentnessAnnotation = (no.digdir.fdk.model.dataset.QualityAnnotation)value$; break;
    case 37: hasAvailabilityAnnotation = (no.digdir.fdk.model.dataset.QualityAnnotation)value$; break;
    case 38: hasRelevanceAnnotation = (no.digdir.fdk.model.dataset.QualityAnnotation)value$; break;
    case 39: qualifiedAttributions = (java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution>)value$; break;
    case 40: isOpenData = (java.lang.Boolean)value$; break;
    case 41: isAuthoritative = (java.lang.Boolean)value$; break;
    case 42: isRelatedToTransportportal = (java.lang.Boolean)value$; break;
    case 43: inSeries = (no.digdir.fdk.model.dataset.InSeries)value$; break;
    case 44: prev = (java.lang.CharSequence)value$; break;
    case 45: last = (java.lang.CharSequence)value$; break;
    case 46: datasetsInSeries = (java.util.List<java.lang.CharSequence>)value$; break;
    case 47: type = (no.digdir.fdk.model.ResourceType)value$; break;
    case 48: specializedType = (no.digdir.fdk.model.dataset.DatasetType)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Unique FDK identifier for the dataset
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Unique FDK identifier for the dataset
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'uri' field.
   * @return Subject URI for the dataset in the harvested source
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * Subject URI for the dataset in the harvested source
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return List of dataset identifiers from dct:identifier
   */
  public java.util.List<java.lang.CharSequence> getIdentifier() {
    return identifier;
  }


  /**
   * Sets the value of the 'identifier' field.
   * List of dataset identifiers from dct:identifier
   * @param value the value to set.
   */
  public void setIdentifier(java.util.List<java.lang.CharSequence> value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'admsIdentifier' field.
   * @return List of dataset identifiers from adms:identifier
   */
  public java.util.List<java.lang.CharSequence> getAdmsIdentifier() {
    return admsIdentifier;
  }


  /**
   * Sets the value of the 'admsIdentifier' field.
   * List of dataset identifiers from adms:identifier
   * @param value the value to set.
   */
  public void setAdmsIdentifier(java.util.List<java.lang.CharSequence> value) {
    this.admsIdentifier = value;
  }

  /**
   * Gets the value of the 'harvest' field.
   * @return Meta data about the harvest of the dataset to FDK
   */
  public no.digdir.fdk.model.HarvestMetaData getHarvest() {
    return harvest;
  }


  /**
   * Sets the value of the 'harvest' field.
   * Meta data about the harvest of the dataset to FDK
   * @param value the value to set.
   */
  public void setHarvest(no.digdir.fdk.model.HarvestMetaData value) {
    this.harvest = value;
  }

  /**
   * Gets the value of the 'catalog' field.
   * @return Information about the catalog the dataset is contained in
   */
  public no.digdir.fdk.model.Catalog getCatalog() {
    return catalog;
  }


  /**
   * Sets the value of the 'catalog' field.
   * Information about the catalog the dataset is contained in
   * @param value the value to set.
   */
  public void setCatalog(no.digdir.fdk.model.Catalog value) {
    this.catalog = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return Multilingual title of the dataset
   */
  public no.digdir.fdk.model.LocalizedStrings getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * Multilingual title of the dataset
   * @param value the value to set.
   */
  public void setTitle(no.digdir.fdk.model.LocalizedStrings value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Multilingual description of the dataset, where harvested formatting has been removed
   */
  public no.digdir.fdk.model.LocalizedStrings getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * Multilingual description of the dataset, where harvested formatting has been removed
   * @param value the value to set.
   */
  public void setDescription(no.digdir.fdk.model.LocalizedStrings value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'descriptionFormatted' field.
   * @return Multilingual description of the dataset, where harvested formatting is intact
   */
  public no.digdir.fdk.model.LocalizedStrings getDescriptionFormatted() {
    return descriptionFormatted;
  }


  /**
   * Sets the value of the 'descriptionFormatted' field.
   * Multilingual description of the dataset, where harvested formatting is intact
   * @param value the value to set.
   */
  public void setDescriptionFormatted(no.digdir.fdk.model.LocalizedStrings value) {
    this.descriptionFormatted = value;
  }

  /**
   * Gets the value of the 'publisher' field.
   * @return Publisher information
   */
  public no.digdir.fdk.model.Publisher getPublisher() {
    return publisher;
  }


  /**
   * Sets the value of the 'publisher' field.
   * Publisher information
   * @param value the value to set.
   */
  public void setPublisher(no.digdir.fdk.model.Publisher value) {
    this.publisher = value;
  }

  /**
   * Gets the value of the 'distribution' field.
   * @return List of distributions for the dataset
   */
  public java.util.List<no.digdir.fdk.model.dataset.Distribution> getDistribution() {
    return distribution;
  }


  /**
   * Sets the value of the 'distribution' field.
   * List of distributions for the dataset
   * @param value the value to set.
   */
  public void setDistribution(java.util.List<no.digdir.fdk.model.dataset.Distribution> value) {
    this.distribution = value;
  }

  /**
   * Gets the value of the 'sample' field.
   * @return List of sample distributions for the dataset
   */
  public java.util.List<no.digdir.fdk.model.dataset.Distribution> getSample() {
    return sample;
  }


  /**
   * Sets the value of the 'sample' field.
   * List of sample distributions for the dataset
   * @param value the value to set.
   */
  public void setSample(java.util.List<no.digdir.fdk.model.dataset.Distribution> value) {
    this.sample = value;
  }

  /**
   * Gets the value of the 'themeUris' field.
   * @return List of theme URIs for the dataset
   */
  public java.util.List<java.lang.CharSequence> getThemeUris() {
    return themeUris;
  }


  /**
   * Sets the value of the 'themeUris' field.
   * List of theme URIs for the dataset
   * @param value the value to set.
   */
  public void setThemeUris(java.util.List<java.lang.CharSequence> value) {
    this.themeUris = value;
  }

  /**
   * Gets the value of the 'theme' field.
   * @return List of EU data themes for the dataset
   */
  public java.util.List<no.digdir.fdk.model.EuDataTheme> getTheme() {
    return theme;
  }


  /**
   * Sets the value of the 'theme' field.
   * List of EU data themes for the dataset
   * @param value the value to set.
   */
  public void setTheme(java.util.List<no.digdir.fdk.model.EuDataTheme> value) {
    this.theme = value;
  }

  /**
   * Gets the value of the 'losTheme' field.
   * @return List of LOS themes for the dataset
   */
  public java.util.List<no.digdir.fdk.model.LosNode> getLosTheme() {
    return losTheme;
  }


  /**
   * Sets the value of the 'losTheme' field.
   * List of LOS themes for the dataset
   * @param value the value to set.
   */
  public void setLosTheme(java.util.List<no.digdir.fdk.model.LosNode> value) {
    this.losTheme = value;
  }

  /**
   * Gets the value of the 'eurovocThemes' field.
   * @return List of EUROVOC themes for the dataset
   */
  public java.util.List<no.digdir.fdk.model.Eurovoc> getEurovocThemes() {
    return eurovocThemes;
  }


  /**
   * Sets the value of the 'eurovocThemes' field.
   * List of EUROVOC themes for the dataset
   * @param value the value to set.
   */
  public void setEurovocThemes(java.util.List<no.digdir.fdk.model.Eurovoc> value) {
    this.eurovocThemes = value;
  }

  /**
   * Gets the value of the 'keyword' field.
   * @return List of keywords for the dataset
   */
  public java.util.List<no.digdir.fdk.model.LocalizedStrings> getKeyword() {
    return keyword;
  }


  /**
   * Sets the value of the 'keyword' field.
   * List of keywords for the dataset
   * @param value the value to set.
   */
  public void setKeyword(java.util.List<no.digdir.fdk.model.LocalizedStrings> value) {
    this.keyword = value;
  }

  /**
   * Gets the value of the 'issued' field.
   * @return Date when the dataset was issued, format: 'YYYY-MM-DD'
   */
  public java.lang.CharSequence getIssued() {
    return issued;
  }


  /**
   * Sets the value of the 'issued' field.
   * Date when the dataset was issued, format: 'YYYY-MM-DD'
   * @param value the value to set.
   */
  public void setIssued(java.lang.CharSequence value) {
    this.issued = value;
  }

  /**
   * Gets the value of the 'modified' field.
   * @return Date when the dataset was last modified, format: 'YYYY-MM-DD'
   */
  public java.lang.CharSequence getModified() {
    return modified;
  }


  /**
   * Sets the value of the 'modified' field.
   * Date when the dataset was last modified, format: 'YYYY-MM-DD'
   * @param value the value to set.
   */
  public void setModified(java.lang.CharSequence value) {
    this.modified = value;
  }

  /**
   * Gets the value of the 'dctType' field.
   * @return Type of dataset
   */
  public no.digdir.fdk.model.ReferenceDataCode getDctType() {
    return dctType;
  }


  /**
   * Sets the value of the 'dctType' field.
   * Type of dataset
   * @param value the value to set.
   */
  public void setDctType(no.digdir.fdk.model.ReferenceDataCode value) {
    this.dctType = value;
  }

  /**
   * Gets the value of the 'accessRights' field.
   * @return Access rights for the dataset
   */
  public no.digdir.fdk.model.ReferenceDataCode getAccessRights() {
    return accessRights;
  }


  /**
   * Sets the value of the 'accessRights' field.
   * Access rights for the dataset
   * @param value the value to set.
   */
  public void setAccessRights(no.digdir.fdk.model.ReferenceDataCode value) {
    this.accessRights = value;
  }

  /**
   * Gets the value of the 'language' field.
   * @return Languages the dataset is available in
   */
  public java.util.List<no.digdir.fdk.model.ReferenceDataCode> getLanguage() {
    return language;
  }


  /**
   * Sets the value of the 'language' field.
   * Languages the dataset is available in
   * @param value the value to set.
   */
  public void setLanguage(java.util.List<no.digdir.fdk.model.ReferenceDataCode> value) {
    this.language = value;
  }

  /**
   * Gets the value of the 'page' field.
   * @return Pages or documents that describes the dataset
   */
  public java.util.List<java.lang.CharSequence> getPage() {
    return page;
  }


  /**
   * Sets the value of the 'page' field.
   * Pages or documents that describes the dataset
   * @param value the value to set.
   */
  public void setPage(java.util.List<java.lang.CharSequence> value) {
    this.page = value;
  }

  /**
   * Gets the value of the 'landingPage' field.
   * @return List of landing pages for the dataset
   */
  public java.util.List<java.lang.CharSequence> getLandingPage() {
    return landingPage;
  }


  /**
   * Sets the value of the 'landingPage' field.
   * List of landing pages for the dataset
   * @param value the value to set.
   */
  public void setLandingPage(java.util.List<java.lang.CharSequence> value) {
    this.landingPage = value;
  }

  /**
   * Gets the value of the 'temporal' field.
   * @return Publisher information
   */
  public java.util.List<no.digdir.fdk.model.Temporal> getTemporal() {
    return temporal;
  }


  /**
   * Sets the value of the 'temporal' field.
   * Publisher information
   * @param value the value to set.
   */
  public void setTemporal(java.util.List<no.digdir.fdk.model.Temporal> value) {
    this.temporal = value;
  }

  /**
   * Gets the value of the 'subject' field.
   * @return Dataset subject information
   */
  public java.util.List<no.digdir.fdk.model.dataset.Subject> getSubject() {
    return subject;
  }


  /**
   * Sets the value of the 'subject' field.
   * Dataset subject information
   * @param value the value to set.
   */
  public void setSubject(java.util.List<no.digdir.fdk.model.dataset.Subject> value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'spatial' field.
   * @return Dataset spatial information
   */
  public java.util.List<no.digdir.fdk.model.ReferenceDataCode> getSpatial() {
    return spatial;
  }


  /**
   * Sets the value of the 'spatial' field.
   * Dataset spatial information
   * @param value the value to set.
   */
  public void setSpatial(java.util.List<no.digdir.fdk.model.ReferenceDataCode> value) {
    this.spatial = value;
  }

  /**
   * Gets the value of the 'provenance' field.
   * @return Provenance for the dataset
   */
  public no.digdir.fdk.model.ReferenceDataCode getProvenance() {
    return provenance;
  }


  /**
   * Sets the value of the 'provenance' field.
   * Provenance for the dataset
   * @param value the value to set.
   */
  public void setProvenance(no.digdir.fdk.model.ReferenceDataCode value) {
    this.provenance = value;
  }

  /**
   * Gets the value of the 'accrualPeriodicity' field.
   * @return Frequency of updates for the dataset
   */
  public no.digdir.fdk.model.ReferenceDataCode getAccrualPeriodicity() {
    return accrualPeriodicity;
  }


  /**
   * Sets the value of the 'accrualPeriodicity' field.
   * Frequency of updates for the dataset
   * @param value the value to set.
   */
  public void setAccrualPeriodicity(no.digdir.fdk.model.ReferenceDataCode value) {
    this.accrualPeriodicity = value;
  }

  /**
   * Gets the value of the 'legalBasisForRestriction' field.
   * @return Restriction rules for the dataset
   */
  public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getLegalBasisForRestriction() {
    return legalBasisForRestriction;
  }


  /**
   * Sets the value of the 'legalBasisForRestriction' field.
   * Restriction rules for the dataset
   * @param value the value to set.
   */
  public void setLegalBasisForRestriction(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
    this.legalBasisForRestriction = value;
  }

  /**
   * Gets the value of the 'legalBasisForProcessing' field.
   * @return Processing rules for the dataset
   */
  public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getLegalBasisForProcessing() {
    return legalBasisForProcessing;
  }


  /**
   * Sets the value of the 'legalBasisForProcessing' field.
   * Processing rules for the dataset
   * @param value the value to set.
   */
  public void setLegalBasisForProcessing(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
    this.legalBasisForProcessing = value;
  }

  /**
   * Gets the value of the 'legalBasisForAccess' field.
   * @return Access rules for the dataset
   */
  public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getLegalBasisForAccess() {
    return legalBasisForAccess;
  }


  /**
   * Sets the value of the 'legalBasisForAccess' field.
   * Access rules for the dataset
   * @param value the value to set.
   */
  public void setLegalBasisForAccess(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
    this.legalBasisForAccess = value;
  }

  /**
   * Gets the value of the 'conformsTo' field.
   * @return Established schemas to which the dataset conforms
   */
  public java.util.List<no.digdir.fdk.model.UriWithLabel> getConformsTo() {
    return conformsTo;
  }


  /**
   * Sets the value of the 'conformsTo' field.
   * Established schemas to which the dataset conforms
   * @param value the value to set.
   */
  public void setConformsTo(java.util.List<no.digdir.fdk.model.UriWithLabel> value) {
    this.conformsTo = value;
  }

  /**
   * Gets the value of the 'informationModel' field.
   * @return Information models to which the dataset conforms
   */
  public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getInformationModel() {
    return informationModel;
  }


  /**
   * Sets the value of the 'informationModel' field.
   * Information models to which the dataset conforms
   * @param value the value to set.
   */
  public void setInformationModel(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
    this.informationModel = value;
  }

  /**
   * Gets the value of the 'hasAccuracyAnnotation' field.
   * @return Quality annotation about dataset accuracy
   */
  public no.digdir.fdk.model.dataset.QualityAnnotation getHasAccuracyAnnotation() {
    return hasAccuracyAnnotation;
  }


  /**
   * Sets the value of the 'hasAccuracyAnnotation' field.
   * Quality annotation about dataset accuracy
   * @param value the value to set.
   */
  public void setHasAccuracyAnnotation(no.digdir.fdk.model.dataset.QualityAnnotation value) {
    this.hasAccuracyAnnotation = value;
  }

  /**
   * Gets the value of the 'hasCompletenessAnnotation' field.
   * @return Quality annotation about dataset completeness
   */
  public no.digdir.fdk.model.dataset.QualityAnnotation getHasCompletenessAnnotation() {
    return hasCompletenessAnnotation;
  }


  /**
   * Sets the value of the 'hasCompletenessAnnotation' field.
   * Quality annotation about dataset completeness
   * @param value the value to set.
   */
  public void setHasCompletenessAnnotation(no.digdir.fdk.model.dataset.QualityAnnotation value) {
    this.hasCompletenessAnnotation = value;
  }

  /**
   * Gets the value of the 'hasCurrentnessAnnotation' field.
   * @return Quality annotation about dataset currentness
   */
  public no.digdir.fdk.model.dataset.QualityAnnotation getHasCurrentnessAnnotation() {
    return hasCurrentnessAnnotation;
  }


  /**
   * Sets the value of the 'hasCurrentnessAnnotation' field.
   * Quality annotation about dataset currentness
   * @param value the value to set.
   */
  public void setHasCurrentnessAnnotation(no.digdir.fdk.model.dataset.QualityAnnotation value) {
    this.hasCurrentnessAnnotation = value;
  }

  /**
   * Gets the value of the 'hasAvailabilityAnnotation' field.
   * @return Quality annotation about dataset availability
   */
  public no.digdir.fdk.model.dataset.QualityAnnotation getHasAvailabilityAnnotation() {
    return hasAvailabilityAnnotation;
  }


  /**
   * Sets the value of the 'hasAvailabilityAnnotation' field.
   * Quality annotation about dataset availability
   * @param value the value to set.
   */
  public void setHasAvailabilityAnnotation(no.digdir.fdk.model.dataset.QualityAnnotation value) {
    this.hasAvailabilityAnnotation = value;
  }

  /**
   * Gets the value of the 'hasRelevanceAnnotation' field.
   * @return Quality annotation about dataset relevance
   */
  public no.digdir.fdk.model.dataset.QualityAnnotation getHasRelevanceAnnotation() {
    return hasRelevanceAnnotation;
  }


  /**
   * Sets the value of the 'hasRelevanceAnnotation' field.
   * Quality annotation about dataset relevance
   * @param value the value to set.
   */
  public void setHasRelevanceAnnotation(no.digdir.fdk.model.dataset.QualityAnnotation value) {
    this.hasRelevanceAnnotation = value;
  }

  /**
   * Gets the value of the 'qualifiedAttributions' field.
   * @return Qualified attributions of the dataset
   */
  public java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution> getQualifiedAttributions() {
    return qualifiedAttributions;
  }


  /**
   * Sets the value of the 'qualifiedAttributions' field.
   * Qualified attributions of the dataset
   * @param value the value to set.
   */
  public void setQualifiedAttributions(java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution> value) {
    this.qualifiedAttributions = value;
  }

  /**
   * Gets the value of the 'isOpenData' field.
   * @return Dataset is open data
   */
  public boolean getIsOpenData() {
    return isOpenData;
  }


  /**
   * Sets the value of the 'isOpenData' field.
   * Dataset is open data
   * @param value the value to set.
   */
  public void setIsOpenData(boolean value) {
    this.isOpenData = value;
  }

  /**
   * Gets the value of the 'isAuthoritative' field.
   * @return Dataset is authoritative
   */
  public boolean getIsAuthoritative() {
    return isAuthoritative;
  }


  /**
   * Sets the value of the 'isAuthoritative' field.
   * Dataset is authoritative
   * @param value the value to set.
   */
  public void setIsAuthoritative(boolean value) {
    this.isAuthoritative = value;
  }

  /**
   * Gets the value of the 'isRelatedToTransportportal' field.
   * @return Dataset is related to Transportportal
   */
  public boolean getIsRelatedToTransportportal() {
    return isRelatedToTransportportal;
  }


  /**
   * Sets the value of the 'isRelatedToTransportportal' field.
   * Dataset is related to Transportportal
   * @param value the value to set.
   */
  public void setIsRelatedToTransportportal(boolean value) {
    this.isRelatedToTransportportal = value;
  }

  /**
   * Gets the value of the 'inSeries' field.
   * @return Information about series, only relevant if dataset is in a series
   */
  public no.digdir.fdk.model.dataset.InSeries getInSeries() {
    return inSeries;
  }


  /**
   * Sets the value of the 'inSeries' field.
   * Information about series, only relevant if dataset is in a series
   * @param value the value to set.
   */
  public void setInSeries(no.digdir.fdk.model.dataset.InSeries value) {
    this.inSeries = value;
  }

  /**
   * Gets the value of the 'prev' field.
   * @return Previous dataset, only relevant if dataset is in a series
   */
  public java.lang.CharSequence getPrev() {
    return prev;
  }


  /**
   * Sets the value of the 'prev' field.
   * Previous dataset, only relevant if dataset is in a series
   * @param value the value to set.
   */
  public void setPrev(java.lang.CharSequence value) {
    this.prev = value;
  }

  /**
   * Gets the value of the 'last' field.
   * @return Last dataset in series, only relevant when specializedType is datasetSeries
   */
  public java.lang.CharSequence getLast() {
    return last;
  }


  /**
   * Sets the value of the 'last' field.
   * Last dataset in series, only relevant when specializedType is datasetSeries
   * @param value the value to set.
   */
  public void setLast(java.lang.CharSequence value) {
    this.last = value;
  }

  /**
   * Gets the value of the 'datasetsInSeries' field.
   * @return All datasets in the series, only relevant when specializedType is datasetSeries
   */
  public java.util.List<java.lang.CharSequence> getDatasetsInSeries() {
    return datasetsInSeries;
  }


  /**
   * Sets the value of the 'datasetsInSeries' field.
   * All datasets in the series, only relevant when specializedType is datasetSeries
   * @param value the value to set.
   */
  public void setDatasetsInSeries(java.util.List<java.lang.CharSequence> value) {
    this.datasetsInSeries = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Resource type
   */
  public no.digdir.fdk.model.ResourceType getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Resource type
   * @param value the value to set.
   */
  public void setType(no.digdir.fdk.model.ResourceType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'specializedType' field.
   * @return Specialized dataset type
   */
  public no.digdir.fdk.model.dataset.DatasetType getSpecializedType() {
    return specializedType;
  }


  /**
   * Sets the value of the 'specializedType' field.
   * Specialized dataset type
   * @param value the value to set.
   */
  public void setSpecializedType(no.digdir.fdk.model.dataset.DatasetType value) {
    this.specializedType = value;
  }

  /**
   * Creates a new Dataset RecordBuilder.
   * @return A new Dataset RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Dataset.Builder newBuilder() {
    return new no.digdir.fdk.model.dataset.Dataset.Builder();
  }

  /**
   * Creates a new Dataset RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Dataset RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Dataset.Builder newBuilder(no.digdir.fdk.model.dataset.Dataset.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.Dataset.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.Dataset.Builder(other);
    }
  }

  /**
   * Creates a new Dataset RecordBuilder by copying an existing Dataset instance.
   * @param other The existing instance to copy.
   * @return A new Dataset RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Dataset.Builder newBuilder(no.digdir.fdk.model.dataset.Dataset other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.Dataset.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.Dataset.Builder(other);
    }
  }

  /**
   * RecordBuilder for Dataset instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Dataset>
    implements org.apache.avro.data.RecordBuilder<Dataset> {

    /** Unique FDK identifier for the dataset */
    private java.lang.CharSequence id;
    /** Subject URI for the dataset in the harvested source */
    private java.lang.CharSequence uri;
    /** List of dataset identifiers from dct:identifier */
    private java.util.List<java.lang.CharSequence> identifier;
    /** List of dataset identifiers from adms:identifier */
    private java.util.List<java.lang.CharSequence> admsIdentifier;
    /** Meta data about the harvest of the dataset to FDK */
    private no.digdir.fdk.model.HarvestMetaData harvest;
    private no.digdir.fdk.model.HarvestMetaData.Builder harvestBuilder;
    /** Information about the catalog the dataset is contained in */
    private no.digdir.fdk.model.Catalog catalog;
    private no.digdir.fdk.model.Catalog.Builder catalogBuilder;
    /** Multilingual title of the dataset */
    private no.digdir.fdk.model.LocalizedStrings title;
    private no.digdir.fdk.model.LocalizedStrings.Builder titleBuilder;
    /** Multilingual description of the dataset, where harvested formatting has been removed */
    private no.digdir.fdk.model.LocalizedStrings description;
    private no.digdir.fdk.model.LocalizedStrings.Builder descriptionBuilder;
    /** Multilingual description of the dataset, where harvested formatting is intact */
    private no.digdir.fdk.model.LocalizedStrings descriptionFormatted;
    private no.digdir.fdk.model.LocalizedStrings.Builder descriptionFormattedBuilder;
    /** Publisher information */
    private no.digdir.fdk.model.Publisher publisher;
    private no.digdir.fdk.model.Publisher.Builder publisherBuilder;
    /** List of distributions for the dataset */
    private java.util.List<no.digdir.fdk.model.dataset.Distribution> distribution;
    /** List of sample distributions for the dataset */
    private java.util.List<no.digdir.fdk.model.dataset.Distribution> sample;
    /** List of theme URIs for the dataset */
    private java.util.List<java.lang.CharSequence> themeUris;
    /** List of EU data themes for the dataset */
    private java.util.List<no.digdir.fdk.model.EuDataTheme> theme;
    /** List of LOS themes for the dataset */
    private java.util.List<no.digdir.fdk.model.LosNode> losTheme;
    /** List of EUROVOC themes for the dataset */
    private java.util.List<no.digdir.fdk.model.Eurovoc> eurovocThemes;
    /** List of keywords for the dataset */
    private java.util.List<no.digdir.fdk.model.LocalizedStrings> keyword;
    /** Date when the dataset was issued, format: 'YYYY-MM-DD' */
    private java.lang.CharSequence issued;
    /** Date when the dataset was last modified, format: 'YYYY-MM-DD' */
    private java.lang.CharSequence modified;
    /** Type of dataset */
    private no.digdir.fdk.model.ReferenceDataCode dctType;
    private no.digdir.fdk.model.ReferenceDataCode.Builder dctTypeBuilder;
    /** Access rights for the dataset */
    private no.digdir.fdk.model.ReferenceDataCode accessRights;
    private no.digdir.fdk.model.ReferenceDataCode.Builder accessRightsBuilder;
    /** Languages the dataset is available in */
    private java.util.List<no.digdir.fdk.model.ReferenceDataCode> language;
    /** Pages or documents that describes the dataset */
    private java.util.List<java.lang.CharSequence> page;
    /** List of landing pages for the dataset */
    private java.util.List<java.lang.CharSequence> landingPage;
    /** Publisher information */
    private java.util.List<no.digdir.fdk.model.Temporal> temporal;
    /** Dataset subject information */
    private java.util.List<no.digdir.fdk.model.dataset.Subject> subject;
    /** Dataset spatial information */
    private java.util.List<no.digdir.fdk.model.ReferenceDataCode> spatial;
    /** Provenance for the dataset */
    private no.digdir.fdk.model.ReferenceDataCode provenance;
    private no.digdir.fdk.model.ReferenceDataCode.Builder provenanceBuilder;
    /** Frequency of updates for the dataset */
    private no.digdir.fdk.model.ReferenceDataCode accrualPeriodicity;
    private no.digdir.fdk.model.ReferenceDataCode.Builder accrualPeriodicityBuilder;
    /** Restriction rules for the dataset */
    private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> legalBasisForRestriction;
    /** Processing rules for the dataset */
    private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> legalBasisForProcessing;
    /** Access rules for the dataset */
    private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> legalBasisForAccess;
    /** Established schemas to which the dataset conforms */
    private java.util.List<no.digdir.fdk.model.UriWithLabel> conformsTo;
    /** Information models to which the dataset conforms */
    private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> informationModel;
    /** Quality annotation about dataset accuracy */
    private no.digdir.fdk.model.dataset.QualityAnnotation hasAccuracyAnnotation;
    private no.digdir.fdk.model.dataset.QualityAnnotation.Builder hasAccuracyAnnotationBuilder;
    /** Quality annotation about dataset completeness */
    private no.digdir.fdk.model.dataset.QualityAnnotation hasCompletenessAnnotation;
    private no.digdir.fdk.model.dataset.QualityAnnotation.Builder hasCompletenessAnnotationBuilder;
    /** Quality annotation about dataset currentness */
    private no.digdir.fdk.model.dataset.QualityAnnotation hasCurrentnessAnnotation;
    private no.digdir.fdk.model.dataset.QualityAnnotation.Builder hasCurrentnessAnnotationBuilder;
    /** Quality annotation about dataset availability */
    private no.digdir.fdk.model.dataset.QualityAnnotation hasAvailabilityAnnotation;
    private no.digdir.fdk.model.dataset.QualityAnnotation.Builder hasAvailabilityAnnotationBuilder;
    /** Quality annotation about dataset relevance */
    private no.digdir.fdk.model.dataset.QualityAnnotation hasRelevanceAnnotation;
    private no.digdir.fdk.model.dataset.QualityAnnotation.Builder hasRelevanceAnnotationBuilder;
    /** Qualified attributions of the dataset */
    private java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution> qualifiedAttributions;
    /** Dataset is open data */
    private boolean isOpenData;
    /** Dataset is authoritative */
    private boolean isAuthoritative;
    /** Dataset is related to Transportportal */
    private boolean isRelatedToTransportportal;
    /** Information about series, only relevant if dataset is in a series */
    private no.digdir.fdk.model.dataset.InSeries inSeries;
    private no.digdir.fdk.model.dataset.InSeries.Builder inSeriesBuilder;
    /** Previous dataset, only relevant if dataset is in a series */
    private java.lang.CharSequence prev;
    /** Last dataset in series, only relevant when specializedType is datasetSeries */
    private java.lang.CharSequence last;
    /** All datasets in the series, only relevant when specializedType is datasetSeries */
    private java.util.List<java.lang.CharSequence> datasetsInSeries;
    /** Resource type */
    private no.digdir.fdk.model.ResourceType type;
    /** Specialized dataset type */
    private no.digdir.fdk.model.dataset.DatasetType specializedType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.Dataset.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.uri)) {
        this.uri = data().deepCopy(fields()[1].schema(), other.uri);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.identifier)) {
        this.identifier = data().deepCopy(fields()[2].schema(), other.identifier);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.admsIdentifier)) {
        this.admsIdentifier = data().deepCopy(fields()[3].schema(), other.admsIdentifier);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.harvest)) {
        this.harvest = data().deepCopy(fields()[4].schema(), other.harvest);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasHarvestBuilder()) {
        this.harvestBuilder = no.digdir.fdk.model.HarvestMetaData.newBuilder(other.getHarvestBuilder());
      }
      if (isValidValue(fields()[5], other.catalog)) {
        this.catalog = data().deepCopy(fields()[5].schema(), other.catalog);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasCatalogBuilder()) {
        this.catalogBuilder = no.digdir.fdk.model.Catalog.newBuilder(other.getCatalogBuilder());
      }
      if (isValidValue(fields()[6], other.title)) {
        this.title = data().deepCopy(fields()[6].schema(), other.title);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasTitleBuilder()) {
        this.titleBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getTitleBuilder());
      }
      if (isValidValue(fields()[7], other.description)) {
        this.description = data().deepCopy(fields()[7].schema(), other.description);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasDescriptionBuilder()) {
        this.descriptionBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getDescriptionBuilder());
      }
      if (isValidValue(fields()[8], other.descriptionFormatted)) {
        this.descriptionFormatted = data().deepCopy(fields()[8].schema(), other.descriptionFormatted);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (other.hasDescriptionFormattedBuilder()) {
        this.descriptionFormattedBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getDescriptionFormattedBuilder());
      }
      if (isValidValue(fields()[9], other.publisher)) {
        this.publisher = data().deepCopy(fields()[9].schema(), other.publisher);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasPublisherBuilder()) {
        this.publisherBuilder = no.digdir.fdk.model.Publisher.newBuilder(other.getPublisherBuilder());
      }
      if (isValidValue(fields()[10], other.distribution)) {
        this.distribution = data().deepCopy(fields()[10].schema(), other.distribution);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.sample)) {
        this.sample = data().deepCopy(fields()[11].schema(), other.sample);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.themeUris)) {
        this.themeUris = data().deepCopy(fields()[12].schema(), other.themeUris);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.theme)) {
        this.theme = data().deepCopy(fields()[13].schema(), other.theme);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.losTheme)) {
        this.losTheme = data().deepCopy(fields()[14].schema(), other.losTheme);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.eurovocThemes)) {
        this.eurovocThemes = data().deepCopy(fields()[15].schema(), other.eurovocThemes);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.keyword)) {
        this.keyword = data().deepCopy(fields()[16].schema(), other.keyword);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.issued)) {
        this.issued = data().deepCopy(fields()[17].schema(), other.issued);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.modified)) {
        this.modified = data().deepCopy(fields()[18].schema(), other.modified);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.dctType)) {
        this.dctType = data().deepCopy(fields()[19].schema(), other.dctType);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (other.hasDctTypeBuilder()) {
        this.dctTypeBuilder = no.digdir.fdk.model.ReferenceDataCode.newBuilder(other.getDctTypeBuilder());
      }
      if (isValidValue(fields()[20], other.accessRights)) {
        this.accessRights = data().deepCopy(fields()[20].schema(), other.accessRights);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (other.hasAccessRightsBuilder()) {
        this.accessRightsBuilder = no.digdir.fdk.model.ReferenceDataCode.newBuilder(other.getAccessRightsBuilder());
      }
      if (isValidValue(fields()[21], other.language)) {
        this.language = data().deepCopy(fields()[21].schema(), other.language);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.page)) {
        this.page = data().deepCopy(fields()[22].schema(), other.page);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.landingPage)) {
        this.landingPage = data().deepCopy(fields()[23].schema(), other.landingPage);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.temporal)) {
        this.temporal = data().deepCopy(fields()[24].schema(), other.temporal);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.subject)) {
        this.subject = data().deepCopy(fields()[25].schema(), other.subject);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.spatial)) {
        this.spatial = data().deepCopy(fields()[26].schema(), other.spatial);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.provenance)) {
        this.provenance = data().deepCopy(fields()[27].schema(), other.provenance);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (other.hasProvenanceBuilder()) {
        this.provenanceBuilder = no.digdir.fdk.model.ReferenceDataCode.newBuilder(other.getProvenanceBuilder());
      }
      if (isValidValue(fields()[28], other.accrualPeriodicity)) {
        this.accrualPeriodicity = data().deepCopy(fields()[28].schema(), other.accrualPeriodicity);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
      if (other.hasAccrualPeriodicityBuilder()) {
        this.accrualPeriodicityBuilder = no.digdir.fdk.model.ReferenceDataCode.newBuilder(other.getAccrualPeriodicityBuilder());
      }
      if (isValidValue(fields()[29], other.legalBasisForRestriction)) {
        this.legalBasisForRestriction = data().deepCopy(fields()[29].schema(), other.legalBasisForRestriction);
        fieldSetFlags()[29] = other.fieldSetFlags()[29];
      }
      if (isValidValue(fields()[30], other.legalBasisForProcessing)) {
        this.legalBasisForProcessing = data().deepCopy(fields()[30].schema(), other.legalBasisForProcessing);
        fieldSetFlags()[30] = other.fieldSetFlags()[30];
      }
      if (isValidValue(fields()[31], other.legalBasisForAccess)) {
        this.legalBasisForAccess = data().deepCopy(fields()[31].schema(), other.legalBasisForAccess);
        fieldSetFlags()[31] = other.fieldSetFlags()[31];
      }
      if (isValidValue(fields()[32], other.conformsTo)) {
        this.conformsTo = data().deepCopy(fields()[32].schema(), other.conformsTo);
        fieldSetFlags()[32] = other.fieldSetFlags()[32];
      }
      if (isValidValue(fields()[33], other.informationModel)) {
        this.informationModel = data().deepCopy(fields()[33].schema(), other.informationModel);
        fieldSetFlags()[33] = other.fieldSetFlags()[33];
      }
      if (isValidValue(fields()[34], other.hasAccuracyAnnotation)) {
        this.hasAccuracyAnnotation = data().deepCopy(fields()[34].schema(), other.hasAccuracyAnnotation);
        fieldSetFlags()[34] = other.fieldSetFlags()[34];
      }
      if (other.hasHasAccuracyAnnotationBuilder()) {
        this.hasAccuracyAnnotationBuilder = no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder(other.getHasAccuracyAnnotationBuilder());
      }
      if (isValidValue(fields()[35], other.hasCompletenessAnnotation)) {
        this.hasCompletenessAnnotation = data().deepCopy(fields()[35].schema(), other.hasCompletenessAnnotation);
        fieldSetFlags()[35] = other.fieldSetFlags()[35];
      }
      if (other.hasHasCompletenessAnnotationBuilder()) {
        this.hasCompletenessAnnotationBuilder = no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder(other.getHasCompletenessAnnotationBuilder());
      }
      if (isValidValue(fields()[36], other.hasCurrentnessAnnotation)) {
        this.hasCurrentnessAnnotation = data().deepCopy(fields()[36].schema(), other.hasCurrentnessAnnotation);
        fieldSetFlags()[36] = other.fieldSetFlags()[36];
      }
      if (other.hasHasCurrentnessAnnotationBuilder()) {
        this.hasCurrentnessAnnotationBuilder = no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder(other.getHasCurrentnessAnnotationBuilder());
      }
      if (isValidValue(fields()[37], other.hasAvailabilityAnnotation)) {
        this.hasAvailabilityAnnotation = data().deepCopy(fields()[37].schema(), other.hasAvailabilityAnnotation);
        fieldSetFlags()[37] = other.fieldSetFlags()[37];
      }
      if (other.hasHasAvailabilityAnnotationBuilder()) {
        this.hasAvailabilityAnnotationBuilder = no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder(other.getHasAvailabilityAnnotationBuilder());
      }
      if (isValidValue(fields()[38], other.hasRelevanceAnnotation)) {
        this.hasRelevanceAnnotation = data().deepCopy(fields()[38].schema(), other.hasRelevanceAnnotation);
        fieldSetFlags()[38] = other.fieldSetFlags()[38];
      }
      if (other.hasHasRelevanceAnnotationBuilder()) {
        this.hasRelevanceAnnotationBuilder = no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder(other.getHasRelevanceAnnotationBuilder());
      }
      if (isValidValue(fields()[39], other.qualifiedAttributions)) {
        this.qualifiedAttributions = data().deepCopy(fields()[39].schema(), other.qualifiedAttributions);
        fieldSetFlags()[39] = other.fieldSetFlags()[39];
      }
      if (isValidValue(fields()[40], other.isOpenData)) {
        this.isOpenData = data().deepCopy(fields()[40].schema(), other.isOpenData);
        fieldSetFlags()[40] = other.fieldSetFlags()[40];
      }
      if (isValidValue(fields()[41], other.isAuthoritative)) {
        this.isAuthoritative = data().deepCopy(fields()[41].schema(), other.isAuthoritative);
        fieldSetFlags()[41] = other.fieldSetFlags()[41];
      }
      if (isValidValue(fields()[42], other.isRelatedToTransportportal)) {
        this.isRelatedToTransportportal = data().deepCopy(fields()[42].schema(), other.isRelatedToTransportportal);
        fieldSetFlags()[42] = other.fieldSetFlags()[42];
      }
      if (isValidValue(fields()[43], other.inSeries)) {
        this.inSeries = data().deepCopy(fields()[43].schema(), other.inSeries);
        fieldSetFlags()[43] = other.fieldSetFlags()[43];
      }
      if (other.hasInSeriesBuilder()) {
        this.inSeriesBuilder = no.digdir.fdk.model.dataset.InSeries.newBuilder(other.getInSeriesBuilder());
      }
      if (isValidValue(fields()[44], other.prev)) {
        this.prev = data().deepCopy(fields()[44].schema(), other.prev);
        fieldSetFlags()[44] = other.fieldSetFlags()[44];
      }
      if (isValidValue(fields()[45], other.last)) {
        this.last = data().deepCopy(fields()[45].schema(), other.last);
        fieldSetFlags()[45] = other.fieldSetFlags()[45];
      }
      if (isValidValue(fields()[46], other.datasetsInSeries)) {
        this.datasetsInSeries = data().deepCopy(fields()[46].schema(), other.datasetsInSeries);
        fieldSetFlags()[46] = other.fieldSetFlags()[46];
      }
      if (isValidValue(fields()[47], other.type)) {
        this.type = data().deepCopy(fields()[47].schema(), other.type);
        fieldSetFlags()[47] = other.fieldSetFlags()[47];
      }
      if (isValidValue(fields()[48], other.specializedType)) {
        this.specializedType = data().deepCopy(fields()[48].schema(), other.specializedType);
        fieldSetFlags()[48] = other.fieldSetFlags()[48];
      }
    }

    /**
     * Creates a Builder by copying an existing Dataset instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.Dataset other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uri)) {
        this.uri = data().deepCopy(fields()[1].schema(), other.uri);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.identifier)) {
        this.identifier = data().deepCopy(fields()[2].schema(), other.identifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.admsIdentifier)) {
        this.admsIdentifier = data().deepCopy(fields()[3].schema(), other.admsIdentifier);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.harvest)) {
        this.harvest = data().deepCopy(fields()[4].schema(), other.harvest);
        fieldSetFlags()[4] = true;
      }
      this.harvestBuilder = null;
      if (isValidValue(fields()[5], other.catalog)) {
        this.catalog = data().deepCopy(fields()[5].schema(), other.catalog);
        fieldSetFlags()[5] = true;
      }
      this.catalogBuilder = null;
      if (isValidValue(fields()[6], other.title)) {
        this.title = data().deepCopy(fields()[6].schema(), other.title);
        fieldSetFlags()[6] = true;
      }
      this.titleBuilder = null;
      if (isValidValue(fields()[7], other.description)) {
        this.description = data().deepCopy(fields()[7].schema(), other.description);
        fieldSetFlags()[7] = true;
      }
      this.descriptionBuilder = null;
      if (isValidValue(fields()[8], other.descriptionFormatted)) {
        this.descriptionFormatted = data().deepCopy(fields()[8].schema(), other.descriptionFormatted);
        fieldSetFlags()[8] = true;
      }
      this.descriptionFormattedBuilder = null;
      if (isValidValue(fields()[9], other.publisher)) {
        this.publisher = data().deepCopy(fields()[9].schema(), other.publisher);
        fieldSetFlags()[9] = true;
      }
      this.publisherBuilder = null;
      if (isValidValue(fields()[10], other.distribution)) {
        this.distribution = data().deepCopy(fields()[10].schema(), other.distribution);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.sample)) {
        this.sample = data().deepCopy(fields()[11].schema(), other.sample);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.themeUris)) {
        this.themeUris = data().deepCopy(fields()[12].schema(), other.themeUris);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.theme)) {
        this.theme = data().deepCopy(fields()[13].schema(), other.theme);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.losTheme)) {
        this.losTheme = data().deepCopy(fields()[14].schema(), other.losTheme);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.eurovocThemes)) {
        this.eurovocThemes = data().deepCopy(fields()[15].schema(), other.eurovocThemes);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.keyword)) {
        this.keyword = data().deepCopy(fields()[16].schema(), other.keyword);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.issued)) {
        this.issued = data().deepCopy(fields()[17].schema(), other.issued);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.modified)) {
        this.modified = data().deepCopy(fields()[18].schema(), other.modified);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.dctType)) {
        this.dctType = data().deepCopy(fields()[19].schema(), other.dctType);
        fieldSetFlags()[19] = true;
      }
      this.dctTypeBuilder = null;
      if (isValidValue(fields()[20], other.accessRights)) {
        this.accessRights = data().deepCopy(fields()[20].schema(), other.accessRights);
        fieldSetFlags()[20] = true;
      }
      this.accessRightsBuilder = null;
      if (isValidValue(fields()[21], other.language)) {
        this.language = data().deepCopy(fields()[21].schema(), other.language);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.page)) {
        this.page = data().deepCopy(fields()[22].schema(), other.page);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.landingPage)) {
        this.landingPage = data().deepCopy(fields()[23].schema(), other.landingPage);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.temporal)) {
        this.temporal = data().deepCopy(fields()[24].schema(), other.temporal);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.subject)) {
        this.subject = data().deepCopy(fields()[25].schema(), other.subject);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.spatial)) {
        this.spatial = data().deepCopy(fields()[26].schema(), other.spatial);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.provenance)) {
        this.provenance = data().deepCopy(fields()[27].schema(), other.provenance);
        fieldSetFlags()[27] = true;
      }
      this.provenanceBuilder = null;
      if (isValidValue(fields()[28], other.accrualPeriodicity)) {
        this.accrualPeriodicity = data().deepCopy(fields()[28].schema(), other.accrualPeriodicity);
        fieldSetFlags()[28] = true;
      }
      this.accrualPeriodicityBuilder = null;
      if (isValidValue(fields()[29], other.legalBasisForRestriction)) {
        this.legalBasisForRestriction = data().deepCopy(fields()[29].schema(), other.legalBasisForRestriction);
        fieldSetFlags()[29] = true;
      }
      if (isValidValue(fields()[30], other.legalBasisForProcessing)) {
        this.legalBasisForProcessing = data().deepCopy(fields()[30].schema(), other.legalBasisForProcessing);
        fieldSetFlags()[30] = true;
      }
      if (isValidValue(fields()[31], other.legalBasisForAccess)) {
        this.legalBasisForAccess = data().deepCopy(fields()[31].schema(), other.legalBasisForAccess);
        fieldSetFlags()[31] = true;
      }
      if (isValidValue(fields()[32], other.conformsTo)) {
        this.conformsTo = data().deepCopy(fields()[32].schema(), other.conformsTo);
        fieldSetFlags()[32] = true;
      }
      if (isValidValue(fields()[33], other.informationModel)) {
        this.informationModel = data().deepCopy(fields()[33].schema(), other.informationModel);
        fieldSetFlags()[33] = true;
      }
      if (isValidValue(fields()[34], other.hasAccuracyAnnotation)) {
        this.hasAccuracyAnnotation = data().deepCopy(fields()[34].schema(), other.hasAccuracyAnnotation);
        fieldSetFlags()[34] = true;
      }
      this.hasAccuracyAnnotationBuilder = null;
      if (isValidValue(fields()[35], other.hasCompletenessAnnotation)) {
        this.hasCompletenessAnnotation = data().deepCopy(fields()[35].schema(), other.hasCompletenessAnnotation);
        fieldSetFlags()[35] = true;
      }
      this.hasCompletenessAnnotationBuilder = null;
      if (isValidValue(fields()[36], other.hasCurrentnessAnnotation)) {
        this.hasCurrentnessAnnotation = data().deepCopy(fields()[36].schema(), other.hasCurrentnessAnnotation);
        fieldSetFlags()[36] = true;
      }
      this.hasCurrentnessAnnotationBuilder = null;
      if (isValidValue(fields()[37], other.hasAvailabilityAnnotation)) {
        this.hasAvailabilityAnnotation = data().deepCopy(fields()[37].schema(), other.hasAvailabilityAnnotation);
        fieldSetFlags()[37] = true;
      }
      this.hasAvailabilityAnnotationBuilder = null;
      if (isValidValue(fields()[38], other.hasRelevanceAnnotation)) {
        this.hasRelevanceAnnotation = data().deepCopy(fields()[38].schema(), other.hasRelevanceAnnotation);
        fieldSetFlags()[38] = true;
      }
      this.hasRelevanceAnnotationBuilder = null;
      if (isValidValue(fields()[39], other.qualifiedAttributions)) {
        this.qualifiedAttributions = data().deepCopy(fields()[39].schema(), other.qualifiedAttributions);
        fieldSetFlags()[39] = true;
      }
      if (isValidValue(fields()[40], other.isOpenData)) {
        this.isOpenData = data().deepCopy(fields()[40].schema(), other.isOpenData);
        fieldSetFlags()[40] = true;
      }
      if (isValidValue(fields()[41], other.isAuthoritative)) {
        this.isAuthoritative = data().deepCopy(fields()[41].schema(), other.isAuthoritative);
        fieldSetFlags()[41] = true;
      }
      if (isValidValue(fields()[42], other.isRelatedToTransportportal)) {
        this.isRelatedToTransportportal = data().deepCopy(fields()[42].schema(), other.isRelatedToTransportportal);
        fieldSetFlags()[42] = true;
      }
      if (isValidValue(fields()[43], other.inSeries)) {
        this.inSeries = data().deepCopy(fields()[43].schema(), other.inSeries);
        fieldSetFlags()[43] = true;
      }
      this.inSeriesBuilder = null;
      if (isValidValue(fields()[44], other.prev)) {
        this.prev = data().deepCopy(fields()[44].schema(), other.prev);
        fieldSetFlags()[44] = true;
      }
      if (isValidValue(fields()[45], other.last)) {
        this.last = data().deepCopy(fields()[45].schema(), other.last);
        fieldSetFlags()[45] = true;
      }
      if (isValidValue(fields()[46], other.datasetsInSeries)) {
        this.datasetsInSeries = data().deepCopy(fields()[46].schema(), other.datasetsInSeries);
        fieldSetFlags()[46] = true;
      }
      if (isValidValue(fields()[47], other.type)) {
        this.type = data().deepCopy(fields()[47].schema(), other.type);
        fieldSetFlags()[47] = true;
      }
      if (isValidValue(fields()[48], other.specializedType)) {
        this.specializedType = data().deepCopy(fields()[48].schema(), other.specializedType);
        fieldSetFlags()[48] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * Unique FDK identifier for the dataset
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Unique FDK identifier for the dataset
      * @param value The value of 'id'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Unique FDK identifier for the dataset
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Unique FDK identifier for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'uri' field.
      * Subject URI for the dataset in the harvested source
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * Subject URI for the dataset in the harvested source
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.uri = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * Subject URI for the dataset in the harvested source
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'uri' field.
      * Subject URI for the dataset in the harvested source
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearUri() {
      uri = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'identifier' field.
      * List of dataset identifiers from dct:identifier
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getIdentifier() {
      return identifier;
    }


    /**
      * Sets the value of the 'identifier' field.
      * List of dataset identifiers from dct:identifier
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setIdentifier(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.identifier = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * List of dataset identifiers from dct:identifier
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'identifier' field.
      * List of dataset identifiers from dct:identifier
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearIdentifier() {
      identifier = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'admsIdentifier' field.
      * List of dataset identifiers from adms:identifier
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAdmsIdentifier() {
      return admsIdentifier;
    }


    /**
      * Sets the value of the 'admsIdentifier' field.
      * List of dataset identifiers from adms:identifier
      * @param value The value of 'admsIdentifier'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setAdmsIdentifier(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.admsIdentifier = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'admsIdentifier' field has been set.
      * List of dataset identifiers from adms:identifier
      * @return True if the 'admsIdentifier' field has been set, false otherwise.
      */
    public boolean hasAdmsIdentifier() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'admsIdentifier' field.
      * List of dataset identifiers from adms:identifier
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearAdmsIdentifier() {
      admsIdentifier = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'harvest' field.
      * Meta data about the harvest of the dataset to FDK
      * @return The value.
      */
    public no.digdir.fdk.model.HarvestMetaData getHarvest() {
      return harvest;
    }


    /**
      * Sets the value of the 'harvest' field.
      * Meta data about the harvest of the dataset to FDK
      * @param value The value of 'harvest'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setHarvest(no.digdir.fdk.model.HarvestMetaData value) {
      validate(fields()[4], value);
      this.harvestBuilder = null;
      this.harvest = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'harvest' field has been set.
      * Meta data about the harvest of the dataset to FDK
      * @return True if the 'harvest' field has been set, false otherwise.
      */
    public boolean hasHarvest() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'harvest' field and creates one if it doesn't exist yet.
     * Meta data about the harvest of the dataset to FDK
     * @return This builder.
     */
    public no.digdir.fdk.model.HarvestMetaData.Builder getHarvestBuilder() {
      if (harvestBuilder == null) {
        if (hasHarvest()) {
          setHarvestBuilder(no.digdir.fdk.model.HarvestMetaData.newBuilder(harvest));
        } else {
          setHarvestBuilder(no.digdir.fdk.model.HarvestMetaData.newBuilder());
        }
      }
      return harvestBuilder;
    }

    /**
     * Sets the Builder instance for the 'harvest' field
     * Meta data about the harvest of the dataset to FDK
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setHarvestBuilder(no.digdir.fdk.model.HarvestMetaData.Builder value) {
      clearHarvest();
      harvestBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'harvest' field has an active Builder instance
     * Meta data about the harvest of the dataset to FDK
     * @return True if the 'harvest' field has an active Builder instance
     */
    public boolean hasHarvestBuilder() {
      return harvestBuilder != null;
    }

    /**
      * Clears the value of the 'harvest' field.
      * Meta data about the harvest of the dataset to FDK
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearHarvest() {
      harvest = null;
      harvestBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'catalog' field.
      * Information about the catalog the dataset is contained in
      * @return The value.
      */
    public no.digdir.fdk.model.Catalog getCatalog() {
      return catalog;
    }


    /**
      * Sets the value of the 'catalog' field.
      * Information about the catalog the dataset is contained in
      * @param value The value of 'catalog'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setCatalog(no.digdir.fdk.model.Catalog value) {
      validate(fields()[5], value);
      this.catalogBuilder = null;
      this.catalog = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'catalog' field has been set.
      * Information about the catalog the dataset is contained in
      * @return True if the 'catalog' field has been set, false otherwise.
      */
    public boolean hasCatalog() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'catalog' field and creates one if it doesn't exist yet.
     * Information about the catalog the dataset is contained in
     * @return This builder.
     */
    public no.digdir.fdk.model.Catalog.Builder getCatalogBuilder() {
      if (catalogBuilder == null) {
        if (hasCatalog()) {
          setCatalogBuilder(no.digdir.fdk.model.Catalog.newBuilder(catalog));
        } else {
          setCatalogBuilder(no.digdir.fdk.model.Catalog.newBuilder());
        }
      }
      return catalogBuilder;
    }

    /**
     * Sets the Builder instance for the 'catalog' field
     * Information about the catalog the dataset is contained in
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setCatalogBuilder(no.digdir.fdk.model.Catalog.Builder value) {
      clearCatalog();
      catalogBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'catalog' field has an active Builder instance
     * Information about the catalog the dataset is contained in
     * @return True if the 'catalog' field has an active Builder instance
     */
    public boolean hasCatalogBuilder() {
      return catalogBuilder != null;
    }

    /**
      * Clears the value of the 'catalog' field.
      * Information about the catalog the dataset is contained in
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearCatalog() {
      catalog = null;
      catalogBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * Multilingual title of the dataset
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * Multilingual title of the dataset
      * @param value The value of 'title'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setTitle(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[6], value);
      this.titleBuilder = null;
      this.title = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * Multilingual title of the dataset
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'title' field and creates one if it doesn't exist yet.
     * Multilingual title of the dataset
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getTitleBuilder() {
      if (titleBuilder == null) {
        if (hasTitle()) {
          setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(title));
        } else {
          setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return titleBuilder;
    }

    /**
     * Sets the Builder instance for the 'title' field
     * Multilingual title of the dataset
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearTitle();
      titleBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'title' field has an active Builder instance
     * Multilingual title of the dataset
     * @return True if the 'title' field has an active Builder instance
     */
    public boolean hasTitleBuilder() {
      return titleBuilder != null;
    }

    /**
      * Clears the value of the 'title' field.
      * Multilingual title of the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearTitle() {
      title = null;
      titleBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Multilingual description of the dataset, where harvested formatting has been removed
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Multilingual description of the dataset, where harvested formatting has been removed
      * @param value The value of 'description'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setDescription(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[7], value);
      this.descriptionBuilder = null;
      this.description = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Multilingual description of the dataset, where harvested formatting has been removed
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'description' field and creates one if it doesn't exist yet.
     * Multilingual description of the dataset, where harvested formatting has been removed
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getDescriptionBuilder() {
      if (descriptionBuilder == null) {
        if (hasDescription()) {
          setDescriptionBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(description));
        } else {
          setDescriptionBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return descriptionBuilder;
    }

    /**
     * Sets the Builder instance for the 'description' field
     * Multilingual description of the dataset, where harvested formatting has been removed
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setDescriptionBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearDescription();
      descriptionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'description' field has an active Builder instance
     * Multilingual description of the dataset, where harvested formatting has been removed
     * @return True if the 'description' field has an active Builder instance
     */
    public boolean hasDescriptionBuilder() {
      return descriptionBuilder != null;
    }

    /**
      * Clears the value of the 'description' field.
      * Multilingual description of the dataset, where harvested formatting has been removed
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearDescription() {
      description = null;
      descriptionBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'descriptionFormatted' field.
      * Multilingual description of the dataset, where harvested formatting is intact
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getDescriptionFormatted() {
      return descriptionFormatted;
    }


    /**
      * Sets the value of the 'descriptionFormatted' field.
      * Multilingual description of the dataset, where harvested formatting is intact
      * @param value The value of 'descriptionFormatted'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setDescriptionFormatted(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[8], value);
      this.descriptionFormattedBuilder = null;
      this.descriptionFormatted = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'descriptionFormatted' field has been set.
      * Multilingual description of the dataset, where harvested formatting is intact
      * @return True if the 'descriptionFormatted' field has been set, false otherwise.
      */
    public boolean hasDescriptionFormatted() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'descriptionFormatted' field and creates one if it doesn't exist yet.
     * Multilingual description of the dataset, where harvested formatting is intact
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getDescriptionFormattedBuilder() {
      if (descriptionFormattedBuilder == null) {
        if (hasDescriptionFormatted()) {
          setDescriptionFormattedBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(descriptionFormatted));
        } else {
          setDescriptionFormattedBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return descriptionFormattedBuilder;
    }

    /**
     * Sets the Builder instance for the 'descriptionFormatted' field
     * Multilingual description of the dataset, where harvested formatting is intact
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setDescriptionFormattedBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearDescriptionFormatted();
      descriptionFormattedBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'descriptionFormatted' field has an active Builder instance
     * Multilingual description of the dataset, where harvested formatting is intact
     * @return True if the 'descriptionFormatted' field has an active Builder instance
     */
    public boolean hasDescriptionFormattedBuilder() {
      return descriptionFormattedBuilder != null;
    }

    /**
      * Clears the value of the 'descriptionFormatted' field.
      * Multilingual description of the dataset, where harvested formatting is intact
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearDescriptionFormatted() {
      descriptionFormatted = null;
      descriptionFormattedBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'publisher' field.
      * Publisher information
      * @return The value.
      */
    public no.digdir.fdk.model.Publisher getPublisher() {
      return publisher;
    }


    /**
      * Sets the value of the 'publisher' field.
      * Publisher information
      * @param value The value of 'publisher'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setPublisher(no.digdir.fdk.model.Publisher value) {
      validate(fields()[9], value);
      this.publisherBuilder = null;
      this.publisher = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'publisher' field has been set.
      * Publisher information
      * @return True if the 'publisher' field has been set, false otherwise.
      */
    public boolean hasPublisher() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'publisher' field and creates one if it doesn't exist yet.
     * Publisher information
     * @return This builder.
     */
    public no.digdir.fdk.model.Publisher.Builder getPublisherBuilder() {
      if (publisherBuilder == null) {
        if (hasPublisher()) {
          setPublisherBuilder(no.digdir.fdk.model.Publisher.newBuilder(publisher));
        } else {
          setPublisherBuilder(no.digdir.fdk.model.Publisher.newBuilder());
        }
      }
      return publisherBuilder;
    }

    /**
     * Sets the Builder instance for the 'publisher' field
     * Publisher information
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setPublisherBuilder(no.digdir.fdk.model.Publisher.Builder value) {
      clearPublisher();
      publisherBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'publisher' field has an active Builder instance
     * Publisher information
     * @return True if the 'publisher' field has an active Builder instance
     */
    public boolean hasPublisherBuilder() {
      return publisherBuilder != null;
    }

    /**
      * Clears the value of the 'publisher' field.
      * Publisher information
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearPublisher() {
      publisher = null;
      publisherBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'distribution' field.
      * List of distributions for the dataset
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.dataset.Distribution> getDistribution() {
      return distribution;
    }


    /**
      * Sets the value of the 'distribution' field.
      * List of distributions for the dataset
      * @param value The value of 'distribution'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setDistribution(java.util.List<no.digdir.fdk.model.dataset.Distribution> value) {
      validate(fields()[10], value);
      this.distribution = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'distribution' field has been set.
      * List of distributions for the dataset
      * @return True if the 'distribution' field has been set, false otherwise.
      */
    public boolean hasDistribution() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'distribution' field.
      * List of distributions for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearDistribution() {
      distribution = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'sample' field.
      * List of sample distributions for the dataset
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.dataset.Distribution> getSample() {
      return sample;
    }


    /**
      * Sets the value of the 'sample' field.
      * List of sample distributions for the dataset
      * @param value The value of 'sample'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setSample(java.util.List<no.digdir.fdk.model.dataset.Distribution> value) {
      validate(fields()[11], value);
      this.sample = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'sample' field has been set.
      * List of sample distributions for the dataset
      * @return True if the 'sample' field has been set, false otherwise.
      */
    public boolean hasSample() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'sample' field.
      * List of sample distributions for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearSample() {
      sample = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'themeUris' field.
      * List of theme URIs for the dataset
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getThemeUris() {
      return themeUris;
    }


    /**
      * Sets the value of the 'themeUris' field.
      * List of theme URIs for the dataset
      * @param value The value of 'themeUris'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setThemeUris(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[12], value);
      this.themeUris = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'themeUris' field has been set.
      * List of theme URIs for the dataset
      * @return True if the 'themeUris' field has been set, false otherwise.
      */
    public boolean hasThemeUris() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'themeUris' field.
      * List of theme URIs for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearThemeUris() {
      themeUris = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'theme' field.
      * List of EU data themes for the dataset
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.EuDataTheme> getTheme() {
      return theme;
    }


    /**
      * Sets the value of the 'theme' field.
      * List of EU data themes for the dataset
      * @param value The value of 'theme'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setTheme(java.util.List<no.digdir.fdk.model.EuDataTheme> value) {
      validate(fields()[13], value);
      this.theme = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'theme' field has been set.
      * List of EU data themes for the dataset
      * @return True if the 'theme' field has been set, false otherwise.
      */
    public boolean hasTheme() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'theme' field.
      * List of EU data themes for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearTheme() {
      theme = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'losTheme' field.
      * List of LOS themes for the dataset
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.LosNode> getLosTheme() {
      return losTheme;
    }


    /**
      * Sets the value of the 'losTheme' field.
      * List of LOS themes for the dataset
      * @param value The value of 'losTheme'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setLosTheme(java.util.List<no.digdir.fdk.model.LosNode> value) {
      validate(fields()[14], value);
      this.losTheme = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'losTheme' field has been set.
      * List of LOS themes for the dataset
      * @return True if the 'losTheme' field has been set, false otherwise.
      */
    public boolean hasLosTheme() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'losTheme' field.
      * List of LOS themes for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearLosTheme() {
      losTheme = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'eurovocThemes' field.
      * List of EUROVOC themes for the dataset
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.Eurovoc> getEurovocThemes() {
      return eurovocThemes;
    }


    /**
      * Sets the value of the 'eurovocThemes' field.
      * List of EUROVOC themes for the dataset
      * @param value The value of 'eurovocThemes'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setEurovocThemes(java.util.List<no.digdir.fdk.model.Eurovoc> value) {
      validate(fields()[15], value);
      this.eurovocThemes = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'eurovocThemes' field has been set.
      * List of EUROVOC themes for the dataset
      * @return True if the 'eurovocThemes' field has been set, false otherwise.
      */
    public boolean hasEurovocThemes() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'eurovocThemes' field.
      * List of EUROVOC themes for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearEurovocThemes() {
      eurovocThemes = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'keyword' field.
      * List of keywords for the dataset
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.LocalizedStrings> getKeyword() {
      return keyword;
    }


    /**
      * Sets the value of the 'keyword' field.
      * List of keywords for the dataset
      * @param value The value of 'keyword'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setKeyword(java.util.List<no.digdir.fdk.model.LocalizedStrings> value) {
      validate(fields()[16], value);
      this.keyword = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'keyword' field has been set.
      * List of keywords for the dataset
      * @return True if the 'keyword' field has been set, false otherwise.
      */
    public boolean hasKeyword() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'keyword' field.
      * List of keywords for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearKeyword() {
      keyword = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'issued' field.
      * Date when the dataset was issued, format: 'YYYY-MM-DD'
      * @return The value.
      */
    public java.lang.CharSequence getIssued() {
      return issued;
    }


    /**
      * Sets the value of the 'issued' field.
      * Date when the dataset was issued, format: 'YYYY-MM-DD'
      * @param value The value of 'issued'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setIssued(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.issued = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'issued' field has been set.
      * Date when the dataset was issued, format: 'YYYY-MM-DD'
      * @return True if the 'issued' field has been set, false otherwise.
      */
    public boolean hasIssued() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'issued' field.
      * Date when the dataset was issued, format: 'YYYY-MM-DD'
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearIssued() {
      issued = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'modified' field.
      * Date when the dataset was last modified, format: 'YYYY-MM-DD'
      * @return The value.
      */
    public java.lang.CharSequence getModified() {
      return modified;
    }


    /**
      * Sets the value of the 'modified' field.
      * Date when the dataset was last modified, format: 'YYYY-MM-DD'
      * @param value The value of 'modified'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setModified(java.lang.CharSequence value) {
      validate(fields()[18], value);
      this.modified = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'modified' field has been set.
      * Date when the dataset was last modified, format: 'YYYY-MM-DD'
      * @return True if the 'modified' field has been set, false otherwise.
      */
    public boolean hasModified() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'modified' field.
      * Date when the dataset was last modified, format: 'YYYY-MM-DD'
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearModified() {
      modified = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'dctType' field.
      * Type of dataset
      * @return The value.
      */
    public no.digdir.fdk.model.ReferenceDataCode getDctType() {
      return dctType;
    }


    /**
      * Sets the value of the 'dctType' field.
      * Type of dataset
      * @param value The value of 'dctType'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setDctType(no.digdir.fdk.model.ReferenceDataCode value) {
      validate(fields()[19], value);
      this.dctTypeBuilder = null;
      this.dctType = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'dctType' field has been set.
      * Type of dataset
      * @return True if the 'dctType' field has been set, false otherwise.
      */
    public boolean hasDctType() {
      return fieldSetFlags()[19];
    }

    /**
     * Gets the Builder instance for the 'dctType' field and creates one if it doesn't exist yet.
     * Type of dataset
     * @return This builder.
     */
    public no.digdir.fdk.model.ReferenceDataCode.Builder getDctTypeBuilder() {
      if (dctTypeBuilder == null) {
        if (hasDctType()) {
          setDctTypeBuilder(no.digdir.fdk.model.ReferenceDataCode.newBuilder(dctType));
        } else {
          setDctTypeBuilder(no.digdir.fdk.model.ReferenceDataCode.newBuilder());
        }
      }
      return dctTypeBuilder;
    }

    /**
     * Sets the Builder instance for the 'dctType' field
     * Type of dataset
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setDctTypeBuilder(no.digdir.fdk.model.ReferenceDataCode.Builder value) {
      clearDctType();
      dctTypeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'dctType' field has an active Builder instance
     * Type of dataset
     * @return True if the 'dctType' field has an active Builder instance
     */
    public boolean hasDctTypeBuilder() {
      return dctTypeBuilder != null;
    }

    /**
      * Clears the value of the 'dctType' field.
      * Type of dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearDctType() {
      dctType = null;
      dctTypeBuilder = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'accessRights' field.
      * Access rights for the dataset
      * @return The value.
      */
    public no.digdir.fdk.model.ReferenceDataCode getAccessRights() {
      return accessRights;
    }


    /**
      * Sets the value of the 'accessRights' field.
      * Access rights for the dataset
      * @param value The value of 'accessRights'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setAccessRights(no.digdir.fdk.model.ReferenceDataCode value) {
      validate(fields()[20], value);
      this.accessRightsBuilder = null;
      this.accessRights = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'accessRights' field has been set.
      * Access rights for the dataset
      * @return True if the 'accessRights' field has been set, false otherwise.
      */
    public boolean hasAccessRights() {
      return fieldSetFlags()[20];
    }

    /**
     * Gets the Builder instance for the 'accessRights' field and creates one if it doesn't exist yet.
     * Access rights for the dataset
     * @return This builder.
     */
    public no.digdir.fdk.model.ReferenceDataCode.Builder getAccessRightsBuilder() {
      if (accessRightsBuilder == null) {
        if (hasAccessRights()) {
          setAccessRightsBuilder(no.digdir.fdk.model.ReferenceDataCode.newBuilder(accessRights));
        } else {
          setAccessRightsBuilder(no.digdir.fdk.model.ReferenceDataCode.newBuilder());
        }
      }
      return accessRightsBuilder;
    }

    /**
     * Sets the Builder instance for the 'accessRights' field
     * Access rights for the dataset
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setAccessRightsBuilder(no.digdir.fdk.model.ReferenceDataCode.Builder value) {
      clearAccessRights();
      accessRightsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'accessRights' field has an active Builder instance
     * Access rights for the dataset
     * @return True if the 'accessRights' field has an active Builder instance
     */
    public boolean hasAccessRightsBuilder() {
      return accessRightsBuilder != null;
    }

    /**
      * Clears the value of the 'accessRights' field.
      * Access rights for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearAccessRights() {
      accessRights = null;
      accessRightsBuilder = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'language' field.
      * Languages the dataset is available in
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.ReferenceDataCode> getLanguage() {
      return language;
    }


    /**
      * Sets the value of the 'language' field.
      * Languages the dataset is available in
      * @param value The value of 'language'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setLanguage(java.util.List<no.digdir.fdk.model.ReferenceDataCode> value) {
      validate(fields()[21], value);
      this.language = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'language' field has been set.
      * Languages the dataset is available in
      * @return True if the 'language' field has been set, false otherwise.
      */
    public boolean hasLanguage() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'language' field.
      * Languages the dataset is available in
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearLanguage() {
      language = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'page' field.
      * Pages or documents that describes the dataset
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getPage() {
      return page;
    }


    /**
      * Sets the value of the 'page' field.
      * Pages or documents that describes the dataset
      * @param value The value of 'page'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setPage(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[22], value);
      this.page = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'page' field has been set.
      * Pages or documents that describes the dataset
      * @return True if the 'page' field has been set, false otherwise.
      */
    public boolean hasPage() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'page' field.
      * Pages or documents that describes the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearPage() {
      page = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'landingPage' field.
      * List of landing pages for the dataset
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getLandingPage() {
      return landingPage;
    }


    /**
      * Sets the value of the 'landingPage' field.
      * List of landing pages for the dataset
      * @param value The value of 'landingPage'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setLandingPage(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[23], value);
      this.landingPage = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'landingPage' field has been set.
      * List of landing pages for the dataset
      * @return True if the 'landingPage' field has been set, false otherwise.
      */
    public boolean hasLandingPage() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'landingPage' field.
      * List of landing pages for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearLandingPage() {
      landingPage = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'temporal' field.
      * Publisher information
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.Temporal> getTemporal() {
      return temporal;
    }


    /**
      * Sets the value of the 'temporal' field.
      * Publisher information
      * @param value The value of 'temporal'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setTemporal(java.util.List<no.digdir.fdk.model.Temporal> value) {
      validate(fields()[24], value);
      this.temporal = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'temporal' field has been set.
      * Publisher information
      * @return True if the 'temporal' field has been set, false otherwise.
      */
    public boolean hasTemporal() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'temporal' field.
      * Publisher information
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearTemporal() {
      temporal = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * Dataset subject information
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.dataset.Subject> getSubject() {
      return subject;
    }


    /**
      * Sets the value of the 'subject' field.
      * Dataset subject information
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setSubject(java.util.List<no.digdir.fdk.model.dataset.Subject> value) {
      validate(fields()[25], value);
      this.subject = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * Dataset subject information
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'subject' field.
      * Dataset subject information
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'spatial' field.
      * Dataset spatial information
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.ReferenceDataCode> getSpatial() {
      return spatial;
    }


    /**
      * Sets the value of the 'spatial' field.
      * Dataset spatial information
      * @param value The value of 'spatial'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setSpatial(java.util.List<no.digdir.fdk.model.ReferenceDataCode> value) {
      validate(fields()[26], value);
      this.spatial = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'spatial' field has been set.
      * Dataset spatial information
      * @return True if the 'spatial' field has been set, false otherwise.
      */
    public boolean hasSpatial() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'spatial' field.
      * Dataset spatial information
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearSpatial() {
      spatial = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'provenance' field.
      * Provenance for the dataset
      * @return The value.
      */
    public no.digdir.fdk.model.ReferenceDataCode getProvenance() {
      return provenance;
    }


    /**
      * Sets the value of the 'provenance' field.
      * Provenance for the dataset
      * @param value The value of 'provenance'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setProvenance(no.digdir.fdk.model.ReferenceDataCode value) {
      validate(fields()[27], value);
      this.provenanceBuilder = null;
      this.provenance = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'provenance' field has been set.
      * Provenance for the dataset
      * @return True if the 'provenance' field has been set, false otherwise.
      */
    public boolean hasProvenance() {
      return fieldSetFlags()[27];
    }

    /**
     * Gets the Builder instance for the 'provenance' field and creates one if it doesn't exist yet.
     * Provenance for the dataset
     * @return This builder.
     */
    public no.digdir.fdk.model.ReferenceDataCode.Builder getProvenanceBuilder() {
      if (provenanceBuilder == null) {
        if (hasProvenance()) {
          setProvenanceBuilder(no.digdir.fdk.model.ReferenceDataCode.newBuilder(provenance));
        } else {
          setProvenanceBuilder(no.digdir.fdk.model.ReferenceDataCode.newBuilder());
        }
      }
      return provenanceBuilder;
    }

    /**
     * Sets the Builder instance for the 'provenance' field
     * Provenance for the dataset
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setProvenanceBuilder(no.digdir.fdk.model.ReferenceDataCode.Builder value) {
      clearProvenance();
      provenanceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'provenance' field has an active Builder instance
     * Provenance for the dataset
     * @return True if the 'provenance' field has an active Builder instance
     */
    public boolean hasProvenanceBuilder() {
      return provenanceBuilder != null;
    }

    /**
      * Clears the value of the 'provenance' field.
      * Provenance for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearProvenance() {
      provenance = null;
      provenanceBuilder = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'accrualPeriodicity' field.
      * Frequency of updates for the dataset
      * @return The value.
      */
    public no.digdir.fdk.model.ReferenceDataCode getAccrualPeriodicity() {
      return accrualPeriodicity;
    }


    /**
      * Sets the value of the 'accrualPeriodicity' field.
      * Frequency of updates for the dataset
      * @param value The value of 'accrualPeriodicity'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setAccrualPeriodicity(no.digdir.fdk.model.ReferenceDataCode value) {
      validate(fields()[28], value);
      this.accrualPeriodicityBuilder = null;
      this.accrualPeriodicity = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'accrualPeriodicity' field has been set.
      * Frequency of updates for the dataset
      * @return True if the 'accrualPeriodicity' field has been set, false otherwise.
      */
    public boolean hasAccrualPeriodicity() {
      return fieldSetFlags()[28];
    }

    /**
     * Gets the Builder instance for the 'accrualPeriodicity' field and creates one if it doesn't exist yet.
     * Frequency of updates for the dataset
     * @return This builder.
     */
    public no.digdir.fdk.model.ReferenceDataCode.Builder getAccrualPeriodicityBuilder() {
      if (accrualPeriodicityBuilder == null) {
        if (hasAccrualPeriodicity()) {
          setAccrualPeriodicityBuilder(no.digdir.fdk.model.ReferenceDataCode.newBuilder(accrualPeriodicity));
        } else {
          setAccrualPeriodicityBuilder(no.digdir.fdk.model.ReferenceDataCode.newBuilder());
        }
      }
      return accrualPeriodicityBuilder;
    }

    /**
     * Sets the Builder instance for the 'accrualPeriodicity' field
     * Frequency of updates for the dataset
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setAccrualPeriodicityBuilder(no.digdir.fdk.model.ReferenceDataCode.Builder value) {
      clearAccrualPeriodicity();
      accrualPeriodicityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'accrualPeriodicity' field has an active Builder instance
     * Frequency of updates for the dataset
     * @return True if the 'accrualPeriodicity' field has an active Builder instance
     */
    public boolean hasAccrualPeriodicityBuilder() {
      return accrualPeriodicityBuilder != null;
    }

    /**
      * Clears the value of the 'accrualPeriodicity' field.
      * Frequency of updates for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearAccrualPeriodicity() {
      accrualPeriodicity = null;
      accrualPeriodicityBuilder = null;
      fieldSetFlags()[28] = false;
      return this;
    }

    /**
      * Gets the value of the 'legalBasisForRestriction' field.
      * Restriction rules for the dataset
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getLegalBasisForRestriction() {
      return legalBasisForRestriction;
    }


    /**
      * Sets the value of the 'legalBasisForRestriction' field.
      * Restriction rules for the dataset
      * @param value The value of 'legalBasisForRestriction'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setLegalBasisForRestriction(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
      validate(fields()[29], value);
      this.legalBasisForRestriction = value;
      fieldSetFlags()[29] = true;
      return this;
    }

    /**
      * Checks whether the 'legalBasisForRestriction' field has been set.
      * Restriction rules for the dataset
      * @return True if the 'legalBasisForRestriction' field has been set, false otherwise.
      */
    public boolean hasLegalBasisForRestriction() {
      return fieldSetFlags()[29];
    }


    /**
      * Clears the value of the 'legalBasisForRestriction' field.
      * Restriction rules for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearLegalBasisForRestriction() {
      legalBasisForRestriction = null;
      fieldSetFlags()[29] = false;
      return this;
    }

    /**
      * Gets the value of the 'legalBasisForProcessing' field.
      * Processing rules for the dataset
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getLegalBasisForProcessing() {
      return legalBasisForProcessing;
    }


    /**
      * Sets the value of the 'legalBasisForProcessing' field.
      * Processing rules for the dataset
      * @param value The value of 'legalBasisForProcessing'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setLegalBasisForProcessing(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
      validate(fields()[30], value);
      this.legalBasisForProcessing = value;
      fieldSetFlags()[30] = true;
      return this;
    }

    /**
      * Checks whether the 'legalBasisForProcessing' field has been set.
      * Processing rules for the dataset
      * @return True if the 'legalBasisForProcessing' field has been set, false otherwise.
      */
    public boolean hasLegalBasisForProcessing() {
      return fieldSetFlags()[30];
    }


    /**
      * Clears the value of the 'legalBasisForProcessing' field.
      * Processing rules for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearLegalBasisForProcessing() {
      legalBasisForProcessing = null;
      fieldSetFlags()[30] = false;
      return this;
    }

    /**
      * Gets the value of the 'legalBasisForAccess' field.
      * Access rules for the dataset
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getLegalBasisForAccess() {
      return legalBasisForAccess;
    }


    /**
      * Sets the value of the 'legalBasisForAccess' field.
      * Access rules for the dataset
      * @param value The value of 'legalBasisForAccess'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setLegalBasisForAccess(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
      validate(fields()[31], value);
      this.legalBasisForAccess = value;
      fieldSetFlags()[31] = true;
      return this;
    }

    /**
      * Checks whether the 'legalBasisForAccess' field has been set.
      * Access rules for the dataset
      * @return True if the 'legalBasisForAccess' field has been set, false otherwise.
      */
    public boolean hasLegalBasisForAccess() {
      return fieldSetFlags()[31];
    }


    /**
      * Clears the value of the 'legalBasisForAccess' field.
      * Access rules for the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearLegalBasisForAccess() {
      legalBasisForAccess = null;
      fieldSetFlags()[31] = false;
      return this;
    }

    /**
      * Gets the value of the 'conformsTo' field.
      * Established schemas to which the dataset conforms
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.UriWithLabel> getConformsTo() {
      return conformsTo;
    }


    /**
      * Sets the value of the 'conformsTo' field.
      * Established schemas to which the dataset conforms
      * @param value The value of 'conformsTo'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setConformsTo(java.util.List<no.digdir.fdk.model.UriWithLabel> value) {
      validate(fields()[32], value);
      this.conformsTo = value;
      fieldSetFlags()[32] = true;
      return this;
    }

    /**
      * Checks whether the 'conformsTo' field has been set.
      * Established schemas to which the dataset conforms
      * @return True if the 'conformsTo' field has been set, false otherwise.
      */
    public boolean hasConformsTo() {
      return fieldSetFlags()[32];
    }


    /**
      * Clears the value of the 'conformsTo' field.
      * Established schemas to which the dataset conforms
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearConformsTo() {
      conformsTo = null;
      fieldSetFlags()[32] = false;
      return this;
    }

    /**
      * Gets the value of the 'informationModel' field.
      * Information models to which the dataset conforms
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getInformationModel() {
      return informationModel;
    }


    /**
      * Sets the value of the 'informationModel' field.
      * Information models to which the dataset conforms
      * @param value The value of 'informationModel'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setInformationModel(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
      validate(fields()[33], value);
      this.informationModel = value;
      fieldSetFlags()[33] = true;
      return this;
    }

    /**
      * Checks whether the 'informationModel' field has been set.
      * Information models to which the dataset conforms
      * @return True if the 'informationModel' field has been set, false otherwise.
      */
    public boolean hasInformationModel() {
      return fieldSetFlags()[33];
    }


    /**
      * Clears the value of the 'informationModel' field.
      * Information models to which the dataset conforms
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearInformationModel() {
      informationModel = null;
      fieldSetFlags()[33] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasAccuracyAnnotation' field.
      * Quality annotation about dataset accuracy
      * @return The value.
      */
    public no.digdir.fdk.model.dataset.QualityAnnotation getHasAccuracyAnnotation() {
      return hasAccuracyAnnotation;
    }


    /**
      * Sets the value of the 'hasAccuracyAnnotation' field.
      * Quality annotation about dataset accuracy
      * @param value The value of 'hasAccuracyAnnotation'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setHasAccuracyAnnotation(no.digdir.fdk.model.dataset.QualityAnnotation value) {
      validate(fields()[34], value);
      this.hasAccuracyAnnotationBuilder = null;
      this.hasAccuracyAnnotation = value;
      fieldSetFlags()[34] = true;
      return this;
    }

    /**
      * Checks whether the 'hasAccuracyAnnotation' field has been set.
      * Quality annotation about dataset accuracy
      * @return True if the 'hasAccuracyAnnotation' field has been set, false otherwise.
      */
    public boolean hasHasAccuracyAnnotation() {
      return fieldSetFlags()[34];
    }

    /**
     * Gets the Builder instance for the 'hasAccuracyAnnotation' field and creates one if it doesn't exist yet.
     * Quality annotation about dataset accuracy
     * @return This builder.
     */
    public no.digdir.fdk.model.dataset.QualityAnnotation.Builder getHasAccuracyAnnotationBuilder() {
      if (hasAccuracyAnnotationBuilder == null) {
        if (hasHasAccuracyAnnotation()) {
          setHasAccuracyAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder(hasAccuracyAnnotation));
        } else {
          setHasAccuracyAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder());
        }
      }
      return hasAccuracyAnnotationBuilder;
    }

    /**
     * Sets the Builder instance for the 'hasAccuracyAnnotation' field
     * Quality annotation about dataset accuracy
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setHasAccuracyAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.Builder value) {
      clearHasAccuracyAnnotation();
      hasAccuracyAnnotationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'hasAccuracyAnnotation' field has an active Builder instance
     * Quality annotation about dataset accuracy
     * @return True if the 'hasAccuracyAnnotation' field has an active Builder instance
     */
    public boolean hasHasAccuracyAnnotationBuilder() {
      return hasAccuracyAnnotationBuilder != null;
    }

    /**
      * Clears the value of the 'hasAccuracyAnnotation' field.
      * Quality annotation about dataset accuracy
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearHasAccuracyAnnotation() {
      hasAccuracyAnnotation = null;
      hasAccuracyAnnotationBuilder = null;
      fieldSetFlags()[34] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasCompletenessAnnotation' field.
      * Quality annotation about dataset completeness
      * @return The value.
      */
    public no.digdir.fdk.model.dataset.QualityAnnotation getHasCompletenessAnnotation() {
      return hasCompletenessAnnotation;
    }


    /**
      * Sets the value of the 'hasCompletenessAnnotation' field.
      * Quality annotation about dataset completeness
      * @param value The value of 'hasCompletenessAnnotation'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setHasCompletenessAnnotation(no.digdir.fdk.model.dataset.QualityAnnotation value) {
      validate(fields()[35], value);
      this.hasCompletenessAnnotationBuilder = null;
      this.hasCompletenessAnnotation = value;
      fieldSetFlags()[35] = true;
      return this;
    }

    /**
      * Checks whether the 'hasCompletenessAnnotation' field has been set.
      * Quality annotation about dataset completeness
      * @return True if the 'hasCompletenessAnnotation' field has been set, false otherwise.
      */
    public boolean hasHasCompletenessAnnotation() {
      return fieldSetFlags()[35];
    }

    /**
     * Gets the Builder instance for the 'hasCompletenessAnnotation' field and creates one if it doesn't exist yet.
     * Quality annotation about dataset completeness
     * @return This builder.
     */
    public no.digdir.fdk.model.dataset.QualityAnnotation.Builder getHasCompletenessAnnotationBuilder() {
      if (hasCompletenessAnnotationBuilder == null) {
        if (hasHasCompletenessAnnotation()) {
          setHasCompletenessAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder(hasCompletenessAnnotation));
        } else {
          setHasCompletenessAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder());
        }
      }
      return hasCompletenessAnnotationBuilder;
    }

    /**
     * Sets the Builder instance for the 'hasCompletenessAnnotation' field
     * Quality annotation about dataset completeness
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setHasCompletenessAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.Builder value) {
      clearHasCompletenessAnnotation();
      hasCompletenessAnnotationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'hasCompletenessAnnotation' field has an active Builder instance
     * Quality annotation about dataset completeness
     * @return True if the 'hasCompletenessAnnotation' field has an active Builder instance
     */
    public boolean hasHasCompletenessAnnotationBuilder() {
      return hasCompletenessAnnotationBuilder != null;
    }

    /**
      * Clears the value of the 'hasCompletenessAnnotation' field.
      * Quality annotation about dataset completeness
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearHasCompletenessAnnotation() {
      hasCompletenessAnnotation = null;
      hasCompletenessAnnotationBuilder = null;
      fieldSetFlags()[35] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasCurrentnessAnnotation' field.
      * Quality annotation about dataset currentness
      * @return The value.
      */
    public no.digdir.fdk.model.dataset.QualityAnnotation getHasCurrentnessAnnotation() {
      return hasCurrentnessAnnotation;
    }


    /**
      * Sets the value of the 'hasCurrentnessAnnotation' field.
      * Quality annotation about dataset currentness
      * @param value The value of 'hasCurrentnessAnnotation'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setHasCurrentnessAnnotation(no.digdir.fdk.model.dataset.QualityAnnotation value) {
      validate(fields()[36], value);
      this.hasCurrentnessAnnotationBuilder = null;
      this.hasCurrentnessAnnotation = value;
      fieldSetFlags()[36] = true;
      return this;
    }

    /**
      * Checks whether the 'hasCurrentnessAnnotation' field has been set.
      * Quality annotation about dataset currentness
      * @return True if the 'hasCurrentnessAnnotation' field has been set, false otherwise.
      */
    public boolean hasHasCurrentnessAnnotation() {
      return fieldSetFlags()[36];
    }

    /**
     * Gets the Builder instance for the 'hasCurrentnessAnnotation' field and creates one if it doesn't exist yet.
     * Quality annotation about dataset currentness
     * @return This builder.
     */
    public no.digdir.fdk.model.dataset.QualityAnnotation.Builder getHasCurrentnessAnnotationBuilder() {
      if (hasCurrentnessAnnotationBuilder == null) {
        if (hasHasCurrentnessAnnotation()) {
          setHasCurrentnessAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder(hasCurrentnessAnnotation));
        } else {
          setHasCurrentnessAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder());
        }
      }
      return hasCurrentnessAnnotationBuilder;
    }

    /**
     * Sets the Builder instance for the 'hasCurrentnessAnnotation' field
     * Quality annotation about dataset currentness
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setHasCurrentnessAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.Builder value) {
      clearHasCurrentnessAnnotation();
      hasCurrentnessAnnotationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'hasCurrentnessAnnotation' field has an active Builder instance
     * Quality annotation about dataset currentness
     * @return True if the 'hasCurrentnessAnnotation' field has an active Builder instance
     */
    public boolean hasHasCurrentnessAnnotationBuilder() {
      return hasCurrentnessAnnotationBuilder != null;
    }

    /**
      * Clears the value of the 'hasCurrentnessAnnotation' field.
      * Quality annotation about dataset currentness
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearHasCurrentnessAnnotation() {
      hasCurrentnessAnnotation = null;
      hasCurrentnessAnnotationBuilder = null;
      fieldSetFlags()[36] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasAvailabilityAnnotation' field.
      * Quality annotation about dataset availability
      * @return The value.
      */
    public no.digdir.fdk.model.dataset.QualityAnnotation getHasAvailabilityAnnotation() {
      return hasAvailabilityAnnotation;
    }


    /**
      * Sets the value of the 'hasAvailabilityAnnotation' field.
      * Quality annotation about dataset availability
      * @param value The value of 'hasAvailabilityAnnotation'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setHasAvailabilityAnnotation(no.digdir.fdk.model.dataset.QualityAnnotation value) {
      validate(fields()[37], value);
      this.hasAvailabilityAnnotationBuilder = null;
      this.hasAvailabilityAnnotation = value;
      fieldSetFlags()[37] = true;
      return this;
    }

    /**
      * Checks whether the 'hasAvailabilityAnnotation' field has been set.
      * Quality annotation about dataset availability
      * @return True if the 'hasAvailabilityAnnotation' field has been set, false otherwise.
      */
    public boolean hasHasAvailabilityAnnotation() {
      return fieldSetFlags()[37];
    }

    /**
     * Gets the Builder instance for the 'hasAvailabilityAnnotation' field and creates one if it doesn't exist yet.
     * Quality annotation about dataset availability
     * @return This builder.
     */
    public no.digdir.fdk.model.dataset.QualityAnnotation.Builder getHasAvailabilityAnnotationBuilder() {
      if (hasAvailabilityAnnotationBuilder == null) {
        if (hasHasAvailabilityAnnotation()) {
          setHasAvailabilityAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder(hasAvailabilityAnnotation));
        } else {
          setHasAvailabilityAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder());
        }
      }
      return hasAvailabilityAnnotationBuilder;
    }

    /**
     * Sets the Builder instance for the 'hasAvailabilityAnnotation' field
     * Quality annotation about dataset availability
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setHasAvailabilityAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.Builder value) {
      clearHasAvailabilityAnnotation();
      hasAvailabilityAnnotationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'hasAvailabilityAnnotation' field has an active Builder instance
     * Quality annotation about dataset availability
     * @return True if the 'hasAvailabilityAnnotation' field has an active Builder instance
     */
    public boolean hasHasAvailabilityAnnotationBuilder() {
      return hasAvailabilityAnnotationBuilder != null;
    }

    /**
      * Clears the value of the 'hasAvailabilityAnnotation' field.
      * Quality annotation about dataset availability
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearHasAvailabilityAnnotation() {
      hasAvailabilityAnnotation = null;
      hasAvailabilityAnnotationBuilder = null;
      fieldSetFlags()[37] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasRelevanceAnnotation' field.
      * Quality annotation about dataset relevance
      * @return The value.
      */
    public no.digdir.fdk.model.dataset.QualityAnnotation getHasRelevanceAnnotation() {
      return hasRelevanceAnnotation;
    }


    /**
      * Sets the value of the 'hasRelevanceAnnotation' field.
      * Quality annotation about dataset relevance
      * @param value The value of 'hasRelevanceAnnotation'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setHasRelevanceAnnotation(no.digdir.fdk.model.dataset.QualityAnnotation value) {
      validate(fields()[38], value);
      this.hasRelevanceAnnotationBuilder = null;
      this.hasRelevanceAnnotation = value;
      fieldSetFlags()[38] = true;
      return this;
    }

    /**
      * Checks whether the 'hasRelevanceAnnotation' field has been set.
      * Quality annotation about dataset relevance
      * @return True if the 'hasRelevanceAnnotation' field has been set, false otherwise.
      */
    public boolean hasHasRelevanceAnnotation() {
      return fieldSetFlags()[38];
    }

    /**
     * Gets the Builder instance for the 'hasRelevanceAnnotation' field and creates one if it doesn't exist yet.
     * Quality annotation about dataset relevance
     * @return This builder.
     */
    public no.digdir.fdk.model.dataset.QualityAnnotation.Builder getHasRelevanceAnnotationBuilder() {
      if (hasRelevanceAnnotationBuilder == null) {
        if (hasHasRelevanceAnnotation()) {
          setHasRelevanceAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder(hasRelevanceAnnotation));
        } else {
          setHasRelevanceAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.newBuilder());
        }
      }
      return hasRelevanceAnnotationBuilder;
    }

    /**
     * Sets the Builder instance for the 'hasRelevanceAnnotation' field
     * Quality annotation about dataset relevance
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setHasRelevanceAnnotationBuilder(no.digdir.fdk.model.dataset.QualityAnnotation.Builder value) {
      clearHasRelevanceAnnotation();
      hasRelevanceAnnotationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'hasRelevanceAnnotation' field has an active Builder instance
     * Quality annotation about dataset relevance
     * @return True if the 'hasRelevanceAnnotation' field has an active Builder instance
     */
    public boolean hasHasRelevanceAnnotationBuilder() {
      return hasRelevanceAnnotationBuilder != null;
    }

    /**
      * Clears the value of the 'hasRelevanceAnnotation' field.
      * Quality annotation about dataset relevance
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearHasRelevanceAnnotation() {
      hasRelevanceAnnotation = null;
      hasRelevanceAnnotationBuilder = null;
      fieldSetFlags()[38] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualifiedAttributions' field.
      * Qualified attributions of the dataset
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution> getQualifiedAttributions() {
      return qualifiedAttributions;
    }


    /**
      * Sets the value of the 'qualifiedAttributions' field.
      * Qualified attributions of the dataset
      * @param value The value of 'qualifiedAttributions'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setQualifiedAttributions(java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution> value) {
      validate(fields()[39], value);
      this.qualifiedAttributions = value;
      fieldSetFlags()[39] = true;
      return this;
    }

    /**
      * Checks whether the 'qualifiedAttributions' field has been set.
      * Qualified attributions of the dataset
      * @return True if the 'qualifiedAttributions' field has been set, false otherwise.
      */
    public boolean hasQualifiedAttributions() {
      return fieldSetFlags()[39];
    }


    /**
      * Clears the value of the 'qualifiedAttributions' field.
      * Qualified attributions of the dataset
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearQualifiedAttributions() {
      qualifiedAttributions = null;
      fieldSetFlags()[39] = false;
      return this;
    }

    /**
      * Gets the value of the 'isOpenData' field.
      * Dataset is open data
      * @return The value.
      */
    public boolean getIsOpenData() {
      return isOpenData;
    }


    /**
      * Sets the value of the 'isOpenData' field.
      * Dataset is open data
      * @param value The value of 'isOpenData'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setIsOpenData(boolean value) {
      validate(fields()[40], value);
      this.isOpenData = value;
      fieldSetFlags()[40] = true;
      return this;
    }

    /**
      * Checks whether the 'isOpenData' field has been set.
      * Dataset is open data
      * @return True if the 'isOpenData' field has been set, false otherwise.
      */
    public boolean hasIsOpenData() {
      return fieldSetFlags()[40];
    }


    /**
      * Clears the value of the 'isOpenData' field.
      * Dataset is open data
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearIsOpenData() {
      fieldSetFlags()[40] = false;
      return this;
    }

    /**
      * Gets the value of the 'isAuthoritative' field.
      * Dataset is authoritative
      * @return The value.
      */
    public boolean getIsAuthoritative() {
      return isAuthoritative;
    }


    /**
      * Sets the value of the 'isAuthoritative' field.
      * Dataset is authoritative
      * @param value The value of 'isAuthoritative'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setIsAuthoritative(boolean value) {
      validate(fields()[41], value);
      this.isAuthoritative = value;
      fieldSetFlags()[41] = true;
      return this;
    }

    /**
      * Checks whether the 'isAuthoritative' field has been set.
      * Dataset is authoritative
      * @return True if the 'isAuthoritative' field has been set, false otherwise.
      */
    public boolean hasIsAuthoritative() {
      return fieldSetFlags()[41];
    }


    /**
      * Clears the value of the 'isAuthoritative' field.
      * Dataset is authoritative
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearIsAuthoritative() {
      fieldSetFlags()[41] = false;
      return this;
    }

    /**
      * Gets the value of the 'isRelatedToTransportportal' field.
      * Dataset is related to Transportportal
      * @return The value.
      */
    public boolean getIsRelatedToTransportportal() {
      return isRelatedToTransportportal;
    }


    /**
      * Sets the value of the 'isRelatedToTransportportal' field.
      * Dataset is related to Transportportal
      * @param value The value of 'isRelatedToTransportportal'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setIsRelatedToTransportportal(boolean value) {
      validate(fields()[42], value);
      this.isRelatedToTransportportal = value;
      fieldSetFlags()[42] = true;
      return this;
    }

    /**
      * Checks whether the 'isRelatedToTransportportal' field has been set.
      * Dataset is related to Transportportal
      * @return True if the 'isRelatedToTransportportal' field has been set, false otherwise.
      */
    public boolean hasIsRelatedToTransportportal() {
      return fieldSetFlags()[42];
    }


    /**
      * Clears the value of the 'isRelatedToTransportportal' field.
      * Dataset is related to Transportportal
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearIsRelatedToTransportportal() {
      fieldSetFlags()[42] = false;
      return this;
    }

    /**
      * Gets the value of the 'inSeries' field.
      * Information about series, only relevant if dataset is in a series
      * @return The value.
      */
    public no.digdir.fdk.model.dataset.InSeries getInSeries() {
      return inSeries;
    }


    /**
      * Sets the value of the 'inSeries' field.
      * Information about series, only relevant if dataset is in a series
      * @param value The value of 'inSeries'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setInSeries(no.digdir.fdk.model.dataset.InSeries value) {
      validate(fields()[43], value);
      this.inSeriesBuilder = null;
      this.inSeries = value;
      fieldSetFlags()[43] = true;
      return this;
    }

    /**
      * Checks whether the 'inSeries' field has been set.
      * Information about series, only relevant if dataset is in a series
      * @return True if the 'inSeries' field has been set, false otherwise.
      */
    public boolean hasInSeries() {
      return fieldSetFlags()[43];
    }

    /**
     * Gets the Builder instance for the 'inSeries' field and creates one if it doesn't exist yet.
     * Information about series, only relevant if dataset is in a series
     * @return This builder.
     */
    public no.digdir.fdk.model.dataset.InSeries.Builder getInSeriesBuilder() {
      if (inSeriesBuilder == null) {
        if (hasInSeries()) {
          setInSeriesBuilder(no.digdir.fdk.model.dataset.InSeries.newBuilder(inSeries));
        } else {
          setInSeriesBuilder(no.digdir.fdk.model.dataset.InSeries.newBuilder());
        }
      }
      return inSeriesBuilder;
    }

    /**
     * Sets the Builder instance for the 'inSeries' field
     * Information about series, only relevant if dataset is in a series
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Dataset.Builder setInSeriesBuilder(no.digdir.fdk.model.dataset.InSeries.Builder value) {
      clearInSeries();
      inSeriesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'inSeries' field has an active Builder instance
     * Information about series, only relevant if dataset is in a series
     * @return True if the 'inSeries' field has an active Builder instance
     */
    public boolean hasInSeriesBuilder() {
      return inSeriesBuilder != null;
    }

    /**
      * Clears the value of the 'inSeries' field.
      * Information about series, only relevant if dataset is in a series
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearInSeries() {
      inSeries = null;
      inSeriesBuilder = null;
      fieldSetFlags()[43] = false;
      return this;
    }

    /**
      * Gets the value of the 'prev' field.
      * Previous dataset, only relevant if dataset is in a series
      * @return The value.
      */
    public java.lang.CharSequence getPrev() {
      return prev;
    }


    /**
      * Sets the value of the 'prev' field.
      * Previous dataset, only relevant if dataset is in a series
      * @param value The value of 'prev'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setPrev(java.lang.CharSequence value) {
      validate(fields()[44], value);
      this.prev = value;
      fieldSetFlags()[44] = true;
      return this;
    }

    /**
      * Checks whether the 'prev' field has been set.
      * Previous dataset, only relevant if dataset is in a series
      * @return True if the 'prev' field has been set, false otherwise.
      */
    public boolean hasPrev() {
      return fieldSetFlags()[44];
    }


    /**
      * Clears the value of the 'prev' field.
      * Previous dataset, only relevant if dataset is in a series
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearPrev() {
      prev = null;
      fieldSetFlags()[44] = false;
      return this;
    }

    /**
      * Gets the value of the 'last' field.
      * Last dataset in series, only relevant when specializedType is datasetSeries
      * @return The value.
      */
    public java.lang.CharSequence getLast() {
      return last;
    }


    /**
      * Sets the value of the 'last' field.
      * Last dataset in series, only relevant when specializedType is datasetSeries
      * @param value The value of 'last'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setLast(java.lang.CharSequence value) {
      validate(fields()[45], value);
      this.last = value;
      fieldSetFlags()[45] = true;
      return this;
    }

    /**
      * Checks whether the 'last' field has been set.
      * Last dataset in series, only relevant when specializedType is datasetSeries
      * @return True if the 'last' field has been set, false otherwise.
      */
    public boolean hasLast() {
      return fieldSetFlags()[45];
    }


    /**
      * Clears the value of the 'last' field.
      * Last dataset in series, only relevant when specializedType is datasetSeries
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearLast() {
      last = null;
      fieldSetFlags()[45] = false;
      return this;
    }

    /**
      * Gets the value of the 'datasetsInSeries' field.
      * All datasets in the series, only relevant when specializedType is datasetSeries
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getDatasetsInSeries() {
      return datasetsInSeries;
    }


    /**
      * Sets the value of the 'datasetsInSeries' field.
      * All datasets in the series, only relevant when specializedType is datasetSeries
      * @param value The value of 'datasetsInSeries'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setDatasetsInSeries(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[46], value);
      this.datasetsInSeries = value;
      fieldSetFlags()[46] = true;
      return this;
    }

    /**
      * Checks whether the 'datasetsInSeries' field has been set.
      * All datasets in the series, only relevant when specializedType is datasetSeries
      * @return True if the 'datasetsInSeries' field has been set, false otherwise.
      */
    public boolean hasDatasetsInSeries() {
      return fieldSetFlags()[46];
    }


    /**
      * Clears the value of the 'datasetsInSeries' field.
      * All datasets in the series, only relevant when specializedType is datasetSeries
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearDatasetsInSeries() {
      datasetsInSeries = null;
      fieldSetFlags()[46] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Resource type
      * @return The value.
      */
    public no.digdir.fdk.model.ResourceType getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Resource type
      * @param value The value of 'type'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setType(no.digdir.fdk.model.ResourceType value) {
      validate(fields()[47], value);
      this.type = value;
      fieldSetFlags()[47] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Resource type
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[47];
    }


    /**
      * Clears the value of the 'type' field.
      * Resource type
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearType() {
      type = null;
      fieldSetFlags()[47] = false;
      return this;
    }

    /**
      * Gets the value of the 'specializedType' field.
      * Specialized dataset type
      * @return The value.
      */
    public no.digdir.fdk.model.dataset.DatasetType getSpecializedType() {
      return specializedType;
    }


    /**
      * Sets the value of the 'specializedType' field.
      * Specialized dataset type
      * @param value The value of 'specializedType'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder setSpecializedType(no.digdir.fdk.model.dataset.DatasetType value) {
      validate(fields()[48], value);
      this.specializedType = value;
      fieldSetFlags()[48] = true;
      return this;
    }

    /**
      * Checks whether the 'specializedType' field has been set.
      * Specialized dataset type
      * @return True if the 'specializedType' field has been set, false otherwise.
      */
    public boolean hasSpecializedType() {
      return fieldSetFlags()[48];
    }


    /**
      * Clears the value of the 'specializedType' field.
      * Specialized dataset type
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Dataset.Builder clearSpecializedType() {
      specializedType = null;
      fieldSetFlags()[48] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Dataset build() {
      try {
        Dataset record = new Dataset();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.uri = fieldSetFlags()[1] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.identifier = fieldSetFlags()[2] ? this.identifier : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.admsIdentifier = fieldSetFlags()[3] ? this.admsIdentifier : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        if (harvestBuilder != null) {
          try {
            record.harvest = this.harvestBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("harvest"));
            throw e;
          }
        } else {
          record.harvest = fieldSetFlags()[4] ? this.harvest : (no.digdir.fdk.model.HarvestMetaData) defaultValue(fields()[4]);
        }
        if (catalogBuilder != null) {
          try {
            record.catalog = this.catalogBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("catalog"));
            throw e;
          }
        } else {
          record.catalog = fieldSetFlags()[5] ? this.catalog : (no.digdir.fdk.model.Catalog) defaultValue(fields()[5]);
        }
        if (titleBuilder != null) {
          try {
            record.title = this.titleBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("title"));
            throw e;
          }
        } else {
          record.title = fieldSetFlags()[6] ? this.title : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[6]);
        }
        if (descriptionBuilder != null) {
          try {
            record.description = this.descriptionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("description"));
            throw e;
          }
        } else {
          record.description = fieldSetFlags()[7] ? this.description : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[7]);
        }
        if (descriptionFormattedBuilder != null) {
          try {
            record.descriptionFormatted = this.descriptionFormattedBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("descriptionFormatted"));
            throw e;
          }
        } else {
          record.descriptionFormatted = fieldSetFlags()[8] ? this.descriptionFormatted : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[8]);
        }
        if (publisherBuilder != null) {
          try {
            record.publisher = this.publisherBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("publisher"));
            throw e;
          }
        } else {
          record.publisher = fieldSetFlags()[9] ? this.publisher : (no.digdir.fdk.model.Publisher) defaultValue(fields()[9]);
        }
        record.distribution = fieldSetFlags()[10] ? this.distribution : (java.util.List<no.digdir.fdk.model.dataset.Distribution>) defaultValue(fields()[10]);
        record.sample = fieldSetFlags()[11] ? this.sample : (java.util.List<no.digdir.fdk.model.dataset.Distribution>) defaultValue(fields()[11]);
        record.themeUris = fieldSetFlags()[12] ? this.themeUris : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[12]);
        record.theme = fieldSetFlags()[13] ? this.theme : (java.util.List<no.digdir.fdk.model.EuDataTheme>) defaultValue(fields()[13]);
        record.losTheme = fieldSetFlags()[14] ? this.losTheme : (java.util.List<no.digdir.fdk.model.LosNode>) defaultValue(fields()[14]);
        record.eurovocThemes = fieldSetFlags()[15] ? this.eurovocThemes : (java.util.List<no.digdir.fdk.model.Eurovoc>) defaultValue(fields()[15]);
        record.keyword = fieldSetFlags()[16] ? this.keyword : (java.util.List<no.digdir.fdk.model.LocalizedStrings>) defaultValue(fields()[16]);
        record.issued = fieldSetFlags()[17] ? this.issued : (java.lang.CharSequence) defaultValue(fields()[17]);
        record.modified = fieldSetFlags()[18] ? this.modified : (java.lang.CharSequence) defaultValue(fields()[18]);
        if (dctTypeBuilder != null) {
          try {
            record.dctType = this.dctTypeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("dctType"));
            throw e;
          }
        } else {
          record.dctType = fieldSetFlags()[19] ? this.dctType : (no.digdir.fdk.model.ReferenceDataCode) defaultValue(fields()[19]);
        }
        if (accessRightsBuilder != null) {
          try {
            record.accessRights = this.accessRightsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("accessRights"));
            throw e;
          }
        } else {
          record.accessRights = fieldSetFlags()[20] ? this.accessRights : (no.digdir.fdk.model.ReferenceDataCode) defaultValue(fields()[20]);
        }
        record.language = fieldSetFlags()[21] ? this.language : (java.util.List<no.digdir.fdk.model.ReferenceDataCode>) defaultValue(fields()[21]);
        record.page = fieldSetFlags()[22] ? this.page : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[22]);
        record.landingPage = fieldSetFlags()[23] ? this.landingPage : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[23]);
        record.temporal = fieldSetFlags()[24] ? this.temporal : (java.util.List<no.digdir.fdk.model.Temporal>) defaultValue(fields()[24]);
        record.subject = fieldSetFlags()[25] ? this.subject : (java.util.List<no.digdir.fdk.model.dataset.Subject>) defaultValue(fields()[25]);
        record.spatial = fieldSetFlags()[26] ? this.spatial : (java.util.List<no.digdir.fdk.model.ReferenceDataCode>) defaultValue(fields()[26]);
        if (provenanceBuilder != null) {
          try {
            record.provenance = this.provenanceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("provenance"));
            throw e;
          }
        } else {
          record.provenance = fieldSetFlags()[27] ? this.provenance : (no.digdir.fdk.model.ReferenceDataCode) defaultValue(fields()[27]);
        }
        if (accrualPeriodicityBuilder != null) {
          try {
            record.accrualPeriodicity = this.accrualPeriodicityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("accrualPeriodicity"));
            throw e;
          }
        } else {
          record.accrualPeriodicity = fieldSetFlags()[28] ? this.accrualPeriodicity : (no.digdir.fdk.model.ReferenceDataCode) defaultValue(fields()[28]);
        }
        record.legalBasisForRestriction = fieldSetFlags()[29] ? this.legalBasisForRestriction : (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>) defaultValue(fields()[29]);
        record.legalBasisForProcessing = fieldSetFlags()[30] ? this.legalBasisForProcessing : (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>) defaultValue(fields()[30]);
        record.legalBasisForAccess = fieldSetFlags()[31] ? this.legalBasisForAccess : (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>) defaultValue(fields()[31]);
        record.conformsTo = fieldSetFlags()[32] ? this.conformsTo : (java.util.List<no.digdir.fdk.model.UriWithLabel>) defaultValue(fields()[32]);
        record.informationModel = fieldSetFlags()[33] ? this.informationModel : (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>) defaultValue(fields()[33]);
        if (hasAccuracyAnnotationBuilder != null) {
          try {
            record.hasAccuracyAnnotation = this.hasAccuracyAnnotationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("hasAccuracyAnnotation"));
            throw e;
          }
        } else {
          record.hasAccuracyAnnotation = fieldSetFlags()[34] ? this.hasAccuracyAnnotation : (no.digdir.fdk.model.dataset.QualityAnnotation) defaultValue(fields()[34]);
        }
        if (hasCompletenessAnnotationBuilder != null) {
          try {
            record.hasCompletenessAnnotation = this.hasCompletenessAnnotationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("hasCompletenessAnnotation"));
            throw e;
          }
        } else {
          record.hasCompletenessAnnotation = fieldSetFlags()[35] ? this.hasCompletenessAnnotation : (no.digdir.fdk.model.dataset.QualityAnnotation) defaultValue(fields()[35]);
        }
        if (hasCurrentnessAnnotationBuilder != null) {
          try {
            record.hasCurrentnessAnnotation = this.hasCurrentnessAnnotationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("hasCurrentnessAnnotation"));
            throw e;
          }
        } else {
          record.hasCurrentnessAnnotation = fieldSetFlags()[36] ? this.hasCurrentnessAnnotation : (no.digdir.fdk.model.dataset.QualityAnnotation) defaultValue(fields()[36]);
        }
        if (hasAvailabilityAnnotationBuilder != null) {
          try {
            record.hasAvailabilityAnnotation = this.hasAvailabilityAnnotationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("hasAvailabilityAnnotation"));
            throw e;
          }
        } else {
          record.hasAvailabilityAnnotation = fieldSetFlags()[37] ? this.hasAvailabilityAnnotation : (no.digdir.fdk.model.dataset.QualityAnnotation) defaultValue(fields()[37]);
        }
        if (hasRelevanceAnnotationBuilder != null) {
          try {
            record.hasRelevanceAnnotation = this.hasRelevanceAnnotationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("hasRelevanceAnnotation"));
            throw e;
          }
        } else {
          record.hasRelevanceAnnotation = fieldSetFlags()[38] ? this.hasRelevanceAnnotation : (no.digdir.fdk.model.dataset.QualityAnnotation) defaultValue(fields()[38]);
        }
        record.qualifiedAttributions = fieldSetFlags()[39] ? this.qualifiedAttributions : (java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution>) defaultValue(fields()[39]);
        record.isOpenData = fieldSetFlags()[40] ? this.isOpenData : (java.lang.Boolean) defaultValue(fields()[40]);
        record.isAuthoritative = fieldSetFlags()[41] ? this.isAuthoritative : (java.lang.Boolean) defaultValue(fields()[41]);
        record.isRelatedToTransportportal = fieldSetFlags()[42] ? this.isRelatedToTransportportal : (java.lang.Boolean) defaultValue(fields()[42]);
        if (inSeriesBuilder != null) {
          try {
            record.inSeries = this.inSeriesBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("inSeries"));
            throw e;
          }
        } else {
          record.inSeries = fieldSetFlags()[43] ? this.inSeries : (no.digdir.fdk.model.dataset.InSeries) defaultValue(fields()[43]);
        }
        record.prev = fieldSetFlags()[44] ? this.prev : (java.lang.CharSequence) defaultValue(fields()[44]);
        record.last = fieldSetFlags()[45] ? this.last : (java.lang.CharSequence) defaultValue(fields()[45]);
        record.datasetsInSeries = fieldSetFlags()[46] ? this.datasetsInSeries : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[46]);
        record.type = fieldSetFlags()[47] ? this.type : (no.digdir.fdk.model.ResourceType) defaultValue(fields()[47]);
        record.specializedType = fieldSetFlags()[48] ? this.specializedType : (no.digdir.fdk.model.dataset.DatasetType) defaultValue(fields()[48]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Dataset>
    WRITER$ = (org.apache.avro.io.DatumWriter<Dataset>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Dataset>
    READER$ = (org.apache.avro.io.DatumReader<Dataset>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.uri);

    if (this.identifier == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.identifier.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.identifier) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.admsIdentifier == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.admsIdentifier.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.CharSequence e1: this.admsIdentifier) {
        actualSize1++;
        out.startItem();
        out.writeString(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.harvest == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.harvest.customEncode(out);
    }

    if (this.catalog == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.catalog.customEncode(out);
    }

    if (this.title == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.title.customEncode(out);
    }

    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.description.customEncode(out);
    }

    if (this.descriptionFormatted == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.descriptionFormatted.customEncode(out);
    }

    if (this.publisher == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.publisher.customEncode(out);
    }

    if (this.distribution == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.distribution.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (no.digdir.fdk.model.dataset.Distribution e2: this.distribution) {
        actualSize2++;
        out.startItem();
        e2.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.sample == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.sample.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (no.digdir.fdk.model.dataset.Distribution e3: this.sample) {
        actualSize3++;
        out.startItem();
        e3.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    if (this.themeUris == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size4 = this.themeUris.size();
      out.writeArrayStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (java.lang.CharSequence e4: this.themeUris) {
        actualSize4++;
        out.startItem();
        out.writeString(e4);
      }
      out.writeArrayEnd();
      if (actualSize4 != size4)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }

    if (this.theme == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size5 = this.theme.size();
      out.writeArrayStart();
      out.setItemCount(size5);
      long actualSize5 = 0;
      for (no.digdir.fdk.model.EuDataTheme e5: this.theme) {
        actualSize5++;
        out.startItem();
        e5.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize5 != size5)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");
    }

    if (this.losTheme == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size6 = this.losTheme.size();
      out.writeArrayStart();
      out.setItemCount(size6);
      long actualSize6 = 0;
      for (no.digdir.fdk.model.LosNode e6: this.losTheme) {
        actualSize6++;
        out.startItem();
        e6.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize6 != size6)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");
    }

    if (this.eurovocThemes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size7 = this.eurovocThemes.size();
      out.writeArrayStart();
      out.setItemCount(size7);
      long actualSize7 = 0;
      for (no.digdir.fdk.model.Eurovoc e7: this.eurovocThemes) {
        actualSize7++;
        out.startItem();
        e7.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize7 != size7)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size7 + ", but element count was " + actualSize7 + ".");
    }

    if (this.keyword == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size8 = this.keyword.size();
      out.writeArrayStart();
      out.setItemCount(size8);
      long actualSize8 = 0;
      for (no.digdir.fdk.model.LocalizedStrings e8: this.keyword) {
        actualSize8++;
        out.startItem();
        e8.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize8 != size8)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size8 + ", but element count was " + actualSize8 + ".");
    }

    if (this.issued == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.issued);
    }

    if (this.modified == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.modified);
    }

    if (this.dctType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.dctType.customEncode(out);
    }

    if (this.accessRights == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.accessRights.customEncode(out);
    }

    if (this.language == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size9 = this.language.size();
      out.writeArrayStart();
      out.setItemCount(size9);
      long actualSize9 = 0;
      for (no.digdir.fdk.model.ReferenceDataCode e9: this.language) {
        actualSize9++;
        out.startItem();
        e9.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize9 != size9)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size9 + ", but element count was " + actualSize9 + ".");
    }

    if (this.page == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size10 = this.page.size();
      out.writeArrayStart();
      out.setItemCount(size10);
      long actualSize10 = 0;
      for (java.lang.CharSequence e10: this.page) {
        actualSize10++;
        out.startItem();
        out.writeString(e10);
      }
      out.writeArrayEnd();
      if (actualSize10 != size10)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size10 + ", but element count was " + actualSize10 + ".");
    }

    if (this.landingPage == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size11 = this.landingPage.size();
      out.writeArrayStart();
      out.setItemCount(size11);
      long actualSize11 = 0;
      for (java.lang.CharSequence e11: this.landingPage) {
        actualSize11++;
        out.startItem();
        out.writeString(e11);
      }
      out.writeArrayEnd();
      if (actualSize11 != size11)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size11 + ", but element count was " + actualSize11 + ".");
    }

    if (this.temporal == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size12 = this.temporal.size();
      out.writeArrayStart();
      out.setItemCount(size12);
      long actualSize12 = 0;
      for (no.digdir.fdk.model.Temporal e12: this.temporal) {
        actualSize12++;
        out.startItem();
        e12.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize12 != size12)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size12 + ", but element count was " + actualSize12 + ".");
    }

    if (this.subject == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size13 = this.subject.size();
      out.writeArrayStart();
      out.setItemCount(size13);
      long actualSize13 = 0;
      for (no.digdir.fdk.model.dataset.Subject e13: this.subject) {
        actualSize13++;
        out.startItem();
        e13.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize13 != size13)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size13 + ", but element count was " + actualSize13 + ".");
    }

    if (this.spatial == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size14 = this.spatial.size();
      out.writeArrayStart();
      out.setItemCount(size14);
      long actualSize14 = 0;
      for (no.digdir.fdk.model.ReferenceDataCode e14: this.spatial) {
        actualSize14++;
        out.startItem();
        e14.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize14 != size14)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size14 + ", but element count was " + actualSize14 + ".");
    }

    if (this.provenance == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.provenance.customEncode(out);
    }

    if (this.accrualPeriodicity == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.accrualPeriodicity.customEncode(out);
    }

    if (this.legalBasisForRestriction == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size15 = this.legalBasisForRestriction.size();
      out.writeArrayStart();
      out.setItemCount(size15);
      long actualSize15 = 0;
      for (no.digdir.fdk.model.UriWithLabelAndType e15: this.legalBasisForRestriction) {
        actualSize15++;
        out.startItem();
        e15.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize15 != size15)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size15 + ", but element count was " + actualSize15 + ".");
    }

    if (this.legalBasisForProcessing == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size16 = this.legalBasisForProcessing.size();
      out.writeArrayStart();
      out.setItemCount(size16);
      long actualSize16 = 0;
      for (no.digdir.fdk.model.UriWithLabelAndType e16: this.legalBasisForProcessing) {
        actualSize16++;
        out.startItem();
        e16.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize16 != size16)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size16 + ", but element count was " + actualSize16 + ".");
    }

    if (this.legalBasisForAccess == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size17 = this.legalBasisForAccess.size();
      out.writeArrayStart();
      out.setItemCount(size17);
      long actualSize17 = 0;
      for (no.digdir.fdk.model.UriWithLabelAndType e17: this.legalBasisForAccess) {
        actualSize17++;
        out.startItem();
        e17.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize17 != size17)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size17 + ", but element count was " + actualSize17 + ".");
    }

    if (this.conformsTo == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size18 = this.conformsTo.size();
      out.writeArrayStart();
      out.setItemCount(size18);
      long actualSize18 = 0;
      for (no.digdir.fdk.model.UriWithLabel e18: this.conformsTo) {
        actualSize18++;
        out.startItem();
        e18.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize18 != size18)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size18 + ", but element count was " + actualSize18 + ".");
    }

    if (this.informationModel == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size19 = this.informationModel.size();
      out.writeArrayStart();
      out.setItemCount(size19);
      long actualSize19 = 0;
      for (no.digdir.fdk.model.UriWithLabelAndType e19: this.informationModel) {
        actualSize19++;
        out.startItem();
        e19.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize19 != size19)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size19 + ", but element count was " + actualSize19 + ".");
    }

    if (this.hasAccuracyAnnotation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.hasAccuracyAnnotation.customEncode(out);
    }

    if (this.hasCompletenessAnnotation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.hasCompletenessAnnotation.customEncode(out);
    }

    if (this.hasCurrentnessAnnotation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.hasCurrentnessAnnotation.customEncode(out);
    }

    if (this.hasAvailabilityAnnotation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.hasAvailabilityAnnotation.customEncode(out);
    }

    if (this.hasRelevanceAnnotation == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.hasRelevanceAnnotation.customEncode(out);
    }

    if (this.qualifiedAttributions == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size20 = this.qualifiedAttributions.size();
      out.writeArrayStart();
      out.setItemCount(size20);
      long actualSize20 = 0;
      for (no.digdir.fdk.model.dataset.QualifiedAttribution e20: this.qualifiedAttributions) {
        actualSize20++;
        out.startItem();
        e20.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize20 != size20)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size20 + ", but element count was " + actualSize20 + ".");
    }

    out.writeBoolean(this.isOpenData);

    out.writeBoolean(this.isAuthoritative);

    out.writeBoolean(this.isRelatedToTransportportal);

    if (this.inSeries == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.inSeries.customEncode(out);
    }

    if (this.prev == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.prev);
    }

    if (this.last == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.last);
    }

    if (this.datasetsInSeries == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size21 = this.datasetsInSeries.size();
      out.writeArrayStart();
      out.setItemCount(size21);
      long actualSize21 = 0;
      for (java.lang.CharSequence e21: this.datasetsInSeries) {
        actualSize21++;
        out.startItem();
        out.writeString(e21);
      }
      out.writeArrayEnd();
      if (actualSize21 != size21)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size21 + ", but element count was " + actualSize21 + ".");
    }

    if (this.type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.type.ordinal());
    }

    if (this.specializedType == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeEnum(this.specializedType.ordinal());
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.identifier = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.identifier;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("identifier").schema().getTypes().get(1));
          this.identifier = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.admsIdentifier = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a1 = this.admsIdentifier;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("admsIdentifier").schema().getTypes().get(1));
          this.admsIdentifier = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.harvest = null;
      } else {
        if (this.harvest == null) {
          this.harvest = new no.digdir.fdk.model.HarvestMetaData();
        }
        this.harvest.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.catalog = null;
      } else {
        if (this.catalog == null) {
          this.catalog = new no.digdir.fdk.model.Catalog();
        }
        this.catalog.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.title = null;
      } else {
        if (this.title == null) {
          this.title = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.title.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        if (this.description == null) {
          this.description = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.description.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.descriptionFormatted = null;
      } else {
        if (this.descriptionFormatted == null) {
          this.descriptionFormatted = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.descriptionFormatted.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.publisher = null;
      } else {
        if (this.publisher == null) {
          this.publisher = new no.digdir.fdk.model.Publisher();
        }
        this.publisher.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.distribution = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.dataset.Distribution> a2 = this.distribution;
        if (a2 == null) {
          a2 = new SpecificData.Array<no.digdir.fdk.model.dataset.Distribution>((int)size2, SCHEMA$.getField("distribution").schema().getTypes().get(1));
          this.distribution = a2;
        } else a2.clear();
        SpecificData.Array<no.digdir.fdk.model.dataset.Distribution> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.dataset.Distribution>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            no.digdir.fdk.model.dataset.Distribution e2 = (ga2 != null ? ga2.peek() : null);
            if (e2 == null) {
              e2 = new no.digdir.fdk.model.dataset.Distribution();
            }
            e2.customDecode(in);
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sample = null;
      } else {
        long size3 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.dataset.Distribution> a3 = this.sample;
        if (a3 == null) {
          a3 = new SpecificData.Array<no.digdir.fdk.model.dataset.Distribution>((int)size3, SCHEMA$.getField("sample").schema().getTypes().get(1));
          this.sample = a3;
        } else a3.clear();
        SpecificData.Array<no.digdir.fdk.model.dataset.Distribution> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.dataset.Distribution>)a3 : null);
        for ( ; 0 < size3; size3 = in.arrayNext()) {
          for ( ; size3 != 0; size3--) {
            no.digdir.fdk.model.dataset.Distribution e3 = (ga3 != null ? ga3.peek() : null);
            if (e3 == null) {
              e3 = new no.digdir.fdk.model.dataset.Distribution();
            }
            e3.customDecode(in);
            a3.add(e3);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.themeUris = null;
      } else {
        long size4 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a4 = this.themeUris;
        if (a4 == null) {
          a4 = new SpecificData.Array<java.lang.CharSequence>((int)size4, SCHEMA$.getField("themeUris").schema().getTypes().get(1));
          this.themeUris = a4;
        } else a4.clear();
        SpecificData.Array<java.lang.CharSequence> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a4 : null);
        for ( ; 0 < size4; size4 = in.arrayNext()) {
          for ( ; size4 != 0; size4--) {
            java.lang.CharSequence e4 = (ga4 != null ? ga4.peek() : null);
            e4 = in.readString(e4 instanceof Utf8 ? (Utf8)e4 : null);
            a4.add(e4);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.theme = null;
      } else {
        long size5 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.EuDataTheme> a5 = this.theme;
        if (a5 == null) {
          a5 = new SpecificData.Array<no.digdir.fdk.model.EuDataTheme>((int)size5, SCHEMA$.getField("theme").schema().getTypes().get(1));
          this.theme = a5;
        } else a5.clear();
        SpecificData.Array<no.digdir.fdk.model.EuDataTheme> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.EuDataTheme>)a5 : null);
        for ( ; 0 < size5; size5 = in.arrayNext()) {
          for ( ; size5 != 0; size5--) {
            no.digdir.fdk.model.EuDataTheme e5 = (ga5 != null ? ga5.peek() : null);
            if (e5 == null) {
              e5 = new no.digdir.fdk.model.EuDataTheme();
            }
            e5.customDecode(in);
            a5.add(e5);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.losTheme = null;
      } else {
        long size6 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.LosNode> a6 = this.losTheme;
        if (a6 == null) {
          a6 = new SpecificData.Array<no.digdir.fdk.model.LosNode>((int)size6, SCHEMA$.getField("losTheme").schema().getTypes().get(1));
          this.losTheme = a6;
        } else a6.clear();
        SpecificData.Array<no.digdir.fdk.model.LosNode> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.LosNode>)a6 : null);
        for ( ; 0 < size6; size6 = in.arrayNext()) {
          for ( ; size6 != 0; size6--) {
            no.digdir.fdk.model.LosNode e6 = (ga6 != null ? ga6.peek() : null);
            if (e6 == null) {
              e6 = new no.digdir.fdk.model.LosNode();
            }
            e6.customDecode(in);
            a6.add(e6);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eurovocThemes = null;
      } else {
        long size7 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.Eurovoc> a7 = this.eurovocThemes;
        if (a7 == null) {
          a7 = new SpecificData.Array<no.digdir.fdk.model.Eurovoc>((int)size7, SCHEMA$.getField("eurovocThemes").schema().getTypes().get(1));
          this.eurovocThemes = a7;
        } else a7.clear();
        SpecificData.Array<no.digdir.fdk.model.Eurovoc> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.Eurovoc>)a7 : null);
        for ( ; 0 < size7; size7 = in.arrayNext()) {
          for ( ; size7 != 0; size7--) {
            no.digdir.fdk.model.Eurovoc e7 = (ga7 != null ? ga7.peek() : null);
            if (e7 == null) {
              e7 = new no.digdir.fdk.model.Eurovoc();
            }
            e7.customDecode(in);
            a7.add(e7);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.keyword = null;
      } else {
        long size8 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.LocalizedStrings> a8 = this.keyword;
        if (a8 == null) {
          a8 = new SpecificData.Array<no.digdir.fdk.model.LocalizedStrings>((int)size8, SCHEMA$.getField("keyword").schema().getTypes().get(1));
          this.keyword = a8;
        } else a8.clear();
        SpecificData.Array<no.digdir.fdk.model.LocalizedStrings> ga8 = (a8 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.LocalizedStrings>)a8 : null);
        for ( ; 0 < size8; size8 = in.arrayNext()) {
          for ( ; size8 != 0; size8--) {
            no.digdir.fdk.model.LocalizedStrings e8 = (ga8 != null ? ga8.peek() : null);
            if (e8 == null) {
              e8 = new no.digdir.fdk.model.LocalizedStrings();
            }
            e8.customDecode(in);
            a8.add(e8);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.issued = null;
      } else {
        this.issued = in.readString(this.issued instanceof Utf8 ? (Utf8)this.issued : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.modified = null;
      } else {
        this.modified = in.readString(this.modified instanceof Utf8 ? (Utf8)this.modified : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.dctType = null;
      } else {
        if (this.dctType == null) {
          this.dctType = new no.digdir.fdk.model.ReferenceDataCode();
        }
        this.dctType.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.accessRights = null;
      } else {
        if (this.accessRights == null) {
          this.accessRights = new no.digdir.fdk.model.ReferenceDataCode();
        }
        this.accessRights.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.language = null;
      } else {
        long size9 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.ReferenceDataCode> a9 = this.language;
        if (a9 == null) {
          a9 = new SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode>((int)size9, SCHEMA$.getField("language").schema().getTypes().get(1));
          this.language = a9;
        } else a9.clear();
        SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode> ga9 = (a9 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode>)a9 : null);
        for ( ; 0 < size9; size9 = in.arrayNext()) {
          for ( ; size9 != 0; size9--) {
            no.digdir.fdk.model.ReferenceDataCode e9 = (ga9 != null ? ga9.peek() : null);
            if (e9 == null) {
              e9 = new no.digdir.fdk.model.ReferenceDataCode();
            }
            e9.customDecode(in);
            a9.add(e9);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.page = null;
      } else {
        long size10 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a10 = this.page;
        if (a10 == null) {
          a10 = new SpecificData.Array<java.lang.CharSequence>((int)size10, SCHEMA$.getField("page").schema().getTypes().get(1));
          this.page = a10;
        } else a10.clear();
        SpecificData.Array<java.lang.CharSequence> ga10 = (a10 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a10 : null);
        for ( ; 0 < size10; size10 = in.arrayNext()) {
          for ( ; size10 != 0; size10--) {
            java.lang.CharSequence e10 = (ga10 != null ? ga10.peek() : null);
            e10 = in.readString(e10 instanceof Utf8 ? (Utf8)e10 : null);
            a10.add(e10);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.landingPage = null;
      } else {
        long size11 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a11 = this.landingPage;
        if (a11 == null) {
          a11 = new SpecificData.Array<java.lang.CharSequence>((int)size11, SCHEMA$.getField("landingPage").schema().getTypes().get(1));
          this.landingPage = a11;
        } else a11.clear();
        SpecificData.Array<java.lang.CharSequence> ga11 = (a11 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a11 : null);
        for ( ; 0 < size11; size11 = in.arrayNext()) {
          for ( ; size11 != 0; size11--) {
            java.lang.CharSequence e11 = (ga11 != null ? ga11.peek() : null);
            e11 = in.readString(e11 instanceof Utf8 ? (Utf8)e11 : null);
            a11.add(e11);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.temporal = null;
      } else {
        long size12 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.Temporal> a12 = this.temporal;
        if (a12 == null) {
          a12 = new SpecificData.Array<no.digdir.fdk.model.Temporal>((int)size12, SCHEMA$.getField("temporal").schema().getTypes().get(1));
          this.temporal = a12;
        } else a12.clear();
        SpecificData.Array<no.digdir.fdk.model.Temporal> ga12 = (a12 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.Temporal>)a12 : null);
        for ( ; 0 < size12; size12 = in.arrayNext()) {
          for ( ; size12 != 0; size12--) {
            no.digdir.fdk.model.Temporal e12 = (ga12 != null ? ga12.peek() : null);
            if (e12 == null) {
              e12 = new no.digdir.fdk.model.Temporal();
            }
            e12.customDecode(in);
            a12.add(e12);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.subject = null;
      } else {
        long size13 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.dataset.Subject> a13 = this.subject;
        if (a13 == null) {
          a13 = new SpecificData.Array<no.digdir.fdk.model.dataset.Subject>((int)size13, SCHEMA$.getField("subject").schema().getTypes().get(1));
          this.subject = a13;
        } else a13.clear();
        SpecificData.Array<no.digdir.fdk.model.dataset.Subject> ga13 = (a13 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.dataset.Subject>)a13 : null);
        for ( ; 0 < size13; size13 = in.arrayNext()) {
          for ( ; size13 != 0; size13--) {
            no.digdir.fdk.model.dataset.Subject e13 = (ga13 != null ? ga13.peek() : null);
            if (e13 == null) {
              e13 = new no.digdir.fdk.model.dataset.Subject();
            }
            e13.customDecode(in);
            a13.add(e13);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.spatial = null;
      } else {
        long size14 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.ReferenceDataCode> a14 = this.spatial;
        if (a14 == null) {
          a14 = new SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode>((int)size14, SCHEMA$.getField("spatial").schema().getTypes().get(1));
          this.spatial = a14;
        } else a14.clear();
        SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode> ga14 = (a14 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode>)a14 : null);
        for ( ; 0 < size14; size14 = in.arrayNext()) {
          for ( ; size14 != 0; size14--) {
            no.digdir.fdk.model.ReferenceDataCode e14 = (ga14 != null ? ga14.peek() : null);
            if (e14 == null) {
              e14 = new no.digdir.fdk.model.ReferenceDataCode();
            }
            e14.customDecode(in);
            a14.add(e14);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.provenance = null;
      } else {
        if (this.provenance == null) {
          this.provenance = new no.digdir.fdk.model.ReferenceDataCode();
        }
        this.provenance.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.accrualPeriodicity = null;
      } else {
        if (this.accrualPeriodicity == null) {
          this.accrualPeriodicity = new no.digdir.fdk.model.ReferenceDataCode();
        }
        this.accrualPeriodicity.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.legalBasisForRestriction = null;
      } else {
        long size15 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a15 = this.legalBasisForRestriction;
        if (a15 == null) {
          a15 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size15, SCHEMA$.getField("legalBasisForRestriction").schema().getTypes().get(1));
          this.legalBasisForRestriction = a15;
        } else a15.clear();
        SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga15 = (a15 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a15 : null);
        for ( ; 0 < size15; size15 = in.arrayNext()) {
          for ( ; size15 != 0; size15--) {
            no.digdir.fdk.model.UriWithLabelAndType e15 = (ga15 != null ? ga15.peek() : null);
            if (e15 == null) {
              e15 = new no.digdir.fdk.model.UriWithLabelAndType();
            }
            e15.customDecode(in);
            a15.add(e15);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.legalBasisForProcessing = null;
      } else {
        long size16 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a16 = this.legalBasisForProcessing;
        if (a16 == null) {
          a16 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size16, SCHEMA$.getField("legalBasisForProcessing").schema().getTypes().get(1));
          this.legalBasisForProcessing = a16;
        } else a16.clear();
        SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga16 = (a16 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a16 : null);
        for ( ; 0 < size16; size16 = in.arrayNext()) {
          for ( ; size16 != 0; size16--) {
            no.digdir.fdk.model.UriWithLabelAndType e16 = (ga16 != null ? ga16.peek() : null);
            if (e16 == null) {
              e16 = new no.digdir.fdk.model.UriWithLabelAndType();
            }
            e16.customDecode(in);
            a16.add(e16);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.legalBasisForAccess = null;
      } else {
        long size17 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a17 = this.legalBasisForAccess;
        if (a17 == null) {
          a17 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size17, SCHEMA$.getField("legalBasisForAccess").schema().getTypes().get(1));
          this.legalBasisForAccess = a17;
        } else a17.clear();
        SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga17 = (a17 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a17 : null);
        for ( ; 0 < size17; size17 = in.arrayNext()) {
          for ( ; size17 != 0; size17--) {
            no.digdir.fdk.model.UriWithLabelAndType e17 = (ga17 != null ? ga17.peek() : null);
            if (e17 == null) {
              e17 = new no.digdir.fdk.model.UriWithLabelAndType();
            }
            e17.customDecode(in);
            a17.add(e17);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.conformsTo = null;
      } else {
        long size18 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.UriWithLabel> a18 = this.conformsTo;
        if (a18 == null) {
          a18 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabel>((int)size18, SCHEMA$.getField("conformsTo").schema().getTypes().get(1));
          this.conformsTo = a18;
        } else a18.clear();
        SpecificData.Array<no.digdir.fdk.model.UriWithLabel> ga18 = (a18 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabel>)a18 : null);
        for ( ; 0 < size18; size18 = in.arrayNext()) {
          for ( ; size18 != 0; size18--) {
            no.digdir.fdk.model.UriWithLabel e18 = (ga18 != null ? ga18.peek() : null);
            if (e18 == null) {
              e18 = new no.digdir.fdk.model.UriWithLabel();
            }
            e18.customDecode(in);
            a18.add(e18);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.informationModel = null;
      } else {
        long size19 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a19 = this.informationModel;
        if (a19 == null) {
          a19 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size19, SCHEMA$.getField("informationModel").schema().getTypes().get(1));
          this.informationModel = a19;
        } else a19.clear();
        SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga19 = (a19 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a19 : null);
        for ( ; 0 < size19; size19 = in.arrayNext()) {
          for ( ; size19 != 0; size19--) {
            no.digdir.fdk.model.UriWithLabelAndType e19 = (ga19 != null ? ga19.peek() : null);
            if (e19 == null) {
              e19 = new no.digdir.fdk.model.UriWithLabelAndType();
            }
            e19.customDecode(in);
            a19.add(e19);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hasAccuracyAnnotation = null;
      } else {
        if (this.hasAccuracyAnnotation == null) {
          this.hasAccuracyAnnotation = new no.digdir.fdk.model.dataset.QualityAnnotation();
        }
        this.hasAccuracyAnnotation.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hasCompletenessAnnotation = null;
      } else {
        if (this.hasCompletenessAnnotation == null) {
          this.hasCompletenessAnnotation = new no.digdir.fdk.model.dataset.QualityAnnotation();
        }
        this.hasCompletenessAnnotation.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hasCurrentnessAnnotation = null;
      } else {
        if (this.hasCurrentnessAnnotation == null) {
          this.hasCurrentnessAnnotation = new no.digdir.fdk.model.dataset.QualityAnnotation();
        }
        this.hasCurrentnessAnnotation.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hasAvailabilityAnnotation = null;
      } else {
        if (this.hasAvailabilityAnnotation == null) {
          this.hasAvailabilityAnnotation = new no.digdir.fdk.model.dataset.QualityAnnotation();
        }
        this.hasAvailabilityAnnotation.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hasRelevanceAnnotation = null;
      } else {
        if (this.hasRelevanceAnnotation == null) {
          this.hasRelevanceAnnotation = new no.digdir.fdk.model.dataset.QualityAnnotation();
        }
        this.hasRelevanceAnnotation.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.qualifiedAttributions = null;
      } else {
        long size20 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution> a20 = this.qualifiedAttributions;
        if (a20 == null) {
          a20 = new SpecificData.Array<no.digdir.fdk.model.dataset.QualifiedAttribution>((int)size20, SCHEMA$.getField("qualifiedAttributions").schema().getTypes().get(1));
          this.qualifiedAttributions = a20;
        } else a20.clear();
        SpecificData.Array<no.digdir.fdk.model.dataset.QualifiedAttribution> ga20 = (a20 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.dataset.QualifiedAttribution>)a20 : null);
        for ( ; 0 < size20; size20 = in.arrayNext()) {
          for ( ; size20 != 0; size20--) {
            no.digdir.fdk.model.dataset.QualifiedAttribution e20 = (ga20 != null ? ga20.peek() : null);
            if (e20 == null) {
              e20 = new no.digdir.fdk.model.dataset.QualifiedAttribution();
            }
            e20.customDecode(in);
            a20.add(e20);
          }
        }
      }

      this.isOpenData = in.readBoolean();

      this.isAuthoritative = in.readBoolean();

      this.isRelatedToTransportportal = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.inSeries = null;
      } else {
        if (this.inSeries == null) {
          this.inSeries = new no.digdir.fdk.model.dataset.InSeries();
        }
        this.inSeries.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.prev = null;
      } else {
        this.prev = in.readString(this.prev instanceof Utf8 ? (Utf8)this.prev : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.last = null;
      } else {
        this.last = in.readString(this.last instanceof Utf8 ? (Utf8)this.last : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.datasetsInSeries = null;
      } else {
        long size21 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a21 = this.datasetsInSeries;
        if (a21 == null) {
          a21 = new SpecificData.Array<java.lang.CharSequence>((int)size21, SCHEMA$.getField("datasetsInSeries").schema().getTypes().get(1));
          this.datasetsInSeries = a21;
        } else a21.clear();
        SpecificData.Array<java.lang.CharSequence> ga21 = (a21 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a21 : null);
        for ( ; 0 < size21; size21 = in.arrayNext()) {
          for ( ; size21 != 0; size21--) {
            java.lang.CharSequence e21 = (ga21 != null ? ga21.peek() : null);
            e21 = in.readString(e21 instanceof Utf8 ? (Utf8)e21 : null);
            a21.add(e21);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.type = null;
      } else {
        this.type = no.digdir.fdk.model.ResourceType.values()[in.readEnum()];
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.specializedType = null;
      } else {
        this.specializedType = no.digdir.fdk.model.dataset.DatasetType.values()[in.readEnum()];
      }

    } else {
      for (int i = 0; i < 49; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 1:
          this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.identifier = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.identifier;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("identifier").schema().getTypes().get(1));
              this.identifier = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.admsIdentifier = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a1 = this.admsIdentifier;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("admsIdentifier").schema().getTypes().get(1));
              this.admsIdentifier = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
                a1.add(e1);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.harvest = null;
          } else {
            if (this.harvest == null) {
              this.harvest = new no.digdir.fdk.model.HarvestMetaData();
            }
            this.harvest.customDecode(in);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.catalog = null;
          } else {
            if (this.catalog == null) {
              this.catalog = new no.digdir.fdk.model.Catalog();
            }
            this.catalog.customDecode(in);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.title = null;
          } else {
            if (this.title == null) {
              this.title = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.title.customDecode(in);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            if (this.description == null) {
              this.description = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.description.customDecode(in);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.descriptionFormatted = null;
          } else {
            if (this.descriptionFormatted == null) {
              this.descriptionFormatted = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.descriptionFormatted.customDecode(in);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.publisher = null;
          } else {
            if (this.publisher == null) {
              this.publisher = new no.digdir.fdk.model.Publisher();
            }
            this.publisher.customDecode(in);
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.distribution = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.dataset.Distribution> a2 = this.distribution;
            if (a2 == null) {
              a2 = new SpecificData.Array<no.digdir.fdk.model.dataset.Distribution>((int)size2, SCHEMA$.getField("distribution").schema().getTypes().get(1));
              this.distribution = a2;
            } else a2.clear();
            SpecificData.Array<no.digdir.fdk.model.dataset.Distribution> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.dataset.Distribution>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                no.digdir.fdk.model.dataset.Distribution e2 = (ga2 != null ? ga2.peek() : null);
                if (e2 == null) {
                  e2 = new no.digdir.fdk.model.dataset.Distribution();
                }
                e2.customDecode(in);
                a2.add(e2);
              }
            }
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sample = null;
          } else {
            long size3 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.dataset.Distribution> a3 = this.sample;
            if (a3 == null) {
              a3 = new SpecificData.Array<no.digdir.fdk.model.dataset.Distribution>((int)size3, SCHEMA$.getField("sample").schema().getTypes().get(1));
              this.sample = a3;
            } else a3.clear();
            SpecificData.Array<no.digdir.fdk.model.dataset.Distribution> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.dataset.Distribution>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
              for ( ; size3 != 0; size3--) {
                no.digdir.fdk.model.dataset.Distribution e3 = (ga3 != null ? ga3.peek() : null);
                if (e3 == null) {
                  e3 = new no.digdir.fdk.model.dataset.Distribution();
                }
                e3.customDecode(in);
                a3.add(e3);
              }
            }
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.themeUris = null;
          } else {
            long size4 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a4 = this.themeUris;
            if (a4 == null) {
              a4 = new SpecificData.Array<java.lang.CharSequence>((int)size4, SCHEMA$.getField("themeUris").schema().getTypes().get(1));
              this.themeUris = a4;
            } else a4.clear();
            SpecificData.Array<java.lang.CharSequence> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a4 : null);
            for ( ; 0 < size4; size4 = in.arrayNext()) {
              for ( ; size4 != 0; size4--) {
                java.lang.CharSequence e4 = (ga4 != null ? ga4.peek() : null);
                e4 = in.readString(e4 instanceof Utf8 ? (Utf8)e4 : null);
                a4.add(e4);
              }
            }
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.theme = null;
          } else {
            long size5 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.EuDataTheme> a5 = this.theme;
            if (a5 == null) {
              a5 = new SpecificData.Array<no.digdir.fdk.model.EuDataTheme>((int)size5, SCHEMA$.getField("theme").schema().getTypes().get(1));
              this.theme = a5;
            } else a5.clear();
            SpecificData.Array<no.digdir.fdk.model.EuDataTheme> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.EuDataTheme>)a5 : null);
            for ( ; 0 < size5; size5 = in.arrayNext()) {
              for ( ; size5 != 0; size5--) {
                no.digdir.fdk.model.EuDataTheme e5 = (ga5 != null ? ga5.peek() : null);
                if (e5 == null) {
                  e5 = new no.digdir.fdk.model.EuDataTheme();
                }
                e5.customDecode(in);
                a5.add(e5);
              }
            }
          }
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.losTheme = null;
          } else {
            long size6 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.LosNode> a6 = this.losTheme;
            if (a6 == null) {
              a6 = new SpecificData.Array<no.digdir.fdk.model.LosNode>((int)size6, SCHEMA$.getField("losTheme").schema().getTypes().get(1));
              this.losTheme = a6;
            } else a6.clear();
            SpecificData.Array<no.digdir.fdk.model.LosNode> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.LosNode>)a6 : null);
            for ( ; 0 < size6; size6 = in.arrayNext()) {
              for ( ; size6 != 0; size6--) {
                no.digdir.fdk.model.LosNode e6 = (ga6 != null ? ga6.peek() : null);
                if (e6 == null) {
                  e6 = new no.digdir.fdk.model.LosNode();
                }
                e6.customDecode(in);
                a6.add(e6);
              }
            }
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eurovocThemes = null;
          } else {
            long size7 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.Eurovoc> a7 = this.eurovocThemes;
            if (a7 == null) {
              a7 = new SpecificData.Array<no.digdir.fdk.model.Eurovoc>((int)size7, SCHEMA$.getField("eurovocThemes").schema().getTypes().get(1));
              this.eurovocThemes = a7;
            } else a7.clear();
            SpecificData.Array<no.digdir.fdk.model.Eurovoc> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.Eurovoc>)a7 : null);
            for ( ; 0 < size7; size7 = in.arrayNext()) {
              for ( ; size7 != 0; size7--) {
                no.digdir.fdk.model.Eurovoc e7 = (ga7 != null ? ga7.peek() : null);
                if (e7 == null) {
                  e7 = new no.digdir.fdk.model.Eurovoc();
                }
                e7.customDecode(in);
                a7.add(e7);
              }
            }
          }
          break;

        case 16:
          if (in.readIndex() != 1) {
            in.readNull();
            this.keyword = null;
          } else {
            long size8 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.LocalizedStrings> a8 = this.keyword;
            if (a8 == null) {
              a8 = new SpecificData.Array<no.digdir.fdk.model.LocalizedStrings>((int)size8, SCHEMA$.getField("keyword").schema().getTypes().get(1));
              this.keyword = a8;
            } else a8.clear();
            SpecificData.Array<no.digdir.fdk.model.LocalizedStrings> ga8 = (a8 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.LocalizedStrings>)a8 : null);
            for ( ; 0 < size8; size8 = in.arrayNext()) {
              for ( ; size8 != 0; size8--) {
                no.digdir.fdk.model.LocalizedStrings e8 = (ga8 != null ? ga8.peek() : null);
                if (e8 == null) {
                  e8 = new no.digdir.fdk.model.LocalizedStrings();
                }
                e8.customDecode(in);
                a8.add(e8);
              }
            }
          }
          break;

        case 17:
          if (in.readIndex() != 1) {
            in.readNull();
            this.issued = null;
          } else {
            this.issued = in.readString(this.issued instanceof Utf8 ? (Utf8)this.issued : null);
          }
          break;

        case 18:
          if (in.readIndex() != 1) {
            in.readNull();
            this.modified = null;
          } else {
            this.modified = in.readString(this.modified instanceof Utf8 ? (Utf8)this.modified : null);
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.dctType = null;
          } else {
            if (this.dctType == null) {
              this.dctType = new no.digdir.fdk.model.ReferenceDataCode();
            }
            this.dctType.customDecode(in);
          }
          break;

        case 20:
          if (in.readIndex() != 1) {
            in.readNull();
            this.accessRights = null;
          } else {
            if (this.accessRights == null) {
              this.accessRights = new no.digdir.fdk.model.ReferenceDataCode();
            }
            this.accessRights.customDecode(in);
          }
          break;

        case 21:
          if (in.readIndex() != 1) {
            in.readNull();
            this.language = null;
          } else {
            long size9 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.ReferenceDataCode> a9 = this.language;
            if (a9 == null) {
              a9 = new SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode>((int)size9, SCHEMA$.getField("language").schema().getTypes().get(1));
              this.language = a9;
            } else a9.clear();
            SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode> ga9 = (a9 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode>)a9 : null);
            for ( ; 0 < size9; size9 = in.arrayNext()) {
              for ( ; size9 != 0; size9--) {
                no.digdir.fdk.model.ReferenceDataCode e9 = (ga9 != null ? ga9.peek() : null);
                if (e9 == null) {
                  e9 = new no.digdir.fdk.model.ReferenceDataCode();
                }
                e9.customDecode(in);
                a9.add(e9);
              }
            }
          }
          break;

        case 22:
          if (in.readIndex() != 1) {
            in.readNull();
            this.page = null;
          } else {
            long size10 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a10 = this.page;
            if (a10 == null) {
              a10 = new SpecificData.Array<java.lang.CharSequence>((int)size10, SCHEMA$.getField("page").schema().getTypes().get(1));
              this.page = a10;
            } else a10.clear();
            SpecificData.Array<java.lang.CharSequence> ga10 = (a10 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a10 : null);
            for ( ; 0 < size10; size10 = in.arrayNext()) {
              for ( ; size10 != 0; size10--) {
                java.lang.CharSequence e10 = (ga10 != null ? ga10.peek() : null);
                e10 = in.readString(e10 instanceof Utf8 ? (Utf8)e10 : null);
                a10.add(e10);
              }
            }
          }
          break;

        case 23:
          if (in.readIndex() != 1) {
            in.readNull();
            this.landingPage = null;
          } else {
            long size11 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a11 = this.landingPage;
            if (a11 == null) {
              a11 = new SpecificData.Array<java.lang.CharSequence>((int)size11, SCHEMA$.getField("landingPage").schema().getTypes().get(1));
              this.landingPage = a11;
            } else a11.clear();
            SpecificData.Array<java.lang.CharSequence> ga11 = (a11 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a11 : null);
            for ( ; 0 < size11; size11 = in.arrayNext()) {
              for ( ; size11 != 0; size11--) {
                java.lang.CharSequence e11 = (ga11 != null ? ga11.peek() : null);
                e11 = in.readString(e11 instanceof Utf8 ? (Utf8)e11 : null);
                a11.add(e11);
              }
            }
          }
          break;

        case 24:
          if (in.readIndex() != 1) {
            in.readNull();
            this.temporal = null;
          } else {
            long size12 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.Temporal> a12 = this.temporal;
            if (a12 == null) {
              a12 = new SpecificData.Array<no.digdir.fdk.model.Temporal>((int)size12, SCHEMA$.getField("temporal").schema().getTypes().get(1));
              this.temporal = a12;
            } else a12.clear();
            SpecificData.Array<no.digdir.fdk.model.Temporal> ga12 = (a12 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.Temporal>)a12 : null);
            for ( ; 0 < size12; size12 = in.arrayNext()) {
              for ( ; size12 != 0; size12--) {
                no.digdir.fdk.model.Temporal e12 = (ga12 != null ? ga12.peek() : null);
                if (e12 == null) {
                  e12 = new no.digdir.fdk.model.Temporal();
                }
                e12.customDecode(in);
                a12.add(e12);
              }
            }
          }
          break;

        case 25:
          if (in.readIndex() != 1) {
            in.readNull();
            this.subject = null;
          } else {
            long size13 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.dataset.Subject> a13 = this.subject;
            if (a13 == null) {
              a13 = new SpecificData.Array<no.digdir.fdk.model.dataset.Subject>((int)size13, SCHEMA$.getField("subject").schema().getTypes().get(1));
              this.subject = a13;
            } else a13.clear();
            SpecificData.Array<no.digdir.fdk.model.dataset.Subject> ga13 = (a13 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.dataset.Subject>)a13 : null);
            for ( ; 0 < size13; size13 = in.arrayNext()) {
              for ( ; size13 != 0; size13--) {
                no.digdir.fdk.model.dataset.Subject e13 = (ga13 != null ? ga13.peek() : null);
                if (e13 == null) {
                  e13 = new no.digdir.fdk.model.dataset.Subject();
                }
                e13.customDecode(in);
                a13.add(e13);
              }
            }
          }
          break;

        case 26:
          if (in.readIndex() != 1) {
            in.readNull();
            this.spatial = null;
          } else {
            long size14 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.ReferenceDataCode> a14 = this.spatial;
            if (a14 == null) {
              a14 = new SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode>((int)size14, SCHEMA$.getField("spatial").schema().getTypes().get(1));
              this.spatial = a14;
            } else a14.clear();
            SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode> ga14 = (a14 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.ReferenceDataCode>)a14 : null);
            for ( ; 0 < size14; size14 = in.arrayNext()) {
              for ( ; size14 != 0; size14--) {
                no.digdir.fdk.model.ReferenceDataCode e14 = (ga14 != null ? ga14.peek() : null);
                if (e14 == null) {
                  e14 = new no.digdir.fdk.model.ReferenceDataCode();
                }
                e14.customDecode(in);
                a14.add(e14);
              }
            }
          }
          break;

        case 27:
          if (in.readIndex() != 1) {
            in.readNull();
            this.provenance = null;
          } else {
            if (this.provenance == null) {
              this.provenance = new no.digdir.fdk.model.ReferenceDataCode();
            }
            this.provenance.customDecode(in);
          }
          break;

        case 28:
          if (in.readIndex() != 1) {
            in.readNull();
            this.accrualPeriodicity = null;
          } else {
            if (this.accrualPeriodicity == null) {
              this.accrualPeriodicity = new no.digdir.fdk.model.ReferenceDataCode();
            }
            this.accrualPeriodicity.customDecode(in);
          }
          break;

        case 29:
          if (in.readIndex() != 1) {
            in.readNull();
            this.legalBasisForRestriction = null;
          } else {
            long size15 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a15 = this.legalBasisForRestriction;
            if (a15 == null) {
              a15 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size15, SCHEMA$.getField("legalBasisForRestriction").schema().getTypes().get(1));
              this.legalBasisForRestriction = a15;
            } else a15.clear();
            SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga15 = (a15 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a15 : null);
            for ( ; 0 < size15; size15 = in.arrayNext()) {
              for ( ; size15 != 0; size15--) {
                no.digdir.fdk.model.UriWithLabelAndType e15 = (ga15 != null ? ga15.peek() : null);
                if (e15 == null) {
                  e15 = new no.digdir.fdk.model.UriWithLabelAndType();
                }
                e15.customDecode(in);
                a15.add(e15);
              }
            }
          }
          break;

        case 30:
          if (in.readIndex() != 1) {
            in.readNull();
            this.legalBasisForProcessing = null;
          } else {
            long size16 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a16 = this.legalBasisForProcessing;
            if (a16 == null) {
              a16 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size16, SCHEMA$.getField("legalBasisForProcessing").schema().getTypes().get(1));
              this.legalBasisForProcessing = a16;
            } else a16.clear();
            SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga16 = (a16 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a16 : null);
            for ( ; 0 < size16; size16 = in.arrayNext()) {
              for ( ; size16 != 0; size16--) {
                no.digdir.fdk.model.UriWithLabelAndType e16 = (ga16 != null ? ga16.peek() : null);
                if (e16 == null) {
                  e16 = new no.digdir.fdk.model.UriWithLabelAndType();
                }
                e16.customDecode(in);
                a16.add(e16);
              }
            }
          }
          break;

        case 31:
          if (in.readIndex() != 1) {
            in.readNull();
            this.legalBasisForAccess = null;
          } else {
            long size17 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a17 = this.legalBasisForAccess;
            if (a17 == null) {
              a17 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size17, SCHEMA$.getField("legalBasisForAccess").schema().getTypes().get(1));
              this.legalBasisForAccess = a17;
            } else a17.clear();
            SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga17 = (a17 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a17 : null);
            for ( ; 0 < size17; size17 = in.arrayNext()) {
              for ( ; size17 != 0; size17--) {
                no.digdir.fdk.model.UriWithLabelAndType e17 = (ga17 != null ? ga17.peek() : null);
                if (e17 == null) {
                  e17 = new no.digdir.fdk.model.UriWithLabelAndType();
                }
                e17.customDecode(in);
                a17.add(e17);
              }
            }
          }
          break;

        case 32:
          if (in.readIndex() != 1) {
            in.readNull();
            this.conformsTo = null;
          } else {
            long size18 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.UriWithLabel> a18 = this.conformsTo;
            if (a18 == null) {
              a18 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabel>((int)size18, SCHEMA$.getField("conformsTo").schema().getTypes().get(1));
              this.conformsTo = a18;
            } else a18.clear();
            SpecificData.Array<no.digdir.fdk.model.UriWithLabel> ga18 = (a18 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabel>)a18 : null);
            for ( ; 0 < size18; size18 = in.arrayNext()) {
              for ( ; size18 != 0; size18--) {
                no.digdir.fdk.model.UriWithLabel e18 = (ga18 != null ? ga18.peek() : null);
                if (e18 == null) {
                  e18 = new no.digdir.fdk.model.UriWithLabel();
                }
                e18.customDecode(in);
                a18.add(e18);
              }
            }
          }
          break;

        case 33:
          if (in.readIndex() != 1) {
            in.readNull();
            this.informationModel = null;
          } else {
            long size19 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a19 = this.informationModel;
            if (a19 == null) {
              a19 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size19, SCHEMA$.getField("informationModel").schema().getTypes().get(1));
              this.informationModel = a19;
            } else a19.clear();
            SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga19 = (a19 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a19 : null);
            for ( ; 0 < size19; size19 = in.arrayNext()) {
              for ( ; size19 != 0; size19--) {
                no.digdir.fdk.model.UriWithLabelAndType e19 = (ga19 != null ? ga19.peek() : null);
                if (e19 == null) {
                  e19 = new no.digdir.fdk.model.UriWithLabelAndType();
                }
                e19.customDecode(in);
                a19.add(e19);
              }
            }
          }
          break;

        case 34:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hasAccuracyAnnotation = null;
          } else {
            if (this.hasAccuracyAnnotation == null) {
              this.hasAccuracyAnnotation = new no.digdir.fdk.model.dataset.QualityAnnotation();
            }
            this.hasAccuracyAnnotation.customDecode(in);
          }
          break;

        case 35:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hasCompletenessAnnotation = null;
          } else {
            if (this.hasCompletenessAnnotation == null) {
              this.hasCompletenessAnnotation = new no.digdir.fdk.model.dataset.QualityAnnotation();
            }
            this.hasCompletenessAnnotation.customDecode(in);
          }
          break;

        case 36:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hasCurrentnessAnnotation = null;
          } else {
            if (this.hasCurrentnessAnnotation == null) {
              this.hasCurrentnessAnnotation = new no.digdir.fdk.model.dataset.QualityAnnotation();
            }
            this.hasCurrentnessAnnotation.customDecode(in);
          }
          break;

        case 37:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hasAvailabilityAnnotation = null;
          } else {
            if (this.hasAvailabilityAnnotation == null) {
              this.hasAvailabilityAnnotation = new no.digdir.fdk.model.dataset.QualityAnnotation();
            }
            this.hasAvailabilityAnnotation.customDecode(in);
          }
          break;

        case 38:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hasRelevanceAnnotation = null;
          } else {
            if (this.hasRelevanceAnnotation == null) {
              this.hasRelevanceAnnotation = new no.digdir.fdk.model.dataset.QualityAnnotation();
            }
            this.hasRelevanceAnnotation.customDecode(in);
          }
          break;

        case 39:
          if (in.readIndex() != 1) {
            in.readNull();
            this.qualifiedAttributions = null;
          } else {
            long size20 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.dataset.QualifiedAttribution> a20 = this.qualifiedAttributions;
            if (a20 == null) {
              a20 = new SpecificData.Array<no.digdir.fdk.model.dataset.QualifiedAttribution>((int)size20, SCHEMA$.getField("qualifiedAttributions").schema().getTypes().get(1));
              this.qualifiedAttributions = a20;
            } else a20.clear();
            SpecificData.Array<no.digdir.fdk.model.dataset.QualifiedAttribution> ga20 = (a20 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.dataset.QualifiedAttribution>)a20 : null);
            for ( ; 0 < size20; size20 = in.arrayNext()) {
              for ( ; size20 != 0; size20--) {
                no.digdir.fdk.model.dataset.QualifiedAttribution e20 = (ga20 != null ? ga20.peek() : null);
                if (e20 == null) {
                  e20 = new no.digdir.fdk.model.dataset.QualifiedAttribution();
                }
                e20.customDecode(in);
                a20.add(e20);
              }
            }
          }
          break;

        case 40:
          this.isOpenData = in.readBoolean();
          break;

        case 41:
          this.isAuthoritative = in.readBoolean();
          break;

        case 42:
          this.isRelatedToTransportportal = in.readBoolean();
          break;

        case 43:
          if (in.readIndex() != 1) {
            in.readNull();
            this.inSeries = null;
          } else {
            if (this.inSeries == null) {
              this.inSeries = new no.digdir.fdk.model.dataset.InSeries();
            }
            this.inSeries.customDecode(in);
          }
          break;

        case 44:
          if (in.readIndex() != 1) {
            in.readNull();
            this.prev = null;
          } else {
            this.prev = in.readString(this.prev instanceof Utf8 ? (Utf8)this.prev : null);
          }
          break;

        case 45:
          if (in.readIndex() != 1) {
            in.readNull();
            this.last = null;
          } else {
            this.last = in.readString(this.last instanceof Utf8 ? (Utf8)this.last : null);
          }
          break;

        case 46:
          if (in.readIndex() != 1) {
            in.readNull();
            this.datasetsInSeries = null;
          } else {
            long size21 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a21 = this.datasetsInSeries;
            if (a21 == null) {
              a21 = new SpecificData.Array<java.lang.CharSequence>((int)size21, SCHEMA$.getField("datasetsInSeries").schema().getTypes().get(1));
              this.datasetsInSeries = a21;
            } else a21.clear();
            SpecificData.Array<java.lang.CharSequence> ga21 = (a21 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a21 : null);
            for ( ; 0 < size21; size21 = in.arrayNext()) {
              for ( ; size21 != 0; size21--) {
                java.lang.CharSequence e21 = (ga21 != null ? ga21.peek() : null);
                e21 = in.readString(e21 instanceof Utf8 ? (Utf8)e21 : null);
                a21.add(e21);
              }
            }
          }
          break;

        case 47:
          if (in.readIndex() != 1) {
            in.readNull();
            this.type = null;
          } else {
            this.type = no.digdir.fdk.model.ResourceType.values()[in.readEnum()];
          }
          break;

        case 48:
          if (in.readIndex() != 1) {
            in.readNull();
            this.specializedType = null;
          } else {
            this.specializedType = no.digdir.fdk.model.dataset.DatasetType.values()[in.readEnum()];
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










