/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model.dataset;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Dataset subject information */
@org.apache.avro.specific.AvroGenerated
public class Subject extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4510702479620276873L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Subject\",\"namespace\":\"no.digdir.fdk.model.dataset\",\"doc\":\"Dataset subject information\",\"fields\":[{\"name\":\"identifier\",\"type\":[\"null\",\"string\"],\"doc\":\"Identifier for the subject\"},{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the subject\"},{\"name\":\"prefLabel\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LocalizedStrings\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Multilingual texts\",\"fields\":[{\"name\":\"no\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian'\"},{\"name\":\"nb\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian bokm√•l'\"},{\"name\":\"nn\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian nynorsk'\"},{\"name\":\"en\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in english'\"}]}],\"doc\":\"Multilingual label of the subject\"},{\"name\":\"definition\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual definition of the subject\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Subject> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Subject> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Subject> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Subject> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Subject> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Subject to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Subject from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Subject instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Subject fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Identifier for the subject */
  private java.lang.CharSequence identifier;
  /** URI for the subject */
  private java.lang.CharSequence uri;
  /** Multilingual label of the subject */
  private no.digdir.fdk.model.LocalizedStrings prefLabel;
  /** Multilingual definition of the subject */
  private no.digdir.fdk.model.LocalizedStrings definition;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Subject() {}

  /**
   * All-args constructor.
   * @param identifier Identifier for the subject
   * @param uri URI for the subject
   * @param prefLabel Multilingual label of the subject
   * @param definition Multilingual definition of the subject
   */
  public Subject(java.lang.CharSequence identifier, java.lang.CharSequence uri, no.digdir.fdk.model.LocalizedStrings prefLabel, no.digdir.fdk.model.LocalizedStrings definition) {
    this.identifier = identifier;
    this.uri = uri;
    this.prefLabel = prefLabel;
    this.definition = definition;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return identifier;
    case 1: return uri;
    case 2: return prefLabel;
    case 3: return definition;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: identifier = (java.lang.CharSequence)value$; break;
    case 1: uri = (java.lang.CharSequence)value$; break;
    case 2: prefLabel = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    case 3: definition = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'identifier' field.
   * @return Identifier for the subject
   */
  public java.lang.CharSequence getIdentifier() {
    return identifier;
  }


  /**
   * Sets the value of the 'identifier' field.
   * Identifier for the subject
   * @param value the value to set.
   */
  public void setIdentifier(java.lang.CharSequence value) {
    this.identifier = value;
  }

  /**
   * Gets the value of the 'uri' field.
   * @return URI for the subject
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * URI for the subject
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'prefLabel' field.
   * @return Multilingual label of the subject
   */
  public no.digdir.fdk.model.LocalizedStrings getPrefLabel() {
    return prefLabel;
  }


  /**
   * Sets the value of the 'prefLabel' field.
   * Multilingual label of the subject
   * @param value the value to set.
   */
  public void setPrefLabel(no.digdir.fdk.model.LocalizedStrings value) {
    this.prefLabel = value;
  }

  /**
   * Gets the value of the 'definition' field.
   * @return Multilingual definition of the subject
   */
  public no.digdir.fdk.model.LocalizedStrings getDefinition() {
    return definition;
  }


  /**
   * Sets the value of the 'definition' field.
   * Multilingual definition of the subject
   * @param value the value to set.
   */
  public void setDefinition(no.digdir.fdk.model.LocalizedStrings value) {
    this.definition = value;
  }

  /**
   * Creates a new Subject RecordBuilder.
   * @return A new Subject RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Subject.Builder newBuilder() {
    return new no.digdir.fdk.model.dataset.Subject.Builder();
  }

  /**
   * Creates a new Subject RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Subject RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Subject.Builder newBuilder(no.digdir.fdk.model.dataset.Subject.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.Subject.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.Subject.Builder(other);
    }
  }

  /**
   * Creates a new Subject RecordBuilder by copying an existing Subject instance.
   * @param other The existing instance to copy.
   * @return A new Subject RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Subject.Builder newBuilder(no.digdir.fdk.model.dataset.Subject other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.Subject.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.Subject.Builder(other);
    }
  }

  /**
   * RecordBuilder for Subject instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Subject>
    implements org.apache.avro.data.RecordBuilder<Subject> {

    /** Identifier for the subject */
    private java.lang.CharSequence identifier;
    /** URI for the subject */
    private java.lang.CharSequence uri;
    /** Multilingual label of the subject */
    private no.digdir.fdk.model.LocalizedStrings prefLabel;
    private no.digdir.fdk.model.LocalizedStrings.Builder prefLabelBuilder;
    /** Multilingual definition of the subject */
    private no.digdir.fdk.model.LocalizedStrings definition;
    private no.digdir.fdk.model.LocalizedStrings.Builder definitionBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.Subject.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.uri)) {
        this.uri = data().deepCopy(fields()[1].schema(), other.uri);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.prefLabel)) {
        this.prefLabel = data().deepCopy(fields()[2].schema(), other.prefLabel);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasPrefLabelBuilder()) {
        this.prefLabelBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getPrefLabelBuilder());
      }
      if (isValidValue(fields()[3], other.definition)) {
        this.definition = data().deepCopy(fields()[3].schema(), other.definition);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasDefinitionBuilder()) {
        this.definitionBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getDefinitionBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Subject instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.Subject other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.identifier)) {
        this.identifier = data().deepCopy(fields()[0].schema(), other.identifier);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.uri)) {
        this.uri = data().deepCopy(fields()[1].schema(), other.uri);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.prefLabel)) {
        this.prefLabel = data().deepCopy(fields()[2].schema(), other.prefLabel);
        fieldSetFlags()[2] = true;
      }
      this.prefLabelBuilder = null;
      if (isValidValue(fields()[3], other.definition)) {
        this.definition = data().deepCopy(fields()[3].schema(), other.definition);
        fieldSetFlags()[3] = true;
      }
      this.definitionBuilder = null;
    }

    /**
      * Gets the value of the 'identifier' field.
      * Identifier for the subject
      * @return The value.
      */
    public java.lang.CharSequence getIdentifier() {
      return identifier;
    }


    /**
      * Sets the value of the 'identifier' field.
      * Identifier for the subject
      * @param value The value of 'identifier'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Subject.Builder setIdentifier(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.identifier = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identifier' field has been set.
      * Identifier for the subject
      * @return True if the 'identifier' field has been set, false otherwise.
      */
    public boolean hasIdentifier() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'identifier' field.
      * Identifier for the subject
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Subject.Builder clearIdentifier() {
      identifier = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'uri' field.
      * URI for the subject
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * URI for the subject
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Subject.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.uri = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * URI for the subject
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'uri' field.
      * URI for the subject
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Subject.Builder clearUri() {
      uri = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'prefLabel' field.
      * Multilingual label of the subject
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getPrefLabel() {
      return prefLabel;
    }


    /**
      * Sets the value of the 'prefLabel' field.
      * Multilingual label of the subject
      * @param value The value of 'prefLabel'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Subject.Builder setPrefLabel(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[2], value);
      this.prefLabelBuilder = null;
      this.prefLabel = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'prefLabel' field has been set.
      * Multilingual label of the subject
      * @return True if the 'prefLabel' field has been set, false otherwise.
      */
    public boolean hasPrefLabel() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'prefLabel' field and creates one if it doesn't exist yet.
     * Multilingual label of the subject
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getPrefLabelBuilder() {
      if (prefLabelBuilder == null) {
        if (hasPrefLabel()) {
          setPrefLabelBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(prefLabel));
        } else {
          setPrefLabelBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return prefLabelBuilder;
    }

    /**
     * Sets the Builder instance for the 'prefLabel' field
     * Multilingual label of the subject
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Subject.Builder setPrefLabelBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearPrefLabel();
      prefLabelBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'prefLabel' field has an active Builder instance
     * Multilingual label of the subject
     * @return True if the 'prefLabel' field has an active Builder instance
     */
    public boolean hasPrefLabelBuilder() {
      return prefLabelBuilder != null;
    }

    /**
      * Clears the value of the 'prefLabel' field.
      * Multilingual label of the subject
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Subject.Builder clearPrefLabel() {
      prefLabel = null;
      prefLabelBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'definition' field.
      * Multilingual definition of the subject
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getDefinition() {
      return definition;
    }


    /**
      * Sets the value of the 'definition' field.
      * Multilingual definition of the subject
      * @param value The value of 'definition'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Subject.Builder setDefinition(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[3], value);
      this.definitionBuilder = null;
      this.definition = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'definition' field has been set.
      * Multilingual definition of the subject
      * @return True if the 'definition' field has been set, false otherwise.
      */
    public boolean hasDefinition() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'definition' field and creates one if it doesn't exist yet.
     * Multilingual definition of the subject
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getDefinitionBuilder() {
      if (definitionBuilder == null) {
        if (hasDefinition()) {
          setDefinitionBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(definition));
        } else {
          setDefinitionBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return definitionBuilder;
    }

    /**
     * Sets the Builder instance for the 'definition' field
     * Multilingual definition of the subject
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Subject.Builder setDefinitionBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearDefinition();
      definitionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'definition' field has an active Builder instance
     * Multilingual definition of the subject
     * @return True if the 'definition' field has an active Builder instance
     */
    public boolean hasDefinitionBuilder() {
      return definitionBuilder != null;
    }

    /**
      * Clears the value of the 'definition' field.
      * Multilingual definition of the subject
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Subject.Builder clearDefinition() {
      definition = null;
      definitionBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Subject build() {
      try {
        Subject record = new Subject();
        record.identifier = fieldSetFlags()[0] ? this.identifier : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.uri = fieldSetFlags()[1] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (prefLabelBuilder != null) {
          try {
            record.prefLabel = this.prefLabelBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("prefLabel"));
            throw e;
          }
        } else {
          record.prefLabel = fieldSetFlags()[2] ? this.prefLabel : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[2]);
        }
        if (definitionBuilder != null) {
          try {
            record.definition = this.definitionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("definition"));
            throw e;
          }
        } else {
          record.definition = fieldSetFlags()[3] ? this.definition : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Subject>
    WRITER$ = (org.apache.avro.io.DatumWriter<Subject>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Subject>
    READER$ = (org.apache.avro.io.DatumReader<Subject>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.identifier == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.identifier);
    }

    if (this.uri == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.uri);
    }

    if (this.prefLabel == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.prefLabel.customEncode(out);
    }

    if (this.definition == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.definition.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.identifier = null;
      } else {
        this.identifier = in.readString(this.identifier instanceof Utf8 ? (Utf8)this.identifier : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.uri = null;
      } else {
        this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.prefLabel = null;
      } else {
        if (this.prefLabel == null) {
          this.prefLabel = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.prefLabel.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.definition = null;
      } else {
        if (this.definition == null) {
          this.definition = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.definition.customDecode(in);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.identifier = null;
          } else {
            this.identifier = in.readString(this.identifier instanceof Utf8 ? (Utf8)this.identifier : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.uri = null;
          } else {
            this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.prefLabel = null;
          } else {
            if (this.prefLabel == null) {
              this.prefLabel = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.prefLabel.customDecode(in);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.definition = null;
          } else {
            if (this.definition == null) {
              this.definition = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.definition.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










