/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model.dataset;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information about a distribution access service */
@org.apache.avro.specific.AvroGenerated
public class AccessService extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 734951747556836074L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccessService\",\"namespace\":\"no.digdir.fdk.model.dataset\",\"doc\":\"Information about a distribution access service\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the access service\"},{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LocalizedStrings\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Multilingual texts\",\"fields\":[{\"name\":\"no\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian'\"},{\"name\":\"nb\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian bokm√•l'\"},{\"name\":\"nn\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian nynorsk'\"},{\"name\":\"en\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in english'\"}]}],\"doc\":\"Multilingual title of the access service\"},{\"name\":\"description\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual description of the access service\"},{\"name\":\"endpointDescription\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UriWithLabelAndType\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"URI with associated label and type\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"]},{\"name\":\"extraType\",\"type\":[\"null\",\"string\"],\"doc\":\"Associated type\"},{\"name\":\"prefLabel\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual label\"}]}}],\"doc\":\"Description of the services available via the end-points\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AccessService> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AccessService> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AccessService> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AccessService> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AccessService> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AccessService to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AccessService from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AccessService instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AccessService fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** URI for the access service */
  private java.lang.CharSequence uri;
  /** Multilingual title of the access service */
  private no.digdir.fdk.model.LocalizedStrings title;
  /** Multilingual description of the access service */
  private no.digdir.fdk.model.LocalizedStrings description;
  /** Description of the services available via the end-points */
  private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> endpointDescription;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccessService() {}

  /**
   * All-args constructor.
   * @param uri URI for the access service
   * @param title Multilingual title of the access service
   * @param description Multilingual description of the access service
   * @param endpointDescription Description of the services available via the end-points
   */
  public AccessService(java.lang.CharSequence uri, no.digdir.fdk.model.LocalizedStrings title, no.digdir.fdk.model.LocalizedStrings description, java.util.List<no.digdir.fdk.model.UriWithLabelAndType> endpointDescription) {
    this.uri = uri;
    this.title = title;
    this.description = description;
    this.endpointDescription = endpointDescription;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return title;
    case 2: return description;
    case 3: return endpointDescription;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: title = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    case 2: description = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    case 3: endpointDescription = (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return URI for the access service
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * URI for the access service
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return Multilingual title of the access service
   */
  public no.digdir.fdk.model.LocalizedStrings getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * Multilingual title of the access service
   * @param value the value to set.
   */
  public void setTitle(no.digdir.fdk.model.LocalizedStrings value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Multilingual description of the access service
   */
  public no.digdir.fdk.model.LocalizedStrings getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * Multilingual description of the access service
   * @param value the value to set.
   */
  public void setDescription(no.digdir.fdk.model.LocalizedStrings value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'endpointDescription' field.
   * @return Description of the services available via the end-points
   */
  public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getEndpointDescription() {
    return endpointDescription;
  }


  /**
   * Sets the value of the 'endpointDescription' field.
   * Description of the services available via the end-points
   * @param value the value to set.
   */
  public void setEndpointDescription(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
    this.endpointDescription = value;
  }

  /**
   * Creates a new AccessService RecordBuilder.
   * @return A new AccessService RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.AccessService.Builder newBuilder() {
    return new no.digdir.fdk.model.dataset.AccessService.Builder();
  }

  /**
   * Creates a new AccessService RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccessService RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.AccessService.Builder newBuilder(no.digdir.fdk.model.dataset.AccessService.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.AccessService.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.AccessService.Builder(other);
    }
  }

  /**
   * Creates a new AccessService RecordBuilder by copying an existing AccessService instance.
   * @param other The existing instance to copy.
   * @return A new AccessService RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.AccessService.Builder newBuilder(no.digdir.fdk.model.dataset.AccessService other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.AccessService.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.AccessService.Builder(other);
    }
  }

  /**
   * RecordBuilder for AccessService instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccessService>
    implements org.apache.avro.data.RecordBuilder<AccessService> {

    /** URI for the access service */
    private java.lang.CharSequence uri;
    /** Multilingual title of the access service */
    private no.digdir.fdk.model.LocalizedStrings title;
    private no.digdir.fdk.model.LocalizedStrings.Builder titleBuilder;
    /** Multilingual description of the access service */
    private no.digdir.fdk.model.LocalizedStrings description;
    private no.digdir.fdk.model.LocalizedStrings.Builder descriptionBuilder;
    /** Description of the services available via the end-points */
    private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> endpointDescription;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.AccessService.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasTitleBuilder()) {
        this.titleBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getTitleBuilder());
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasDescriptionBuilder()) {
        this.descriptionBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getDescriptionBuilder());
      }
      if (isValidValue(fields()[3], other.endpointDescription)) {
        this.endpointDescription = data().deepCopy(fields()[3].schema(), other.endpointDescription);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AccessService instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.AccessService other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      this.titleBuilder = null;
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      this.descriptionBuilder = null;
      if (isValidValue(fields()[3], other.endpointDescription)) {
        this.endpointDescription = data().deepCopy(fields()[3].schema(), other.endpointDescription);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'uri' field.
      * URI for the access service
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * URI for the access service
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.AccessService.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * URI for the access service
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * URI for the access service
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.AccessService.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * Multilingual title of the access service
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * Multilingual title of the access service
      * @param value The value of 'title'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.AccessService.Builder setTitle(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[1], value);
      this.titleBuilder = null;
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * Multilingual title of the access service
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'title' field and creates one if it doesn't exist yet.
     * Multilingual title of the access service
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getTitleBuilder() {
      if (titleBuilder == null) {
        if (hasTitle()) {
          setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(title));
        } else {
          setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return titleBuilder;
    }

    /**
     * Sets the Builder instance for the 'title' field
     * Multilingual title of the access service
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.AccessService.Builder setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearTitle();
      titleBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'title' field has an active Builder instance
     * Multilingual title of the access service
     * @return True if the 'title' field has an active Builder instance
     */
    public boolean hasTitleBuilder() {
      return titleBuilder != null;
    }

    /**
      * Clears the value of the 'title' field.
      * Multilingual title of the access service
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.AccessService.Builder clearTitle() {
      title = null;
      titleBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Multilingual description of the access service
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Multilingual description of the access service
      * @param value The value of 'description'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.AccessService.Builder setDescription(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[2], value);
      this.descriptionBuilder = null;
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Multilingual description of the access service
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'description' field and creates one if it doesn't exist yet.
     * Multilingual description of the access service
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getDescriptionBuilder() {
      if (descriptionBuilder == null) {
        if (hasDescription()) {
          setDescriptionBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(description));
        } else {
          setDescriptionBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return descriptionBuilder;
    }

    /**
     * Sets the Builder instance for the 'description' field
     * Multilingual description of the access service
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.AccessService.Builder setDescriptionBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearDescription();
      descriptionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'description' field has an active Builder instance
     * Multilingual description of the access service
     * @return True if the 'description' field has an active Builder instance
     */
    public boolean hasDescriptionBuilder() {
      return descriptionBuilder != null;
    }

    /**
      * Clears the value of the 'description' field.
      * Multilingual description of the access service
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.AccessService.Builder clearDescription() {
      description = null;
      descriptionBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'endpointDescription' field.
      * Description of the services available via the end-points
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getEndpointDescription() {
      return endpointDescription;
    }


    /**
      * Sets the value of the 'endpointDescription' field.
      * Description of the services available via the end-points
      * @param value The value of 'endpointDescription'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.AccessService.Builder setEndpointDescription(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
      validate(fields()[3], value);
      this.endpointDescription = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'endpointDescription' field has been set.
      * Description of the services available via the end-points
      * @return True if the 'endpointDescription' field has been set, false otherwise.
      */
    public boolean hasEndpointDescription() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'endpointDescription' field.
      * Description of the services available via the end-points
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.AccessService.Builder clearEndpointDescription() {
      endpointDescription = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AccessService build() {
      try {
        AccessService record = new AccessService();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (titleBuilder != null) {
          try {
            record.title = this.titleBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("title"));
            throw e;
          }
        } else {
          record.title = fieldSetFlags()[1] ? this.title : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[1]);
        }
        if (descriptionBuilder != null) {
          try {
            record.description = this.descriptionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("description"));
            throw e;
          }
        } else {
          record.description = fieldSetFlags()[2] ? this.description : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[2]);
        }
        record.endpointDescription = fieldSetFlags()[3] ? this.endpointDescription : (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AccessService>
    WRITER$ = (org.apache.avro.io.DatumWriter<AccessService>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AccessService>
    READER$ = (org.apache.avro.io.DatumReader<AccessService>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.uri == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.uri);
    }

    if (this.title == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.title.customEncode(out);
    }

    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.description.customEncode(out);
    }

    if (this.endpointDescription == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.endpointDescription.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (no.digdir.fdk.model.UriWithLabelAndType e0: this.endpointDescription) {
        actualSize0++;
        out.startItem();
        e0.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.uri = null;
      } else {
        this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.title = null;
      } else {
        if (this.title == null) {
          this.title = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.title.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        if (this.description == null) {
          this.description = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.description.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.endpointDescription = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a0 = this.endpointDescription;
        if (a0 == null) {
          a0 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size0, SCHEMA$.getField("endpointDescription").schema().getTypes().get(1));
          this.endpointDescription = a0;
        } else a0.clear();
        SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            no.digdir.fdk.model.UriWithLabelAndType e0 = (ga0 != null ? ga0.peek() : null);
            if (e0 == null) {
              e0 = new no.digdir.fdk.model.UriWithLabelAndType();
            }
            e0.customDecode(in);
            a0.add(e0);
          }
        }
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.uri = null;
          } else {
            this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.title = null;
          } else {
            if (this.title == null) {
              this.title = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.title.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            if (this.description == null) {
              this.description = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.description.customDecode(in);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.endpointDescription = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a0 = this.endpointDescription;
            if (a0 == null) {
              a0 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size0, SCHEMA$.getField("endpointDescription").schema().getTypes().get(1));
              this.endpointDescription = a0;
            } else a0.clear();
            SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                no.digdir.fdk.model.UriWithLabelAndType e0 = (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new no.digdir.fdk.model.UriWithLabelAndType();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










