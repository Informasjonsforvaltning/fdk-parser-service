/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model.dataset;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Distribution information */
@org.apache.avro.specific.AvroGenerated
public class Distribution extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7018665996361126738L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Distribution\",\"namespace\":\"no.digdir.fdk.model.dataset\",\"doc\":\"Distribution information\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the distribution\"},{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LocalizedStrings\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Multilingual texts\",\"fields\":[{\"name\":\"no\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian'\"},{\"name\":\"nb\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian bokm√•l'\"},{\"name\":\"nn\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian nynorsk'\"},{\"name\":\"en\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in english'\"}]}],\"doc\":\"Multilingual title of the distribution\"},{\"name\":\"description\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual description of the distribution\"},{\"name\":\"accessURL\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"URL for accessing the distribution\"},{\"name\":\"downloadURL\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"URL for downloading the distribution\"},{\"name\":\"license\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UriWithLabelAndType\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"URI with associated label and type\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"]},{\"name\":\"extraType\",\"type\":[\"null\",\"string\"],\"doc\":\"Associated type\"},{\"name\":\"prefLabel\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual label\"}]}}],\"doc\":\"Licences under which the distribution is made available\"},{\"name\":\"conformsTo\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"UriWithLabel\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"URI and associated preferred label\",\"fields\":[{\"name\":\"uri\",\"type\":[\"string\",\"null\"]},{\"name\":\"prefLabel\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual label\"}]}}],\"doc\":\"Established schemas to which the described distribution conforms\"},{\"name\":\"page\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.UriWithLabelAndType\"}],\"doc\":\"Page or documents about this distribution\"},{\"name\":\"fdkFormat\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Format\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Information about format or media type\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the format\"},{\"name\":\"name\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the format\"},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"doc\":\"Code for the format\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"FormatType\",\"symbols\":[\"UNKNOWN\",\"MEDIA_TYPE\",\"FILE_TYPE\"],\"default\":\"UNKNOWN\"},\"doc\":\"Type of the format\"}]}}],\"doc\":\"Formats or media types of the distribution\"},{\"name\":\"compressFormat\",\"type\":[\"null\",\"no.digdir.fdk.model.Format\"],\"doc\":\"Compress format of the distribution\"},{\"name\":\"packageFormat\",\"type\":[\"null\",\"no.digdir.fdk.model.Format\"],\"doc\":\"Package format of the distribution\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"Type of the distribution\"},{\"name\":\"accessService\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AccessService\",\"doc\":\"Information about a distribution access service\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the access service\"},{\"name\":\"title\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual title of the access service\"},{\"name\":\"description\",\"type\":[\"null\",\"no.digdir.fdk.model.LocalizedStrings\"],\"doc\":\"Multilingual description of the access service\"},{\"name\":\"endpointDescription\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"no.digdir.fdk.model.UriWithLabelAndType\"}],\"doc\":\"Description of the services available via the end-points\"}]}}],\"doc\":\"Access services of the distribution\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Distribution> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Distribution> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Distribution> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Distribution> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Distribution> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Distribution to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Distribution from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Distribution instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Distribution fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** URI for the distribution */
  private java.lang.CharSequence uri;
  /** Multilingual title of the distribution */
  private no.digdir.fdk.model.LocalizedStrings title;
  /** Multilingual description of the distribution */
  private no.digdir.fdk.model.LocalizedStrings description;
  /** URL for accessing the distribution */
  private java.util.List<java.lang.CharSequence> accessURL;
  /** URL for downloading the distribution */
  private java.util.List<java.lang.CharSequence> downloadURL;
  /** Licences under which the distribution is made available */
  private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> license;
  /** Established schemas to which the described distribution conforms */
  private java.util.List<no.digdir.fdk.model.UriWithLabel> conformsTo;
  /** Page or documents about this distribution */
  private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> page;
  /** Formats or media types of the distribution */
  private java.util.List<no.digdir.fdk.model.Format> fdkFormat;
  /** Compress format of the distribution */
  private no.digdir.fdk.model.Format compressFormat;
  /** Package format of the distribution */
  private no.digdir.fdk.model.Format packageFormat;
  /** Type of the distribution */
  private java.lang.CharSequence type;
  /** Access services of the distribution */
  private java.util.List<no.digdir.fdk.model.dataset.AccessService> accessService;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Distribution() {}

  /**
   * All-args constructor.
   * @param uri URI for the distribution
   * @param title Multilingual title of the distribution
   * @param description Multilingual description of the distribution
   * @param accessURL URL for accessing the distribution
   * @param downloadURL URL for downloading the distribution
   * @param license Licences under which the distribution is made available
   * @param conformsTo Established schemas to which the described distribution conforms
   * @param page Page or documents about this distribution
   * @param fdkFormat Formats or media types of the distribution
   * @param compressFormat Compress format of the distribution
   * @param packageFormat Package format of the distribution
   * @param type Type of the distribution
   * @param accessService Access services of the distribution
   */
  public Distribution(java.lang.CharSequence uri, no.digdir.fdk.model.LocalizedStrings title, no.digdir.fdk.model.LocalizedStrings description, java.util.List<java.lang.CharSequence> accessURL, java.util.List<java.lang.CharSequence> downloadURL, java.util.List<no.digdir.fdk.model.UriWithLabelAndType> license, java.util.List<no.digdir.fdk.model.UriWithLabel> conformsTo, java.util.List<no.digdir.fdk.model.UriWithLabelAndType> page, java.util.List<no.digdir.fdk.model.Format> fdkFormat, no.digdir.fdk.model.Format compressFormat, no.digdir.fdk.model.Format packageFormat, java.lang.CharSequence type, java.util.List<no.digdir.fdk.model.dataset.AccessService> accessService) {
    this.uri = uri;
    this.title = title;
    this.description = description;
    this.accessURL = accessURL;
    this.downloadURL = downloadURL;
    this.license = license;
    this.conformsTo = conformsTo;
    this.page = page;
    this.fdkFormat = fdkFormat;
    this.compressFormat = compressFormat;
    this.packageFormat = packageFormat;
    this.type = type;
    this.accessService = accessService;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return title;
    case 2: return description;
    case 3: return accessURL;
    case 4: return downloadURL;
    case 5: return license;
    case 6: return conformsTo;
    case 7: return page;
    case 8: return fdkFormat;
    case 9: return compressFormat;
    case 10: return packageFormat;
    case 11: return type;
    case 12: return accessService;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: title = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    case 2: description = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    case 3: accessURL = (java.util.List<java.lang.CharSequence>)value$; break;
    case 4: downloadURL = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: license = (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>)value$; break;
    case 6: conformsTo = (java.util.List<no.digdir.fdk.model.UriWithLabel>)value$; break;
    case 7: page = (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>)value$; break;
    case 8: fdkFormat = (java.util.List<no.digdir.fdk.model.Format>)value$; break;
    case 9: compressFormat = (no.digdir.fdk.model.Format)value$; break;
    case 10: packageFormat = (no.digdir.fdk.model.Format)value$; break;
    case 11: type = (java.lang.CharSequence)value$; break;
    case 12: accessService = (java.util.List<no.digdir.fdk.model.dataset.AccessService>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return URI for the distribution
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * URI for the distribution
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return Multilingual title of the distribution
   */
  public no.digdir.fdk.model.LocalizedStrings getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * Multilingual title of the distribution
   * @param value the value to set.
   */
  public void setTitle(no.digdir.fdk.model.LocalizedStrings value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Multilingual description of the distribution
   */
  public no.digdir.fdk.model.LocalizedStrings getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * Multilingual description of the distribution
   * @param value the value to set.
   */
  public void setDescription(no.digdir.fdk.model.LocalizedStrings value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'accessURL' field.
   * @return URL for accessing the distribution
   */
  public java.util.List<java.lang.CharSequence> getAccessURL() {
    return accessURL;
  }


  /**
   * Sets the value of the 'accessURL' field.
   * URL for accessing the distribution
   * @param value the value to set.
   */
  public void setAccessURL(java.util.List<java.lang.CharSequence> value) {
    this.accessURL = value;
  }

  /**
   * Gets the value of the 'downloadURL' field.
   * @return URL for downloading the distribution
   */
  public java.util.List<java.lang.CharSequence> getDownloadURL() {
    return downloadURL;
  }


  /**
   * Sets the value of the 'downloadURL' field.
   * URL for downloading the distribution
   * @param value the value to set.
   */
  public void setDownloadURL(java.util.List<java.lang.CharSequence> value) {
    this.downloadURL = value;
  }

  /**
   * Gets the value of the 'license' field.
   * @return Licences under which the distribution is made available
   */
  public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getLicense() {
    return license;
  }


  /**
   * Sets the value of the 'license' field.
   * Licences under which the distribution is made available
   * @param value the value to set.
   */
  public void setLicense(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
    this.license = value;
  }

  /**
   * Gets the value of the 'conformsTo' field.
   * @return Established schemas to which the described distribution conforms
   */
  public java.util.List<no.digdir.fdk.model.UriWithLabel> getConformsTo() {
    return conformsTo;
  }


  /**
   * Sets the value of the 'conformsTo' field.
   * Established schemas to which the described distribution conforms
   * @param value the value to set.
   */
  public void setConformsTo(java.util.List<no.digdir.fdk.model.UriWithLabel> value) {
    this.conformsTo = value;
  }

  /**
   * Gets the value of the 'page' field.
   * @return Page or documents about this distribution
   */
  public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getPage() {
    return page;
  }


  /**
   * Sets the value of the 'page' field.
   * Page or documents about this distribution
   * @param value the value to set.
   */
  public void setPage(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
    this.page = value;
  }

  /**
   * Gets the value of the 'fdkFormat' field.
   * @return Formats or media types of the distribution
   */
  public java.util.List<no.digdir.fdk.model.Format> getFdkFormat() {
    return fdkFormat;
  }


  /**
   * Sets the value of the 'fdkFormat' field.
   * Formats or media types of the distribution
   * @param value the value to set.
   */
  public void setFdkFormat(java.util.List<no.digdir.fdk.model.Format> value) {
    this.fdkFormat = value;
  }

  /**
   * Gets the value of the 'compressFormat' field.
   * @return Compress format of the distribution
   */
  public no.digdir.fdk.model.Format getCompressFormat() {
    return compressFormat;
  }


  /**
   * Sets the value of the 'compressFormat' field.
   * Compress format of the distribution
   * @param value the value to set.
   */
  public void setCompressFormat(no.digdir.fdk.model.Format value) {
    this.compressFormat = value;
  }

  /**
   * Gets the value of the 'packageFormat' field.
   * @return Package format of the distribution
   */
  public no.digdir.fdk.model.Format getPackageFormat() {
    return packageFormat;
  }


  /**
   * Sets the value of the 'packageFormat' field.
   * Package format of the distribution
   * @param value the value to set.
   */
  public void setPackageFormat(no.digdir.fdk.model.Format value) {
    this.packageFormat = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return Type of the distribution
   */
  public java.lang.CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * Type of the distribution
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'accessService' field.
   * @return Access services of the distribution
   */
  public java.util.List<no.digdir.fdk.model.dataset.AccessService> getAccessService() {
    return accessService;
  }


  /**
   * Sets the value of the 'accessService' field.
   * Access services of the distribution
   * @param value the value to set.
   */
  public void setAccessService(java.util.List<no.digdir.fdk.model.dataset.AccessService> value) {
    this.accessService = value;
  }

  /**
   * Creates a new Distribution RecordBuilder.
   * @return A new Distribution RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Distribution.Builder newBuilder() {
    return new no.digdir.fdk.model.dataset.Distribution.Builder();
  }

  /**
   * Creates a new Distribution RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Distribution RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Distribution.Builder newBuilder(no.digdir.fdk.model.dataset.Distribution.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.Distribution.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.Distribution.Builder(other);
    }
  }

  /**
   * Creates a new Distribution RecordBuilder by copying an existing Distribution instance.
   * @param other The existing instance to copy.
   * @return A new Distribution RecordBuilder
   */
  public static no.digdir.fdk.model.dataset.Distribution.Builder newBuilder(no.digdir.fdk.model.dataset.Distribution other) {
    if (other == null) {
      return new no.digdir.fdk.model.dataset.Distribution.Builder();
    } else {
      return new no.digdir.fdk.model.dataset.Distribution.Builder(other);
    }
  }

  /**
   * RecordBuilder for Distribution instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Distribution>
    implements org.apache.avro.data.RecordBuilder<Distribution> {

    /** URI for the distribution */
    private java.lang.CharSequence uri;
    /** Multilingual title of the distribution */
    private no.digdir.fdk.model.LocalizedStrings title;
    private no.digdir.fdk.model.LocalizedStrings.Builder titleBuilder;
    /** Multilingual description of the distribution */
    private no.digdir.fdk.model.LocalizedStrings description;
    private no.digdir.fdk.model.LocalizedStrings.Builder descriptionBuilder;
    /** URL for accessing the distribution */
    private java.util.List<java.lang.CharSequence> accessURL;
    /** URL for downloading the distribution */
    private java.util.List<java.lang.CharSequence> downloadURL;
    /** Licences under which the distribution is made available */
    private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> license;
    /** Established schemas to which the described distribution conforms */
    private java.util.List<no.digdir.fdk.model.UriWithLabel> conformsTo;
    /** Page or documents about this distribution */
    private java.util.List<no.digdir.fdk.model.UriWithLabelAndType> page;
    /** Formats or media types of the distribution */
    private java.util.List<no.digdir.fdk.model.Format> fdkFormat;
    /** Compress format of the distribution */
    private no.digdir.fdk.model.Format compressFormat;
    private no.digdir.fdk.model.Format.Builder compressFormatBuilder;
    /** Package format of the distribution */
    private no.digdir.fdk.model.Format packageFormat;
    private no.digdir.fdk.model.Format.Builder packageFormatBuilder;
    /** Type of the distribution */
    private java.lang.CharSequence type;
    /** Access services of the distribution */
    private java.util.List<no.digdir.fdk.model.dataset.AccessService> accessService;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.Distribution.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasTitleBuilder()) {
        this.titleBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getTitleBuilder());
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasDescriptionBuilder()) {
        this.descriptionBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getDescriptionBuilder());
      }
      if (isValidValue(fields()[3], other.accessURL)) {
        this.accessURL = data().deepCopy(fields()[3].schema(), other.accessURL);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.downloadURL)) {
        this.downloadURL = data().deepCopy(fields()[4].schema(), other.downloadURL);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.license)) {
        this.license = data().deepCopy(fields()[5].schema(), other.license);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.conformsTo)) {
        this.conformsTo = data().deepCopy(fields()[6].schema(), other.conformsTo);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.page)) {
        this.page = data().deepCopy(fields()[7].schema(), other.page);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.fdkFormat)) {
        this.fdkFormat = data().deepCopy(fields()[8].schema(), other.fdkFormat);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.compressFormat)) {
        this.compressFormat = data().deepCopy(fields()[9].schema(), other.compressFormat);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (other.hasCompressFormatBuilder()) {
        this.compressFormatBuilder = no.digdir.fdk.model.Format.newBuilder(other.getCompressFormatBuilder());
      }
      if (isValidValue(fields()[10], other.packageFormat)) {
        this.packageFormat = data().deepCopy(fields()[10].schema(), other.packageFormat);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (other.hasPackageFormatBuilder()) {
        this.packageFormatBuilder = no.digdir.fdk.model.Format.newBuilder(other.getPackageFormatBuilder());
      }
      if (isValidValue(fields()[11], other.type)) {
        this.type = data().deepCopy(fields()[11].schema(), other.type);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.accessService)) {
        this.accessService = data().deepCopy(fields()[12].schema(), other.accessService);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing Distribution instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.dataset.Distribution other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
      this.titleBuilder = null;
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      this.descriptionBuilder = null;
      if (isValidValue(fields()[3], other.accessURL)) {
        this.accessURL = data().deepCopy(fields()[3].schema(), other.accessURL);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.downloadURL)) {
        this.downloadURL = data().deepCopy(fields()[4].schema(), other.downloadURL);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.license)) {
        this.license = data().deepCopy(fields()[5].schema(), other.license);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.conformsTo)) {
        this.conformsTo = data().deepCopy(fields()[6].schema(), other.conformsTo);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.page)) {
        this.page = data().deepCopy(fields()[7].schema(), other.page);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.fdkFormat)) {
        this.fdkFormat = data().deepCopy(fields()[8].schema(), other.fdkFormat);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.compressFormat)) {
        this.compressFormat = data().deepCopy(fields()[9].schema(), other.compressFormat);
        fieldSetFlags()[9] = true;
      }
      this.compressFormatBuilder = null;
      if (isValidValue(fields()[10], other.packageFormat)) {
        this.packageFormat = data().deepCopy(fields()[10].schema(), other.packageFormat);
        fieldSetFlags()[10] = true;
      }
      this.packageFormatBuilder = null;
      if (isValidValue(fields()[11], other.type)) {
        this.type = data().deepCopy(fields()[11].schema(), other.type);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.accessService)) {
        this.accessService = data().deepCopy(fields()[12].schema(), other.accessService);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'uri' field.
      * URI for the distribution
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * URI for the distribution
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * URI for the distribution
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * URI for the distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * Multilingual title of the distribution
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * Multilingual title of the distribution
      * @param value The value of 'title'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setTitle(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[1], value);
      this.titleBuilder = null;
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * Multilingual title of the distribution
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'title' field and creates one if it doesn't exist yet.
     * Multilingual title of the distribution
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getTitleBuilder() {
      if (titleBuilder == null) {
        if (hasTitle()) {
          setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(title));
        } else {
          setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return titleBuilder;
    }

    /**
     * Sets the Builder instance for the 'title' field
     * Multilingual title of the distribution
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Distribution.Builder setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearTitle();
      titleBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'title' field has an active Builder instance
     * Multilingual title of the distribution
     * @return True if the 'title' field has an active Builder instance
     */
    public boolean hasTitleBuilder() {
      return titleBuilder != null;
    }

    /**
      * Clears the value of the 'title' field.
      * Multilingual title of the distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearTitle() {
      title = null;
      titleBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Multilingual description of the distribution
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Multilingual description of the distribution
      * @param value The value of 'description'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setDescription(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[2], value);
      this.descriptionBuilder = null;
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Multilingual description of the distribution
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'description' field and creates one if it doesn't exist yet.
     * Multilingual description of the distribution
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getDescriptionBuilder() {
      if (descriptionBuilder == null) {
        if (hasDescription()) {
          setDescriptionBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(description));
        } else {
          setDescriptionBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return descriptionBuilder;
    }

    /**
     * Sets the Builder instance for the 'description' field
     * Multilingual description of the distribution
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Distribution.Builder setDescriptionBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearDescription();
      descriptionBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'description' field has an active Builder instance
     * Multilingual description of the distribution
     * @return True if the 'description' field has an active Builder instance
     */
    public boolean hasDescriptionBuilder() {
      return descriptionBuilder != null;
    }

    /**
      * Clears the value of the 'description' field.
      * Multilingual description of the distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearDescription() {
      description = null;
      descriptionBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'accessURL' field.
      * URL for accessing the distribution
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAccessURL() {
      return accessURL;
    }


    /**
      * Sets the value of the 'accessURL' field.
      * URL for accessing the distribution
      * @param value The value of 'accessURL'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setAccessURL(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.accessURL = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'accessURL' field has been set.
      * URL for accessing the distribution
      * @return True if the 'accessURL' field has been set, false otherwise.
      */
    public boolean hasAccessURL() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'accessURL' field.
      * URL for accessing the distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearAccessURL() {
      accessURL = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'downloadURL' field.
      * URL for downloading the distribution
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getDownloadURL() {
      return downloadURL;
    }


    /**
      * Sets the value of the 'downloadURL' field.
      * URL for downloading the distribution
      * @param value The value of 'downloadURL'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setDownloadURL(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.downloadURL = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'downloadURL' field has been set.
      * URL for downloading the distribution
      * @return True if the 'downloadURL' field has been set, false otherwise.
      */
    public boolean hasDownloadURL() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'downloadURL' field.
      * URL for downloading the distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearDownloadURL() {
      downloadURL = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'license' field.
      * Licences under which the distribution is made available
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getLicense() {
      return license;
    }


    /**
      * Sets the value of the 'license' field.
      * Licences under which the distribution is made available
      * @param value The value of 'license'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setLicense(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
      validate(fields()[5], value);
      this.license = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'license' field has been set.
      * Licences under which the distribution is made available
      * @return True if the 'license' field has been set, false otherwise.
      */
    public boolean hasLicense() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'license' field.
      * Licences under which the distribution is made available
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearLicense() {
      license = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'conformsTo' field.
      * Established schemas to which the described distribution conforms
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.UriWithLabel> getConformsTo() {
      return conformsTo;
    }


    /**
      * Sets the value of the 'conformsTo' field.
      * Established schemas to which the described distribution conforms
      * @param value The value of 'conformsTo'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setConformsTo(java.util.List<no.digdir.fdk.model.UriWithLabel> value) {
      validate(fields()[6], value);
      this.conformsTo = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'conformsTo' field has been set.
      * Established schemas to which the described distribution conforms
      * @return True if the 'conformsTo' field has been set, false otherwise.
      */
    public boolean hasConformsTo() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'conformsTo' field.
      * Established schemas to which the described distribution conforms
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearConformsTo() {
      conformsTo = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'page' field.
      * Page or documents about this distribution
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.UriWithLabelAndType> getPage() {
      return page;
    }


    /**
      * Sets the value of the 'page' field.
      * Page or documents about this distribution
      * @param value The value of 'page'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setPage(java.util.List<no.digdir.fdk.model.UriWithLabelAndType> value) {
      validate(fields()[7], value);
      this.page = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'page' field has been set.
      * Page or documents about this distribution
      * @return True if the 'page' field has been set, false otherwise.
      */
    public boolean hasPage() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'page' field.
      * Page or documents about this distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearPage() {
      page = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'fdkFormat' field.
      * Formats or media types of the distribution
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.Format> getFdkFormat() {
      return fdkFormat;
    }


    /**
      * Sets the value of the 'fdkFormat' field.
      * Formats or media types of the distribution
      * @param value The value of 'fdkFormat'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setFdkFormat(java.util.List<no.digdir.fdk.model.Format> value) {
      validate(fields()[8], value);
      this.fdkFormat = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'fdkFormat' field has been set.
      * Formats or media types of the distribution
      * @return True if the 'fdkFormat' field has been set, false otherwise.
      */
    public boolean hasFdkFormat() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'fdkFormat' field.
      * Formats or media types of the distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearFdkFormat() {
      fdkFormat = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'compressFormat' field.
      * Compress format of the distribution
      * @return The value.
      */
    public no.digdir.fdk.model.Format getCompressFormat() {
      return compressFormat;
    }


    /**
      * Sets the value of the 'compressFormat' field.
      * Compress format of the distribution
      * @param value The value of 'compressFormat'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setCompressFormat(no.digdir.fdk.model.Format value) {
      validate(fields()[9], value);
      this.compressFormatBuilder = null;
      this.compressFormat = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'compressFormat' field has been set.
      * Compress format of the distribution
      * @return True if the 'compressFormat' field has been set, false otherwise.
      */
    public boolean hasCompressFormat() {
      return fieldSetFlags()[9];
    }

    /**
     * Gets the Builder instance for the 'compressFormat' field and creates one if it doesn't exist yet.
     * Compress format of the distribution
     * @return This builder.
     */
    public no.digdir.fdk.model.Format.Builder getCompressFormatBuilder() {
      if (compressFormatBuilder == null) {
        if (hasCompressFormat()) {
          setCompressFormatBuilder(no.digdir.fdk.model.Format.newBuilder(compressFormat));
        } else {
          setCompressFormatBuilder(no.digdir.fdk.model.Format.newBuilder());
        }
      }
      return compressFormatBuilder;
    }

    /**
     * Sets the Builder instance for the 'compressFormat' field
     * Compress format of the distribution
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Distribution.Builder setCompressFormatBuilder(no.digdir.fdk.model.Format.Builder value) {
      clearCompressFormat();
      compressFormatBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'compressFormat' field has an active Builder instance
     * Compress format of the distribution
     * @return True if the 'compressFormat' field has an active Builder instance
     */
    public boolean hasCompressFormatBuilder() {
      return compressFormatBuilder != null;
    }

    /**
      * Clears the value of the 'compressFormat' field.
      * Compress format of the distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearCompressFormat() {
      compressFormat = null;
      compressFormatBuilder = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'packageFormat' field.
      * Package format of the distribution
      * @return The value.
      */
    public no.digdir.fdk.model.Format getPackageFormat() {
      return packageFormat;
    }


    /**
      * Sets the value of the 'packageFormat' field.
      * Package format of the distribution
      * @param value The value of 'packageFormat'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setPackageFormat(no.digdir.fdk.model.Format value) {
      validate(fields()[10], value);
      this.packageFormatBuilder = null;
      this.packageFormat = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'packageFormat' field has been set.
      * Package format of the distribution
      * @return True if the 'packageFormat' field has been set, false otherwise.
      */
    public boolean hasPackageFormat() {
      return fieldSetFlags()[10];
    }

    /**
     * Gets the Builder instance for the 'packageFormat' field and creates one if it doesn't exist yet.
     * Package format of the distribution
     * @return This builder.
     */
    public no.digdir.fdk.model.Format.Builder getPackageFormatBuilder() {
      if (packageFormatBuilder == null) {
        if (hasPackageFormat()) {
          setPackageFormatBuilder(no.digdir.fdk.model.Format.newBuilder(packageFormat));
        } else {
          setPackageFormatBuilder(no.digdir.fdk.model.Format.newBuilder());
        }
      }
      return packageFormatBuilder;
    }

    /**
     * Sets the Builder instance for the 'packageFormat' field
     * Package format of the distribution
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.dataset.Distribution.Builder setPackageFormatBuilder(no.digdir.fdk.model.Format.Builder value) {
      clearPackageFormat();
      packageFormatBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'packageFormat' field has an active Builder instance
     * Package format of the distribution
     * @return True if the 'packageFormat' field has an active Builder instance
     */
    public boolean hasPackageFormatBuilder() {
      return packageFormatBuilder != null;
    }

    /**
      * Clears the value of the 'packageFormat' field.
      * Package format of the distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearPackageFormat() {
      packageFormat = null;
      packageFormatBuilder = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * Type of the distribution
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * Type of the distribution
      * @param value The value of 'type'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setType(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.type = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * Type of the distribution
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'type' field.
      * Type of the distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearType() {
      type = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'accessService' field.
      * Access services of the distribution
      * @return The value.
      */
    public java.util.List<no.digdir.fdk.model.dataset.AccessService> getAccessService() {
      return accessService;
    }


    /**
      * Sets the value of the 'accessService' field.
      * Access services of the distribution
      * @param value The value of 'accessService'.
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder setAccessService(java.util.List<no.digdir.fdk.model.dataset.AccessService> value) {
      validate(fields()[12], value);
      this.accessService = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'accessService' field has been set.
      * Access services of the distribution
      * @return True if the 'accessService' field has been set, false otherwise.
      */
    public boolean hasAccessService() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'accessService' field.
      * Access services of the distribution
      * @return This builder.
      */
    public no.digdir.fdk.model.dataset.Distribution.Builder clearAccessService() {
      accessService = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Distribution build() {
      try {
        Distribution record = new Distribution();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (titleBuilder != null) {
          try {
            record.title = this.titleBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("title"));
            throw e;
          }
        } else {
          record.title = fieldSetFlags()[1] ? this.title : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[1]);
        }
        if (descriptionBuilder != null) {
          try {
            record.description = this.descriptionBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("description"));
            throw e;
          }
        } else {
          record.description = fieldSetFlags()[2] ? this.description : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[2]);
        }
        record.accessURL = fieldSetFlags()[3] ? this.accessURL : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        record.downloadURL = fieldSetFlags()[4] ? this.downloadURL : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.license = fieldSetFlags()[5] ? this.license : (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>) defaultValue(fields()[5]);
        record.conformsTo = fieldSetFlags()[6] ? this.conformsTo : (java.util.List<no.digdir.fdk.model.UriWithLabel>) defaultValue(fields()[6]);
        record.page = fieldSetFlags()[7] ? this.page : (java.util.List<no.digdir.fdk.model.UriWithLabelAndType>) defaultValue(fields()[7]);
        record.fdkFormat = fieldSetFlags()[8] ? this.fdkFormat : (java.util.List<no.digdir.fdk.model.Format>) defaultValue(fields()[8]);
        if (compressFormatBuilder != null) {
          try {
            record.compressFormat = this.compressFormatBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("compressFormat"));
            throw e;
          }
        } else {
          record.compressFormat = fieldSetFlags()[9] ? this.compressFormat : (no.digdir.fdk.model.Format) defaultValue(fields()[9]);
        }
        if (packageFormatBuilder != null) {
          try {
            record.packageFormat = this.packageFormatBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("packageFormat"));
            throw e;
          }
        } else {
          record.packageFormat = fieldSetFlags()[10] ? this.packageFormat : (no.digdir.fdk.model.Format) defaultValue(fields()[10]);
        }
        record.type = fieldSetFlags()[11] ? this.type : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.accessService = fieldSetFlags()[12] ? this.accessService : (java.util.List<no.digdir.fdk.model.dataset.AccessService>) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Distribution>
    WRITER$ = (org.apache.avro.io.DatumWriter<Distribution>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Distribution>
    READER$ = (org.apache.avro.io.DatumReader<Distribution>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.uri == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.uri);
    }

    if (this.title == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.title.customEncode(out);
    }

    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.description.customEncode(out);
    }

    if (this.accessURL == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.accessURL.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.accessURL) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.downloadURL == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.downloadURL.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.CharSequence e1: this.downloadURL) {
        actualSize1++;
        out.startItem();
        out.writeString(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.license == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.license.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (no.digdir.fdk.model.UriWithLabelAndType e2: this.license) {
        actualSize2++;
        out.startItem();
        e2.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.conformsTo == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.conformsTo.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (no.digdir.fdk.model.UriWithLabel e3: this.conformsTo) {
        actualSize3++;
        out.startItem();
        e3.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    if (this.page == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size4 = this.page.size();
      out.writeArrayStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (no.digdir.fdk.model.UriWithLabelAndType e4: this.page) {
        actualSize4++;
        out.startItem();
        e4.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize4 != size4)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }

    if (this.fdkFormat == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size5 = this.fdkFormat.size();
      out.writeArrayStart();
      out.setItemCount(size5);
      long actualSize5 = 0;
      for (no.digdir.fdk.model.Format e5: this.fdkFormat) {
        actualSize5++;
        out.startItem();
        e5.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize5 != size5)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");
    }

    if (this.compressFormat == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.compressFormat.customEncode(out);
    }

    if (this.packageFormat == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.packageFormat.customEncode(out);
    }

    if (this.type == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.type);
    }

    if (this.accessService == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size6 = this.accessService.size();
      out.writeArrayStart();
      out.setItemCount(size6);
      long actualSize6 = 0;
      for (no.digdir.fdk.model.dataset.AccessService e6: this.accessService) {
        actualSize6++;
        out.startItem();
        e6.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize6 != size6)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.uri = null;
      } else {
        this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.title = null;
      } else {
        if (this.title == null) {
          this.title = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.title.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        if (this.description == null) {
          this.description = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.description.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.accessURL = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.accessURL;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("accessURL").schema().getTypes().get(1));
          this.accessURL = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.downloadURL = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a1 = this.downloadURL;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("downloadURL").schema().getTypes().get(1));
          this.downloadURL = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.license = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a2 = this.license;
        if (a2 == null) {
          a2 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size2, SCHEMA$.getField("license").schema().getTypes().get(1));
          this.license = a2;
        } else a2.clear();
        SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            no.digdir.fdk.model.UriWithLabelAndType e2 = (ga2 != null ? ga2.peek() : null);
            if (e2 == null) {
              e2 = new no.digdir.fdk.model.UriWithLabelAndType();
            }
            e2.customDecode(in);
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.conformsTo = null;
      } else {
        long size3 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.UriWithLabel> a3 = this.conformsTo;
        if (a3 == null) {
          a3 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabel>((int)size3, SCHEMA$.getField("conformsTo").schema().getTypes().get(1));
          this.conformsTo = a3;
        } else a3.clear();
        SpecificData.Array<no.digdir.fdk.model.UriWithLabel> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabel>)a3 : null);
        for ( ; 0 < size3; size3 = in.arrayNext()) {
          for ( ; size3 != 0; size3--) {
            no.digdir.fdk.model.UriWithLabel e3 = (ga3 != null ? ga3.peek() : null);
            if (e3 == null) {
              e3 = new no.digdir.fdk.model.UriWithLabel();
            }
            e3.customDecode(in);
            a3.add(e3);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.page = null;
      } else {
        long size4 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a4 = this.page;
        if (a4 == null) {
          a4 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size4, SCHEMA$.getField("page").schema().getTypes().get(1));
          this.page = a4;
        } else a4.clear();
        SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a4 : null);
        for ( ; 0 < size4; size4 = in.arrayNext()) {
          for ( ; size4 != 0; size4--) {
            no.digdir.fdk.model.UriWithLabelAndType e4 = (ga4 != null ? ga4.peek() : null);
            if (e4 == null) {
              e4 = new no.digdir.fdk.model.UriWithLabelAndType();
            }
            e4.customDecode(in);
            a4.add(e4);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fdkFormat = null;
      } else {
        long size5 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.Format> a5 = this.fdkFormat;
        if (a5 == null) {
          a5 = new SpecificData.Array<no.digdir.fdk.model.Format>((int)size5, SCHEMA$.getField("fdkFormat").schema().getTypes().get(1));
          this.fdkFormat = a5;
        } else a5.clear();
        SpecificData.Array<no.digdir.fdk.model.Format> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.Format>)a5 : null);
        for ( ; 0 < size5; size5 = in.arrayNext()) {
          for ( ; size5 != 0; size5--) {
            no.digdir.fdk.model.Format e5 = (ga5 != null ? ga5.peek() : null);
            if (e5 == null) {
              e5 = new no.digdir.fdk.model.Format();
            }
            e5.customDecode(in);
            a5.add(e5);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.compressFormat = null;
      } else {
        if (this.compressFormat == null) {
          this.compressFormat = new no.digdir.fdk.model.Format();
        }
        this.compressFormat.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.packageFormat = null;
      } else {
        if (this.packageFormat == null) {
          this.packageFormat = new no.digdir.fdk.model.Format();
        }
        this.packageFormat.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.type = null;
      } else {
        this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.accessService = null;
      } else {
        long size6 = in.readArrayStart();
        java.util.List<no.digdir.fdk.model.dataset.AccessService> a6 = this.accessService;
        if (a6 == null) {
          a6 = new SpecificData.Array<no.digdir.fdk.model.dataset.AccessService>((int)size6, SCHEMA$.getField("accessService").schema().getTypes().get(1));
          this.accessService = a6;
        } else a6.clear();
        SpecificData.Array<no.digdir.fdk.model.dataset.AccessService> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.dataset.AccessService>)a6 : null);
        for ( ; 0 < size6; size6 = in.arrayNext()) {
          for ( ; size6 != 0; size6--) {
            no.digdir.fdk.model.dataset.AccessService e6 = (ga6 != null ? ga6.peek() : null);
            if (e6 == null) {
              e6 = new no.digdir.fdk.model.dataset.AccessService();
            }
            e6.customDecode(in);
            a6.add(e6);
          }
        }
      }

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.uri = null;
          } else {
            this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.title = null;
          } else {
            if (this.title == null) {
              this.title = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.title.customDecode(in);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            if (this.description == null) {
              this.description = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.description.customDecode(in);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.accessURL = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.accessURL;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("accessURL").schema().getTypes().get(1));
              this.accessURL = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.downloadURL = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a1 = this.downloadURL;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("downloadURL").schema().getTypes().get(1));
              this.downloadURL = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
                a1.add(e1);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.license = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a2 = this.license;
            if (a2 == null) {
              a2 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size2, SCHEMA$.getField("license").schema().getTypes().get(1));
              this.license = a2;
            } else a2.clear();
            SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                no.digdir.fdk.model.UriWithLabelAndType e2 = (ga2 != null ? ga2.peek() : null);
                if (e2 == null) {
                  e2 = new no.digdir.fdk.model.UriWithLabelAndType();
                }
                e2.customDecode(in);
                a2.add(e2);
              }
            }
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.conformsTo = null;
          } else {
            long size3 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.UriWithLabel> a3 = this.conformsTo;
            if (a3 == null) {
              a3 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabel>((int)size3, SCHEMA$.getField("conformsTo").schema().getTypes().get(1));
              this.conformsTo = a3;
            } else a3.clear();
            SpecificData.Array<no.digdir.fdk.model.UriWithLabel> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabel>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
              for ( ; size3 != 0; size3--) {
                no.digdir.fdk.model.UriWithLabel e3 = (ga3 != null ? ga3.peek() : null);
                if (e3 == null) {
                  e3 = new no.digdir.fdk.model.UriWithLabel();
                }
                e3.customDecode(in);
                a3.add(e3);
              }
            }
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.page = null;
          } else {
            long size4 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.UriWithLabelAndType> a4 = this.page;
            if (a4 == null) {
              a4 = new SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>((int)size4, SCHEMA$.getField("page").schema().getTypes().get(1));
              this.page = a4;
            } else a4.clear();
            SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.UriWithLabelAndType>)a4 : null);
            for ( ; 0 < size4; size4 = in.arrayNext()) {
              for ( ; size4 != 0; size4--) {
                no.digdir.fdk.model.UriWithLabelAndType e4 = (ga4 != null ? ga4.peek() : null);
                if (e4 == null) {
                  e4 = new no.digdir.fdk.model.UriWithLabelAndType();
                }
                e4.customDecode(in);
                a4.add(e4);
              }
            }
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fdkFormat = null;
          } else {
            long size5 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.Format> a5 = this.fdkFormat;
            if (a5 == null) {
              a5 = new SpecificData.Array<no.digdir.fdk.model.Format>((int)size5, SCHEMA$.getField("fdkFormat").schema().getTypes().get(1));
              this.fdkFormat = a5;
            } else a5.clear();
            SpecificData.Array<no.digdir.fdk.model.Format> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.Format>)a5 : null);
            for ( ; 0 < size5; size5 = in.arrayNext()) {
              for ( ; size5 != 0; size5--) {
                no.digdir.fdk.model.Format e5 = (ga5 != null ? ga5.peek() : null);
                if (e5 == null) {
                  e5 = new no.digdir.fdk.model.Format();
                }
                e5.customDecode(in);
                a5.add(e5);
              }
            }
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.compressFormat = null;
          } else {
            if (this.compressFormat == null) {
              this.compressFormat = new no.digdir.fdk.model.Format();
            }
            this.compressFormat.customDecode(in);
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.packageFormat = null;
          } else {
            if (this.packageFormat == null) {
              this.packageFormat = new no.digdir.fdk.model.Format();
            }
            this.packageFormat.customDecode(in);
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.type = null;
          } else {
            this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.accessService = null;
          } else {
            long size6 = in.readArrayStart();
            java.util.List<no.digdir.fdk.model.dataset.AccessService> a6 = this.accessService;
            if (a6 == null) {
              a6 = new SpecificData.Array<no.digdir.fdk.model.dataset.AccessService>((int)size6, SCHEMA$.getField("accessService").schema().getTypes().get(1));
              this.accessService = a6;
            } else a6.clear();
            SpecificData.Array<no.digdir.fdk.model.dataset.AccessService> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<no.digdir.fdk.model.dataset.AccessService>)a6 : null);
            for ( ; 0 < size6; size6 = in.arrayNext()) {
              for ( ; size6 != 0; size6--) {
                no.digdir.fdk.model.dataset.AccessService e6 = (ga6 != null ? ga6.peek() : null);
                if (e6 == null) {
                  e6 = new no.digdir.fdk.model.dataset.AccessService();
                }
                e6.customDecode(in);
                a6.add(e6);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










