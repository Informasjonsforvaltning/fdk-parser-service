/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information about a contact point */
@org.apache.avro.specific.AvroGenerated
public class ContactPoint extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1916173220833030288L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContactPoint\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Information about a contact point\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the contact point\"},{\"name\":\"fullname\",\"type\":[\"null\",\"string\"],\"doc\":\"Name of the contact point\"},{\"name\":\"email\",\"type\":[\"null\",\"string\"],\"doc\":\"Contact point email value\"},{\"name\":\"hasURL\",\"type\":[\"null\",\"string\"],\"doc\":\"Contact point url value\"},{\"name\":\"hasTelephone\",\"type\":[\"null\",\"string\"],\"doc\":\"Contact point phone value\"},{\"name\":\"organizationName\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LocalizedStrings\",\"doc\":\"Multilingual texts\",\"fields\":[{\"name\":\"no\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian'\"},{\"name\":\"nb\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian bokm√•l'\"},{\"name\":\"nn\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian nynorsk'\"},{\"name\":\"en\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in english'\"}]}],\"doc\":\"Multilingual name of the associated organization\"},{\"name\":\"organizationUnit\",\"type\":[\"null\",\"LocalizedStrings\"],\"doc\":\"Multilingual title of the associated organization unit\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ContactPoint> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ContactPoint> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ContactPoint> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ContactPoint> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ContactPoint> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ContactPoint to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ContactPoint from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ContactPoint instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ContactPoint fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** URI for the contact point */
  private java.lang.CharSequence uri;
  /** Name of the contact point */
  private java.lang.CharSequence fullname;
  /** Contact point email value */
  private java.lang.CharSequence email;
  /** Contact point url value */
  private java.lang.CharSequence hasURL;
  /** Contact point phone value */
  private java.lang.CharSequence hasTelephone;
  /** Multilingual name of the associated organization */
  private no.digdir.fdk.model.LocalizedStrings organizationName;
  /** Multilingual title of the associated organization unit */
  private no.digdir.fdk.model.LocalizedStrings organizationUnit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContactPoint() {}

  /**
   * All-args constructor.
   * @param uri URI for the contact point
   * @param fullname Name of the contact point
   * @param email Contact point email value
   * @param hasURL Contact point url value
   * @param hasTelephone Contact point phone value
   * @param organizationName Multilingual name of the associated organization
   * @param organizationUnit Multilingual title of the associated organization unit
   */
  public ContactPoint(java.lang.CharSequence uri, java.lang.CharSequence fullname, java.lang.CharSequence email, java.lang.CharSequence hasURL, java.lang.CharSequence hasTelephone, no.digdir.fdk.model.LocalizedStrings organizationName, no.digdir.fdk.model.LocalizedStrings organizationUnit) {
    this.uri = uri;
    this.fullname = fullname;
    this.email = email;
    this.hasURL = hasURL;
    this.hasTelephone = hasTelephone;
    this.organizationName = organizationName;
    this.organizationUnit = organizationUnit;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return fullname;
    case 2: return email;
    case 3: return hasURL;
    case 4: return hasTelephone;
    case 5: return organizationName;
    case 6: return organizationUnit;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: fullname = (java.lang.CharSequence)value$; break;
    case 2: email = (java.lang.CharSequence)value$; break;
    case 3: hasURL = (java.lang.CharSequence)value$; break;
    case 4: hasTelephone = (java.lang.CharSequence)value$; break;
    case 5: organizationName = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    case 6: organizationUnit = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return URI for the contact point
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * URI for the contact point
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'fullname' field.
   * @return Name of the contact point
   */
  public java.lang.CharSequence getFullname() {
    return fullname;
  }


  /**
   * Sets the value of the 'fullname' field.
   * Name of the contact point
   * @param value the value to set.
   */
  public void setFullname(java.lang.CharSequence value) {
    this.fullname = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return Contact point email value
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * Contact point email value
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'hasURL' field.
   * @return Contact point url value
   */
  public java.lang.CharSequence getHasURL() {
    return hasURL;
  }


  /**
   * Sets the value of the 'hasURL' field.
   * Contact point url value
   * @param value the value to set.
   */
  public void setHasURL(java.lang.CharSequence value) {
    this.hasURL = value;
  }

  /**
   * Gets the value of the 'hasTelephone' field.
   * @return Contact point phone value
   */
  public java.lang.CharSequence getHasTelephone() {
    return hasTelephone;
  }


  /**
   * Sets the value of the 'hasTelephone' field.
   * Contact point phone value
   * @param value the value to set.
   */
  public void setHasTelephone(java.lang.CharSequence value) {
    this.hasTelephone = value;
  }

  /**
   * Gets the value of the 'organizationName' field.
   * @return Multilingual name of the associated organization
   */
  public no.digdir.fdk.model.LocalizedStrings getOrganizationName() {
    return organizationName;
  }


  /**
   * Sets the value of the 'organizationName' field.
   * Multilingual name of the associated organization
   * @param value the value to set.
   */
  public void setOrganizationName(no.digdir.fdk.model.LocalizedStrings value) {
    this.organizationName = value;
  }

  /**
   * Gets the value of the 'organizationUnit' field.
   * @return Multilingual title of the associated organization unit
   */
  public no.digdir.fdk.model.LocalizedStrings getOrganizationUnit() {
    return organizationUnit;
  }


  /**
   * Sets the value of the 'organizationUnit' field.
   * Multilingual title of the associated organization unit
   * @param value the value to set.
   */
  public void setOrganizationUnit(no.digdir.fdk.model.LocalizedStrings value) {
    this.organizationUnit = value;
  }

  /**
   * Creates a new ContactPoint RecordBuilder.
   * @return A new ContactPoint RecordBuilder
   */
  public static no.digdir.fdk.model.ContactPoint.Builder newBuilder() {
    return new no.digdir.fdk.model.ContactPoint.Builder();
  }

  /**
   * Creates a new ContactPoint RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ContactPoint RecordBuilder
   */
  public static no.digdir.fdk.model.ContactPoint.Builder newBuilder(no.digdir.fdk.model.ContactPoint.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.ContactPoint.Builder();
    } else {
      return new no.digdir.fdk.model.ContactPoint.Builder(other);
    }
  }

  /**
   * Creates a new ContactPoint RecordBuilder by copying an existing ContactPoint instance.
   * @param other The existing instance to copy.
   * @return A new ContactPoint RecordBuilder
   */
  public static no.digdir.fdk.model.ContactPoint.Builder newBuilder(no.digdir.fdk.model.ContactPoint other) {
    if (other == null) {
      return new no.digdir.fdk.model.ContactPoint.Builder();
    } else {
      return new no.digdir.fdk.model.ContactPoint.Builder(other);
    }
  }

  /**
   * RecordBuilder for ContactPoint instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContactPoint>
    implements org.apache.avro.data.RecordBuilder<ContactPoint> {

    /** URI for the contact point */
    private java.lang.CharSequence uri;
    /** Name of the contact point */
    private java.lang.CharSequence fullname;
    /** Contact point email value */
    private java.lang.CharSequence email;
    /** Contact point url value */
    private java.lang.CharSequence hasURL;
    /** Contact point phone value */
    private java.lang.CharSequence hasTelephone;
    /** Multilingual name of the associated organization */
    private no.digdir.fdk.model.LocalizedStrings organizationName;
    private no.digdir.fdk.model.LocalizedStrings.Builder organizationNameBuilder;
    /** Multilingual title of the associated organization unit */
    private no.digdir.fdk.model.LocalizedStrings organizationUnit;
    private no.digdir.fdk.model.LocalizedStrings.Builder organizationUnitBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.ContactPoint.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.fullname)) {
        this.fullname = data().deepCopy(fields()[1].schema(), other.fullname);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.hasURL)) {
        this.hasURL = data().deepCopy(fields()[3].schema(), other.hasURL);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.hasTelephone)) {
        this.hasTelephone = data().deepCopy(fields()[4].schema(), other.hasTelephone);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.organizationName)) {
        this.organizationName = data().deepCopy(fields()[5].schema(), other.organizationName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasOrganizationNameBuilder()) {
        this.organizationNameBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getOrganizationNameBuilder());
      }
      if (isValidValue(fields()[6], other.organizationUnit)) {
        this.organizationUnit = data().deepCopy(fields()[6].schema(), other.organizationUnit);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (other.hasOrganizationUnitBuilder()) {
        this.organizationUnitBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getOrganizationUnitBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ContactPoint instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.ContactPoint other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fullname)) {
        this.fullname = data().deepCopy(fields()[1].schema(), other.fullname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.hasURL)) {
        this.hasURL = data().deepCopy(fields()[3].schema(), other.hasURL);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hasTelephone)) {
        this.hasTelephone = data().deepCopy(fields()[4].schema(), other.hasTelephone);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.organizationName)) {
        this.organizationName = data().deepCopy(fields()[5].schema(), other.organizationName);
        fieldSetFlags()[5] = true;
      }
      this.organizationNameBuilder = null;
      if (isValidValue(fields()[6], other.organizationUnit)) {
        this.organizationUnit = data().deepCopy(fields()[6].schema(), other.organizationUnit);
        fieldSetFlags()[6] = true;
      }
      this.organizationUnitBuilder = null;
    }

    /**
      * Gets the value of the 'uri' field.
      * URI for the contact point
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * URI for the contact point
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * URI for the contact point
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * URI for the contact point
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'fullname' field.
      * Name of the contact point
      * @return The value.
      */
    public java.lang.CharSequence getFullname() {
      return fullname;
    }


    /**
      * Sets the value of the 'fullname' field.
      * Name of the contact point
      * @param value The value of 'fullname'.
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder setFullname(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fullname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'fullname' field has been set.
      * Name of the contact point
      * @return True if the 'fullname' field has been set, false otherwise.
      */
    public boolean hasFullname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'fullname' field.
      * Name of the contact point
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder clearFullname() {
      fullname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * Contact point email value
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * Contact point email value
      * @param value The value of 'email'.
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * Contact point email value
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * Contact point email value
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasURL' field.
      * Contact point url value
      * @return The value.
      */
    public java.lang.CharSequence getHasURL() {
      return hasURL;
    }


    /**
      * Sets the value of the 'hasURL' field.
      * Contact point url value
      * @param value The value of 'hasURL'.
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder setHasURL(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.hasURL = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'hasURL' field has been set.
      * Contact point url value
      * @return True if the 'hasURL' field has been set, false otherwise.
      */
    public boolean hasHasURL() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'hasURL' field.
      * Contact point url value
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder clearHasURL() {
      hasURL = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'hasTelephone' field.
      * Contact point phone value
      * @return The value.
      */
    public java.lang.CharSequence getHasTelephone() {
      return hasTelephone;
    }


    /**
      * Sets the value of the 'hasTelephone' field.
      * Contact point phone value
      * @param value The value of 'hasTelephone'.
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder setHasTelephone(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.hasTelephone = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'hasTelephone' field has been set.
      * Contact point phone value
      * @return True if the 'hasTelephone' field has been set, false otherwise.
      */
    public boolean hasHasTelephone() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'hasTelephone' field.
      * Contact point phone value
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder clearHasTelephone() {
      hasTelephone = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationName' field.
      * Multilingual name of the associated organization
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getOrganizationName() {
      return organizationName;
    }


    /**
      * Sets the value of the 'organizationName' field.
      * Multilingual name of the associated organization
      * @param value The value of 'organizationName'.
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder setOrganizationName(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[5], value);
      this.organizationNameBuilder = null;
      this.organizationName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationName' field has been set.
      * Multilingual name of the associated organization
      * @return True if the 'organizationName' field has been set, false otherwise.
      */
    public boolean hasOrganizationName() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'organizationName' field and creates one if it doesn't exist yet.
     * Multilingual name of the associated organization
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getOrganizationNameBuilder() {
      if (organizationNameBuilder == null) {
        if (hasOrganizationName()) {
          setOrganizationNameBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(organizationName));
        } else {
          setOrganizationNameBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return organizationNameBuilder;
    }

    /**
     * Sets the Builder instance for the 'organizationName' field
     * Multilingual name of the associated organization
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.ContactPoint.Builder setOrganizationNameBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearOrganizationName();
      organizationNameBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'organizationName' field has an active Builder instance
     * Multilingual name of the associated organization
     * @return True if the 'organizationName' field has an active Builder instance
     */
    public boolean hasOrganizationNameBuilder() {
      return organizationNameBuilder != null;
    }

    /**
      * Clears the value of the 'organizationName' field.
      * Multilingual name of the associated organization
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder clearOrganizationName() {
      organizationName = null;
      organizationNameBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'organizationUnit' field.
      * Multilingual title of the associated organization unit
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getOrganizationUnit() {
      return organizationUnit;
    }


    /**
      * Sets the value of the 'organizationUnit' field.
      * Multilingual title of the associated organization unit
      * @param value The value of 'organizationUnit'.
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder setOrganizationUnit(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[6], value);
      this.organizationUnitBuilder = null;
      this.organizationUnit = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'organizationUnit' field has been set.
      * Multilingual title of the associated organization unit
      * @return True if the 'organizationUnit' field has been set, false otherwise.
      */
    public boolean hasOrganizationUnit() {
      return fieldSetFlags()[6];
    }

    /**
     * Gets the Builder instance for the 'organizationUnit' field and creates one if it doesn't exist yet.
     * Multilingual title of the associated organization unit
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getOrganizationUnitBuilder() {
      if (organizationUnitBuilder == null) {
        if (hasOrganizationUnit()) {
          setOrganizationUnitBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(organizationUnit));
        } else {
          setOrganizationUnitBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return organizationUnitBuilder;
    }

    /**
     * Sets the Builder instance for the 'organizationUnit' field
     * Multilingual title of the associated organization unit
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.ContactPoint.Builder setOrganizationUnitBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearOrganizationUnit();
      organizationUnitBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'organizationUnit' field has an active Builder instance
     * Multilingual title of the associated organization unit
     * @return True if the 'organizationUnit' field has an active Builder instance
     */
    public boolean hasOrganizationUnitBuilder() {
      return organizationUnitBuilder != null;
    }

    /**
      * Clears the value of the 'organizationUnit' field.
      * Multilingual title of the associated organization unit
      * @return This builder.
      */
    public no.digdir.fdk.model.ContactPoint.Builder clearOrganizationUnit() {
      organizationUnit = null;
      organizationUnitBuilder = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ContactPoint build() {
      try {
        ContactPoint record = new ContactPoint();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.fullname = fieldSetFlags()[1] ? this.fullname : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.hasURL = fieldSetFlags()[3] ? this.hasURL : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.hasTelephone = fieldSetFlags()[4] ? this.hasTelephone : (java.lang.CharSequence) defaultValue(fields()[4]);
        if (organizationNameBuilder != null) {
          try {
            record.organizationName = this.organizationNameBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("organizationName"));
            throw e;
          }
        } else {
          record.organizationName = fieldSetFlags()[5] ? this.organizationName : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[5]);
        }
        if (organizationUnitBuilder != null) {
          try {
            record.organizationUnit = this.organizationUnitBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("organizationUnit"));
            throw e;
          }
        } else {
          record.organizationUnit = fieldSetFlags()[6] ? this.organizationUnit : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[6]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ContactPoint>
    WRITER$ = (org.apache.avro.io.DatumWriter<ContactPoint>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ContactPoint>
    READER$ = (org.apache.avro.io.DatumReader<ContactPoint>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.uri == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.uri);
    }

    if (this.fullname == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.fullname);
    }

    if (this.email == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.email);
    }

    if (this.hasURL == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.hasURL);
    }

    if (this.hasTelephone == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.hasTelephone);
    }

    if (this.organizationName == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.organizationName.customEncode(out);
    }

    if (this.organizationUnit == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.organizationUnit.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.uri = null;
      } else {
        this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.fullname = null;
      } else {
        this.fullname = in.readString(this.fullname instanceof Utf8 ? (Utf8)this.fullname : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.email = null;
      } else {
        this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hasURL = null;
      } else {
        this.hasURL = in.readString(this.hasURL instanceof Utf8 ? (Utf8)this.hasURL : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.hasTelephone = null;
      } else {
        this.hasTelephone = in.readString(this.hasTelephone instanceof Utf8 ? (Utf8)this.hasTelephone : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.organizationName = null;
      } else {
        if (this.organizationName == null) {
          this.organizationName = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.organizationName.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.organizationUnit = null;
      } else {
        if (this.organizationUnit == null) {
          this.organizationUnit = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.organizationUnit.customDecode(in);
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.uri = null;
          } else {
            this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.fullname = null;
          } else {
            this.fullname = in.readString(this.fullname instanceof Utf8 ? (Utf8)this.fullname : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.email = null;
          } else {
            this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hasURL = null;
          } else {
            this.hasURL = in.readString(this.hasURL instanceof Utf8 ? (Utf8)this.hasURL : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.hasTelephone = null;
          } else {
            this.hasTelephone = in.readString(this.hasTelephone instanceof Utf8 ? (Utf8)this.hasTelephone : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.organizationName = null;
          } else {
            if (this.organizationName == null) {
              this.organizationName = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.organizationName.customDecode(in);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.organizationUnit = null;
          } else {
            if (this.organizationUnit == null) {
              this.organizationUnit = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.organizationUnit.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










