/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** EUROVOC theme information */
@org.apache.avro.specific.AvroGenerated
public class Eurovoc extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2668710302885385466L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Eurovoc\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"EUROVOC theme information\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI of the EUROVOC theme\"},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"doc\":\"Code value for the theme\"},{\"name\":\"eurovocPaths\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\"}],\"doc\":\"EUROVOC hierarchy paths for the theme\"},{\"name\":\"label\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LocalizedStrings\",\"doc\":\"Multilingual texts\",\"fields\":[{\"name\":\"no\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian'\"},{\"name\":\"nb\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian bokm√•l'\"},{\"name\":\"nn\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian nynorsk'\"},{\"name\":\"en\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in english'\"}]}],\"doc\":\"Multilingual label of the theme\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Eurovoc> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Eurovoc> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Eurovoc> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Eurovoc> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Eurovoc> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Eurovoc to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Eurovoc from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Eurovoc instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Eurovoc fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** URI of the EUROVOC theme */
  private java.lang.CharSequence uri;
  /** Code value for the theme */
  private java.lang.CharSequence code;
  /** EUROVOC hierarchy paths for the theme */
  private java.util.List<java.lang.CharSequence> eurovocPaths;
  /** Multilingual label of the theme */
  private no.digdir.fdk.model.LocalizedStrings label;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Eurovoc() {}

  /**
   * All-args constructor.
   * @param uri URI of the EUROVOC theme
   * @param code Code value for the theme
   * @param eurovocPaths EUROVOC hierarchy paths for the theme
   * @param label Multilingual label of the theme
   */
  public Eurovoc(java.lang.CharSequence uri, java.lang.CharSequence code, java.util.List<java.lang.CharSequence> eurovocPaths, no.digdir.fdk.model.LocalizedStrings label) {
    this.uri = uri;
    this.code = code;
    this.eurovocPaths = eurovocPaths;
    this.label = label;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return code;
    case 2: return eurovocPaths;
    case 3: return label;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: code = (java.lang.CharSequence)value$; break;
    case 2: eurovocPaths = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: label = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return URI of the EUROVOC theme
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * URI of the EUROVOC theme
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return Code value for the theme
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * Code value for the theme
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'eurovocPaths' field.
   * @return EUROVOC hierarchy paths for the theme
   */
  public java.util.List<java.lang.CharSequence> getEurovocPaths() {
    return eurovocPaths;
  }


  /**
   * Sets the value of the 'eurovocPaths' field.
   * EUROVOC hierarchy paths for the theme
   * @param value the value to set.
   */
  public void setEurovocPaths(java.util.List<java.lang.CharSequence> value) {
    this.eurovocPaths = value;
  }

  /**
   * Gets the value of the 'label' field.
   * @return Multilingual label of the theme
   */
  public no.digdir.fdk.model.LocalizedStrings getLabel() {
    return label;
  }


  /**
   * Sets the value of the 'label' field.
   * Multilingual label of the theme
   * @param value the value to set.
   */
  public void setLabel(no.digdir.fdk.model.LocalizedStrings value) {
    this.label = value;
  }

  /**
   * Creates a new Eurovoc RecordBuilder.
   * @return A new Eurovoc RecordBuilder
   */
  public static no.digdir.fdk.model.Eurovoc.Builder newBuilder() {
    return new no.digdir.fdk.model.Eurovoc.Builder();
  }

  /**
   * Creates a new Eurovoc RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Eurovoc RecordBuilder
   */
  public static no.digdir.fdk.model.Eurovoc.Builder newBuilder(no.digdir.fdk.model.Eurovoc.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.Eurovoc.Builder();
    } else {
      return new no.digdir.fdk.model.Eurovoc.Builder(other);
    }
  }

  /**
   * Creates a new Eurovoc RecordBuilder by copying an existing Eurovoc instance.
   * @param other The existing instance to copy.
   * @return A new Eurovoc RecordBuilder
   */
  public static no.digdir.fdk.model.Eurovoc.Builder newBuilder(no.digdir.fdk.model.Eurovoc other) {
    if (other == null) {
      return new no.digdir.fdk.model.Eurovoc.Builder();
    } else {
      return new no.digdir.fdk.model.Eurovoc.Builder(other);
    }
  }

  /**
   * RecordBuilder for Eurovoc instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Eurovoc>
    implements org.apache.avro.data.RecordBuilder<Eurovoc> {

    /** URI of the EUROVOC theme */
    private java.lang.CharSequence uri;
    /** Code value for the theme */
    private java.lang.CharSequence code;
    /** EUROVOC hierarchy paths for the theme */
    private java.util.List<java.lang.CharSequence> eurovocPaths;
    /** Multilingual label of the theme */
    private no.digdir.fdk.model.LocalizedStrings label;
    private no.digdir.fdk.model.LocalizedStrings.Builder labelBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.Eurovoc.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.eurovocPaths)) {
        this.eurovocPaths = data().deepCopy(fields()[2].schema(), other.eurovocPaths);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.label)) {
        this.label = data().deepCopy(fields()[3].schema(), other.label);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasLabelBuilder()) {
        this.labelBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getLabelBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Eurovoc instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.Eurovoc other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eurovocPaths)) {
        this.eurovocPaths = data().deepCopy(fields()[2].schema(), other.eurovocPaths);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.label)) {
        this.label = data().deepCopy(fields()[3].schema(), other.label);
        fieldSetFlags()[3] = true;
      }
      this.labelBuilder = null;
    }

    /**
      * Gets the value of the 'uri' field.
      * URI of the EUROVOC theme
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * URI of the EUROVOC theme
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public no.digdir.fdk.model.Eurovoc.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * URI of the EUROVOC theme
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * URI of the EUROVOC theme
      * @return This builder.
      */
    public no.digdir.fdk.model.Eurovoc.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * Code value for the theme
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * Code value for the theme
      * @param value The value of 'code'.
      * @return This builder.
      */
    public no.digdir.fdk.model.Eurovoc.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.code = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * Code value for the theme
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'code' field.
      * Code value for the theme
      * @return This builder.
      */
    public no.digdir.fdk.model.Eurovoc.Builder clearCode() {
      code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'eurovocPaths' field.
      * EUROVOC hierarchy paths for the theme
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getEurovocPaths() {
      return eurovocPaths;
    }


    /**
      * Sets the value of the 'eurovocPaths' field.
      * EUROVOC hierarchy paths for the theme
      * @param value The value of 'eurovocPaths'.
      * @return This builder.
      */
    public no.digdir.fdk.model.Eurovoc.Builder setEurovocPaths(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.eurovocPaths = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'eurovocPaths' field has been set.
      * EUROVOC hierarchy paths for the theme
      * @return True if the 'eurovocPaths' field has been set, false otherwise.
      */
    public boolean hasEurovocPaths() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'eurovocPaths' field.
      * EUROVOC hierarchy paths for the theme
      * @return This builder.
      */
    public no.digdir.fdk.model.Eurovoc.Builder clearEurovocPaths() {
      eurovocPaths = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'label' field.
      * Multilingual label of the theme
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getLabel() {
      return label;
    }


    /**
      * Sets the value of the 'label' field.
      * Multilingual label of the theme
      * @param value The value of 'label'.
      * @return This builder.
      */
    public no.digdir.fdk.model.Eurovoc.Builder setLabel(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[3], value);
      this.labelBuilder = null;
      this.label = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'label' field has been set.
      * Multilingual label of the theme
      * @return True if the 'label' field has been set, false otherwise.
      */
    public boolean hasLabel() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'label' field and creates one if it doesn't exist yet.
     * Multilingual label of the theme
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getLabelBuilder() {
      if (labelBuilder == null) {
        if (hasLabel()) {
          setLabelBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(label));
        } else {
          setLabelBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return labelBuilder;
    }

    /**
     * Sets the Builder instance for the 'label' field
     * Multilingual label of the theme
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.Eurovoc.Builder setLabelBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearLabel();
      labelBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'label' field has an active Builder instance
     * Multilingual label of the theme
     * @return True if the 'label' field has an active Builder instance
     */
    public boolean hasLabelBuilder() {
      return labelBuilder != null;
    }

    /**
      * Clears the value of the 'label' field.
      * Multilingual label of the theme
      * @return This builder.
      */
    public no.digdir.fdk.model.Eurovoc.Builder clearLabel() {
      label = null;
      labelBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Eurovoc build() {
      try {
        Eurovoc record = new Eurovoc();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.code = fieldSetFlags()[1] ? this.code : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.eurovocPaths = fieldSetFlags()[2] ? this.eurovocPaths : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        if (labelBuilder != null) {
          try {
            record.label = this.labelBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("label"));
            throw e;
          }
        } else {
          record.label = fieldSetFlags()[3] ? this.label : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[3]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Eurovoc>
    WRITER$ = (org.apache.avro.io.DatumWriter<Eurovoc>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Eurovoc>
    READER$ = (org.apache.avro.io.DatumReader<Eurovoc>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.uri == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.uri);
    }

    if (this.code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.code);
    }

    if (this.eurovocPaths == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.eurovocPaths.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.eurovocPaths) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.label == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.label.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.uri = null;
      } else {
        this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.code = null;
      } else {
        this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.eurovocPaths = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.eurovocPaths;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("eurovocPaths").schema().getTypes().get(1));
          this.eurovocPaths = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.label = null;
      } else {
        if (this.label == null) {
          this.label = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.label.customDecode(in);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.uri = null;
          } else {
            this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.code = null;
          } else {
            this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.eurovocPaths = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.eurovocPaths;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("eurovocPaths").schema().getTypes().get(1));
              this.eurovocPaths = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.label = null;
          } else {
            if (this.label == null) {
              this.label = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.label.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










