/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Information about a temporal period */
@org.apache.avro.specific.AvroGenerated
public class Temporal extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5583956779281860002L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Temporal\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Information about a temporal period\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"Associated URI\"},{\"name\":\"startDate\",\"type\":[\"null\",\"string\"],\"doc\":\"Start date of the period, format: 'YYYY-MM-DD'\"},{\"name\":\"endDate\",\"type\":[\"null\",\"string\"],\"doc\":\"End date of the period, format: 'YYYY-MM-DD'\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Temporal> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Temporal> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Temporal> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Temporal> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Temporal> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Temporal to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Temporal from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Temporal instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Temporal fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Associated URI */
  private java.lang.CharSequence uri;
  /** Start date of the period, format: 'YYYY-MM-DD' */
  private java.lang.CharSequence startDate;
  /** End date of the period, format: 'YYYY-MM-DD' */
  private java.lang.CharSequence endDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Temporal() {}

  /**
   * All-args constructor.
   * @param uri Associated URI
   * @param startDate Start date of the period, format: 'YYYY-MM-DD'
   * @param endDate End date of the period, format: 'YYYY-MM-DD'
   */
  public Temporal(java.lang.CharSequence uri, java.lang.CharSequence startDate, java.lang.CharSequence endDate) {
    this.uri = uri;
    this.startDate = startDate;
    this.endDate = endDate;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return startDate;
    case 2: return endDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: startDate = (java.lang.CharSequence)value$; break;
    case 2: endDate = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return Associated URI
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * Associated URI
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'startDate' field.
   * @return Start date of the period, format: 'YYYY-MM-DD'
   */
  public java.lang.CharSequence getStartDate() {
    return startDate;
  }


  /**
   * Sets the value of the 'startDate' field.
   * Start date of the period, format: 'YYYY-MM-DD'
   * @param value the value to set.
   */
  public void setStartDate(java.lang.CharSequence value) {
    this.startDate = value;
  }

  /**
   * Gets the value of the 'endDate' field.
   * @return End date of the period, format: 'YYYY-MM-DD'
   */
  public java.lang.CharSequence getEndDate() {
    return endDate;
  }


  /**
   * Sets the value of the 'endDate' field.
   * End date of the period, format: 'YYYY-MM-DD'
   * @param value the value to set.
   */
  public void setEndDate(java.lang.CharSequence value) {
    this.endDate = value;
  }

  /**
   * Creates a new Temporal RecordBuilder.
   * @return A new Temporal RecordBuilder
   */
  public static no.digdir.fdk.model.Temporal.Builder newBuilder() {
    return new no.digdir.fdk.model.Temporal.Builder();
  }

  /**
   * Creates a new Temporal RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Temporal RecordBuilder
   */
  public static no.digdir.fdk.model.Temporal.Builder newBuilder(no.digdir.fdk.model.Temporal.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.Temporal.Builder();
    } else {
      return new no.digdir.fdk.model.Temporal.Builder(other);
    }
  }

  /**
   * Creates a new Temporal RecordBuilder by copying an existing Temporal instance.
   * @param other The existing instance to copy.
   * @return A new Temporal RecordBuilder
   */
  public static no.digdir.fdk.model.Temporal.Builder newBuilder(no.digdir.fdk.model.Temporal other) {
    if (other == null) {
      return new no.digdir.fdk.model.Temporal.Builder();
    } else {
      return new no.digdir.fdk.model.Temporal.Builder(other);
    }
  }

  /**
   * RecordBuilder for Temporal instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Temporal>
    implements org.apache.avro.data.RecordBuilder<Temporal> {

    /** Associated URI */
    private java.lang.CharSequence uri;
    /** Start date of the period, format: 'YYYY-MM-DD' */
    private java.lang.CharSequence startDate;
    /** End date of the period, format: 'YYYY-MM-DD' */
    private java.lang.CharSequence endDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.Temporal.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.startDate)) {
        this.startDate = data().deepCopy(fields()[1].schema(), other.startDate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.endDate)) {
        this.endDate = data().deepCopy(fields()[2].schema(), other.endDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Temporal instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.Temporal other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.startDate)) {
        this.startDate = data().deepCopy(fields()[1].schema(), other.startDate);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.endDate)) {
        this.endDate = data().deepCopy(fields()[2].schema(), other.endDate);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'uri' field.
      * Associated URI
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * Associated URI
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public no.digdir.fdk.model.Temporal.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * Associated URI
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * Associated URI
      * @return This builder.
      */
    public no.digdir.fdk.model.Temporal.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'startDate' field.
      * Start date of the period, format: 'YYYY-MM-DD'
      * @return The value.
      */
    public java.lang.CharSequence getStartDate() {
      return startDate;
    }


    /**
      * Sets the value of the 'startDate' field.
      * Start date of the period, format: 'YYYY-MM-DD'
      * @param value The value of 'startDate'.
      * @return This builder.
      */
    public no.digdir.fdk.model.Temporal.Builder setStartDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.startDate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'startDate' field has been set.
      * Start date of the period, format: 'YYYY-MM-DD'
      * @return True if the 'startDate' field has been set, false otherwise.
      */
    public boolean hasStartDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'startDate' field.
      * Start date of the period, format: 'YYYY-MM-DD'
      * @return This builder.
      */
    public no.digdir.fdk.model.Temporal.Builder clearStartDate() {
      startDate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'endDate' field.
      * End date of the period, format: 'YYYY-MM-DD'
      * @return The value.
      */
    public java.lang.CharSequence getEndDate() {
      return endDate;
    }


    /**
      * Sets the value of the 'endDate' field.
      * End date of the period, format: 'YYYY-MM-DD'
      * @param value The value of 'endDate'.
      * @return This builder.
      */
    public no.digdir.fdk.model.Temporal.Builder setEndDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.endDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'endDate' field has been set.
      * End date of the period, format: 'YYYY-MM-DD'
      * @return True if the 'endDate' field has been set, false otherwise.
      */
    public boolean hasEndDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'endDate' field.
      * End date of the period, format: 'YYYY-MM-DD'
      * @return This builder.
      */
    public no.digdir.fdk.model.Temporal.Builder clearEndDate() {
      endDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Temporal build() {
      try {
        Temporal record = new Temporal();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.startDate = fieldSetFlags()[1] ? this.startDate : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.endDate = fieldSetFlags()[2] ? this.endDate : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Temporal>
    WRITER$ = (org.apache.avro.io.DatumWriter<Temporal>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Temporal>
    READER$ = (org.apache.avro.io.DatumReader<Temporal>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.uri == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.uri);
    }

    if (this.startDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.startDate);
    }

    if (this.endDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.endDate);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.uri = null;
      } else {
        this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.startDate = null;
      } else {
        this.startDate = in.readString(this.startDate instanceof Utf8 ? (Utf8)this.startDate : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.endDate = null;
      } else {
        this.endDate = in.readString(this.endDate instanceof Utf8 ? (Utf8)this.endDate : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.uri = null;
          } else {
            this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.startDate = null;
          } else {
            this.startDate = in.readString(this.startDate instanceof Utf8 ? (Utf8)this.startDate : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.endDate = null;
          } else {
            this.endDate = in.readString(this.endDate instanceof Utf8 ? (Utf8)this.endDate : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










