/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Multilingual texts */
@org.apache.avro.specific.AvroGenerated
public class LocalizedStrings extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2928405612012755438L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LocalizedStrings\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"Multilingual texts\",\"fields\":[{\"name\":\"no\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian'\"},{\"name\":\"nb\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian bokmål'\"},{\"name\":\"nn\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian nynorsk'\"},{\"name\":\"en\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in english'\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LocalizedStrings> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LocalizedStrings> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LocalizedStrings> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LocalizedStrings> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LocalizedStrings> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LocalizedStrings to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LocalizedStrings from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LocalizedStrings instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LocalizedStrings fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Text in norwegian' */
  private java.lang.CharSequence no;
  /** Text in norwegian bokmål' */
  private java.lang.CharSequence nb;
  /** Text in norwegian nynorsk' */
  private java.lang.CharSequence nn;
  /** Text in english' */
  private java.lang.CharSequence en;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LocalizedStrings() {}

  /**
   * All-args constructor.
   * @param no Text in norwegian'
   * @param nb Text in norwegian bokmål'
   * @param nn Text in norwegian nynorsk'
   * @param en Text in english'
   */
  public LocalizedStrings(java.lang.CharSequence no, java.lang.CharSequence nb, java.lang.CharSequence nn, java.lang.CharSequence en) {
    this.no = no;
    this.nb = nb;
    this.nn = nn;
    this.en = en;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return no;
    case 1: return nb;
    case 2: return nn;
    case 3: return en;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: no = (java.lang.CharSequence)value$; break;
    case 1: nb = (java.lang.CharSequence)value$; break;
    case 2: nn = (java.lang.CharSequence)value$; break;
    case 3: en = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'no' field.
   * @return Text in norwegian'
   */
  public java.lang.CharSequence getNo() {
    return no;
  }


  /**
   * Sets the value of the 'no' field.
   * Text in norwegian'
   * @param value the value to set.
   */
  public void setNo(java.lang.CharSequence value) {
    this.no = value;
  }

  /**
   * Gets the value of the 'nb' field.
   * @return Text in norwegian bokmål'
   */
  public java.lang.CharSequence getNb() {
    return nb;
  }


  /**
   * Sets the value of the 'nb' field.
   * Text in norwegian bokmål'
   * @param value the value to set.
   */
  public void setNb(java.lang.CharSequence value) {
    this.nb = value;
  }

  /**
   * Gets the value of the 'nn' field.
   * @return Text in norwegian nynorsk'
   */
  public java.lang.CharSequence getNn() {
    return nn;
  }


  /**
   * Sets the value of the 'nn' field.
   * Text in norwegian nynorsk'
   * @param value the value to set.
   */
  public void setNn(java.lang.CharSequence value) {
    this.nn = value;
  }

  /**
   * Gets the value of the 'en' field.
   * @return Text in english'
   */
  public java.lang.CharSequence getEn() {
    return en;
  }


  /**
   * Sets the value of the 'en' field.
   * Text in english'
   * @param value the value to set.
   */
  public void setEn(java.lang.CharSequence value) {
    this.en = value;
  }

  /**
   * Creates a new LocalizedStrings RecordBuilder.
   * @return A new LocalizedStrings RecordBuilder
   */
  public static no.digdir.fdk.model.LocalizedStrings.Builder newBuilder() {
    return new no.digdir.fdk.model.LocalizedStrings.Builder();
  }

  /**
   * Creates a new LocalizedStrings RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LocalizedStrings RecordBuilder
   */
  public static no.digdir.fdk.model.LocalizedStrings.Builder newBuilder(no.digdir.fdk.model.LocalizedStrings.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.LocalizedStrings.Builder();
    } else {
      return new no.digdir.fdk.model.LocalizedStrings.Builder(other);
    }
  }

  /**
   * Creates a new LocalizedStrings RecordBuilder by copying an existing LocalizedStrings instance.
   * @param other The existing instance to copy.
   * @return A new LocalizedStrings RecordBuilder
   */
  public static no.digdir.fdk.model.LocalizedStrings.Builder newBuilder(no.digdir.fdk.model.LocalizedStrings other) {
    if (other == null) {
      return new no.digdir.fdk.model.LocalizedStrings.Builder();
    } else {
      return new no.digdir.fdk.model.LocalizedStrings.Builder(other);
    }
  }

  /**
   * RecordBuilder for LocalizedStrings instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LocalizedStrings>
    implements org.apache.avro.data.RecordBuilder<LocalizedStrings> {

    /** Text in norwegian' */
    private java.lang.CharSequence no;
    /** Text in norwegian bokmål' */
    private java.lang.CharSequence nb;
    /** Text in norwegian nynorsk' */
    private java.lang.CharSequence nn;
    /** Text in english' */
    private java.lang.CharSequence en;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.LocalizedStrings.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.no)) {
        this.no = data().deepCopy(fields()[0].schema(), other.no);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nb)) {
        this.nb = data().deepCopy(fields()[1].schema(), other.nb);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.nn)) {
        this.nn = data().deepCopy(fields()[2].schema(), other.nn);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.en)) {
        this.en = data().deepCopy(fields()[3].schema(), other.en);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing LocalizedStrings instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.LocalizedStrings other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.no)) {
        this.no = data().deepCopy(fields()[0].schema(), other.no);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nb)) {
        this.nb = data().deepCopy(fields()[1].schema(), other.nb);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.nn)) {
        this.nn = data().deepCopy(fields()[2].schema(), other.nn);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.en)) {
        this.en = data().deepCopy(fields()[3].schema(), other.en);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'no' field.
      * Text in norwegian'
      * @return The value.
      */
    public java.lang.CharSequence getNo() {
      return no;
    }


    /**
      * Sets the value of the 'no' field.
      * Text in norwegian'
      * @param value The value of 'no'.
      * @return This builder.
      */
    public no.digdir.fdk.model.LocalizedStrings.Builder setNo(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.no = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'no' field has been set.
      * Text in norwegian'
      * @return True if the 'no' field has been set, false otherwise.
      */
    public boolean hasNo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'no' field.
      * Text in norwegian'
      * @return This builder.
      */
    public no.digdir.fdk.model.LocalizedStrings.Builder clearNo() {
      no = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nb' field.
      * Text in norwegian bokmål'
      * @return The value.
      */
    public java.lang.CharSequence getNb() {
      return nb;
    }


    /**
      * Sets the value of the 'nb' field.
      * Text in norwegian bokmål'
      * @param value The value of 'nb'.
      * @return This builder.
      */
    public no.digdir.fdk.model.LocalizedStrings.Builder setNb(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.nb = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nb' field has been set.
      * Text in norwegian bokmål'
      * @return True if the 'nb' field has been set, false otherwise.
      */
    public boolean hasNb() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nb' field.
      * Text in norwegian bokmål'
      * @return This builder.
      */
    public no.digdir.fdk.model.LocalizedStrings.Builder clearNb() {
      nb = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'nn' field.
      * Text in norwegian nynorsk'
      * @return The value.
      */
    public java.lang.CharSequence getNn() {
      return nn;
    }


    /**
      * Sets the value of the 'nn' field.
      * Text in norwegian nynorsk'
      * @param value The value of 'nn'.
      * @return This builder.
      */
    public no.digdir.fdk.model.LocalizedStrings.Builder setNn(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.nn = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'nn' field has been set.
      * Text in norwegian nynorsk'
      * @return True if the 'nn' field has been set, false otherwise.
      */
    public boolean hasNn() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'nn' field.
      * Text in norwegian nynorsk'
      * @return This builder.
      */
    public no.digdir.fdk.model.LocalizedStrings.Builder clearNn() {
      nn = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'en' field.
      * Text in english'
      * @return The value.
      */
    public java.lang.CharSequence getEn() {
      return en;
    }


    /**
      * Sets the value of the 'en' field.
      * Text in english'
      * @param value The value of 'en'.
      * @return This builder.
      */
    public no.digdir.fdk.model.LocalizedStrings.Builder setEn(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.en = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'en' field has been set.
      * Text in english'
      * @return True if the 'en' field has been set, false otherwise.
      */
    public boolean hasEn() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'en' field.
      * Text in english'
      * @return This builder.
      */
    public no.digdir.fdk.model.LocalizedStrings.Builder clearEn() {
      en = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LocalizedStrings build() {
      try {
        LocalizedStrings record = new LocalizedStrings();
        record.no = fieldSetFlags()[0] ? this.no : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.nb = fieldSetFlags()[1] ? this.nb : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.nn = fieldSetFlags()[2] ? this.nn : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.en = fieldSetFlags()[3] ? this.en : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LocalizedStrings>
    WRITER$ = (org.apache.avro.io.DatumWriter<LocalizedStrings>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LocalizedStrings>
    READER$ = (org.apache.avro.io.DatumReader<LocalizedStrings>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.no == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.no);
    }

    if (this.nb == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.nb);
    }

    if (this.nn == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.nn);
    }

    if (this.en == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.en);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.no = null;
      } else {
        this.no = in.readString(this.no instanceof Utf8 ? (Utf8)this.no : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nb = null;
      } else {
        this.nb = in.readString(this.nb instanceof Utf8 ? (Utf8)this.nb : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.nn = null;
      } else {
        this.nn = in.readString(this.nn instanceof Utf8 ? (Utf8)this.nn : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.en = null;
      } else {
        this.en = in.readString(this.en instanceof Utf8 ? (Utf8)this.en : null);
      }

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.no = null;
          } else {
            this.no = in.readString(this.no instanceof Utf8 ? (Utf8)this.no : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nb = null;
          } else {
            this.nb = in.readString(this.nb instanceof Utf8 ? (Utf8)this.nb : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.nn = null;
          } else {
            this.nn = in.readString(this.nn instanceof Utf8 ? (Utf8)this.nn : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.en = null;
          } else {
            this.en = in.readString(this.en instanceof Utf8 ? (Utf8)this.en : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










