/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package no.digdir.fdk.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** EU data theme information */
@org.apache.avro.specific.AvroGenerated
public class EuDataTheme extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8022152716462988845L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EuDataTheme\",\"namespace\":\"no.digdir.fdk.model\",\"doc\":\"EU data theme information\",\"fields\":[{\"name\":\"uri\",\"type\":[\"null\",\"string\"],\"doc\":\"URI for the theme\"},{\"name\":\"code\",\"type\":[\"null\",\"string\"],\"doc\":\"Code value for the theme\"},{\"name\":\"title\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LocalizedStrings\",\"doc\":\"Multilingual texts\",\"fields\":[{\"name\":\"no\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian'\"},{\"name\":\"nb\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian bokm√•l'\"},{\"name\":\"nn\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in norwegian nynorsk'\"},{\"name\":\"en\",\"type\":[\"null\",\"string\"],\"doc\":\"Text in english'\"}]}],\"doc\":\"Multilingual title of the theme\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EuDataTheme> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EuDataTheme> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EuDataTheme> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EuDataTheme> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EuDataTheme> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EuDataTheme to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EuDataTheme from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EuDataTheme instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EuDataTheme fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** URI for the theme */
  private java.lang.CharSequence uri;
  /** Code value for the theme */
  private java.lang.CharSequence code;
  /** Multilingual title of the theme */
  private no.digdir.fdk.model.LocalizedStrings title;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EuDataTheme() {}

  /**
   * All-args constructor.
   * @param uri URI for the theme
   * @param code Code value for the theme
   * @param title Multilingual title of the theme
   */
  public EuDataTheme(java.lang.CharSequence uri, java.lang.CharSequence code, no.digdir.fdk.model.LocalizedStrings title) {
    this.uri = uri;
    this.code = code;
    this.title = title;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uri;
    case 1: return code;
    case 2: return title;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uri = (java.lang.CharSequence)value$; break;
    case 1: code = (java.lang.CharSequence)value$; break;
    case 2: title = (no.digdir.fdk.model.LocalizedStrings)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uri' field.
   * @return URI for the theme
   */
  public java.lang.CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * URI for the theme
   * @param value the value to set.
   */
  public void setUri(java.lang.CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return Code value for the theme
   */
  public java.lang.CharSequence getCode() {
    return code;
  }


  /**
   * Sets the value of the 'code' field.
   * Code value for the theme
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return Multilingual title of the theme
   */
  public no.digdir.fdk.model.LocalizedStrings getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * Multilingual title of the theme
   * @param value the value to set.
   */
  public void setTitle(no.digdir.fdk.model.LocalizedStrings value) {
    this.title = value;
  }

  /**
   * Creates a new EuDataTheme RecordBuilder.
   * @return A new EuDataTheme RecordBuilder
   */
  public static no.digdir.fdk.model.EuDataTheme.Builder newBuilder() {
    return new no.digdir.fdk.model.EuDataTheme.Builder();
  }

  /**
   * Creates a new EuDataTheme RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EuDataTheme RecordBuilder
   */
  public static no.digdir.fdk.model.EuDataTheme.Builder newBuilder(no.digdir.fdk.model.EuDataTheme.Builder other) {
    if (other == null) {
      return new no.digdir.fdk.model.EuDataTheme.Builder();
    } else {
      return new no.digdir.fdk.model.EuDataTheme.Builder(other);
    }
  }

  /**
   * Creates a new EuDataTheme RecordBuilder by copying an existing EuDataTheme instance.
   * @param other The existing instance to copy.
   * @return A new EuDataTheme RecordBuilder
   */
  public static no.digdir.fdk.model.EuDataTheme.Builder newBuilder(no.digdir.fdk.model.EuDataTheme other) {
    if (other == null) {
      return new no.digdir.fdk.model.EuDataTheme.Builder();
    } else {
      return new no.digdir.fdk.model.EuDataTheme.Builder(other);
    }
  }

  /**
   * RecordBuilder for EuDataTheme instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EuDataTheme>
    implements org.apache.avro.data.RecordBuilder<EuDataTheme> {

    /** URI for the theme */
    private java.lang.CharSequence uri;
    /** Code value for the theme */
    private java.lang.CharSequence code;
    /** Multilingual title of the theme */
    private no.digdir.fdk.model.LocalizedStrings title;
    private no.digdir.fdk.model.LocalizedStrings.Builder titleBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(no.digdir.fdk.model.EuDataTheme.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.title)) {
        this.title = data().deepCopy(fields()[2].schema(), other.title);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasTitleBuilder()) {
        this.titleBuilder = no.digdir.fdk.model.LocalizedStrings.newBuilder(other.getTitleBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing EuDataTheme instance
     * @param other The existing instance to copy.
     */
    private Builder(no.digdir.fdk.model.EuDataTheme other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.uri)) {
        this.uri = data().deepCopy(fields()[0].schema(), other.uri);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.code)) {
        this.code = data().deepCopy(fields()[1].schema(), other.code);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.title)) {
        this.title = data().deepCopy(fields()[2].schema(), other.title);
        fieldSetFlags()[2] = true;
      }
      this.titleBuilder = null;
    }

    /**
      * Gets the value of the 'uri' field.
      * URI for the theme
      * @return The value.
      */
    public java.lang.CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * URI for the theme
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public no.digdir.fdk.model.EuDataTheme.Builder setUri(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uri = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * URI for the theme
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uri' field.
      * URI for the theme
      * @return This builder.
      */
    public no.digdir.fdk.model.EuDataTheme.Builder clearUri() {
      uri = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * Code value for the theme
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }


    /**
      * Sets the value of the 'code' field.
      * Code value for the theme
      * @param value The value of 'code'.
      * @return This builder.
      */
    public no.digdir.fdk.model.EuDataTheme.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.code = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * Code value for the theme
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'code' field.
      * Code value for the theme
      * @return This builder.
      */
    public no.digdir.fdk.model.EuDataTheme.Builder clearCode() {
      code = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * Multilingual title of the theme
      * @return The value.
      */
    public no.digdir.fdk.model.LocalizedStrings getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * Multilingual title of the theme
      * @param value The value of 'title'.
      * @return This builder.
      */
    public no.digdir.fdk.model.EuDataTheme.Builder setTitle(no.digdir.fdk.model.LocalizedStrings value) {
      validate(fields()[2], value);
      this.titleBuilder = null;
      this.title = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * Multilingual title of the theme
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'title' field and creates one if it doesn't exist yet.
     * Multilingual title of the theme
     * @return This builder.
     */
    public no.digdir.fdk.model.LocalizedStrings.Builder getTitleBuilder() {
      if (titleBuilder == null) {
        if (hasTitle()) {
          setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder(title));
        } else {
          setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.newBuilder());
        }
      }
      return titleBuilder;
    }

    /**
     * Sets the Builder instance for the 'title' field
     * Multilingual title of the theme
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public no.digdir.fdk.model.EuDataTheme.Builder setTitleBuilder(no.digdir.fdk.model.LocalizedStrings.Builder value) {
      clearTitle();
      titleBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'title' field has an active Builder instance
     * Multilingual title of the theme
     * @return True if the 'title' field has an active Builder instance
     */
    public boolean hasTitleBuilder() {
      return titleBuilder != null;
    }

    /**
      * Clears the value of the 'title' field.
      * Multilingual title of the theme
      * @return This builder.
      */
    public no.digdir.fdk.model.EuDataTheme.Builder clearTitle() {
      title = null;
      titleBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EuDataTheme build() {
      try {
        EuDataTheme record = new EuDataTheme();
        record.uri = fieldSetFlags()[0] ? this.uri : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.code = fieldSetFlags()[1] ? this.code : (java.lang.CharSequence) defaultValue(fields()[1]);
        if (titleBuilder != null) {
          try {
            record.title = this.titleBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("title"));
            throw e;
          }
        } else {
          record.title = fieldSetFlags()[2] ? this.title : (no.digdir.fdk.model.LocalizedStrings) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EuDataTheme>
    WRITER$ = (org.apache.avro.io.DatumWriter<EuDataTheme>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EuDataTheme>
    READER$ = (org.apache.avro.io.DatumReader<EuDataTheme>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.uri == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.uri);
    }

    if (this.code == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.code);
    }

    if (this.title == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.title.customEncode(out);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.uri = null;
      } else {
        this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.code = null;
      } else {
        this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.title = null;
      } else {
        if (this.title == null) {
          this.title = new no.digdir.fdk.model.LocalizedStrings();
        }
        this.title.customDecode(in);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.uri = null;
          } else {
            this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.code = null;
          } else {
            this.code = in.readString(this.code instanceof Utf8 ? (Utf8)this.code : null);
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.title = null;
          } else {
            if (this.title == null) {
              this.title = new no.digdir.fdk.model.LocalizedStrings();
            }
            this.title.customDecode(in);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










